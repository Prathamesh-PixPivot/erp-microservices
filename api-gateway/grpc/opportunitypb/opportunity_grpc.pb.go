// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: grpc/opportunity.proto

package opportunitypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	OpportunityService_CreateOpportunity_FullMethodName = "/opportunitypb.OpportunityService/CreateOpportunity"
	OpportunityService_GetOpportunity_FullMethodName    = "/opportunitypb.OpportunityService/GetOpportunity"
	OpportunityService_UpdateOpportunity_FullMethodName = "/opportunitypb.OpportunityService/UpdateOpportunity"
	OpportunityService_DeleteOpportunity_FullMethodName = "/opportunitypb.OpportunityService/DeleteOpportunity"
	OpportunityService_ListOpportunities_FullMethodName = "/opportunitypb.OpportunityService/ListOpportunities"
)

// OpportunityServiceClient is the client API for OpportunityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpportunityServiceClient interface {
	CreateOpportunity(ctx context.Context, in *CreateOpportunityRequest, opts ...grpc.CallOption) (*CreateOpportunityResponse, error)
	GetOpportunity(ctx context.Context, in *GetOpportunityRequest, opts ...grpc.CallOption) (*GetOpportunityResponse, error)
	UpdateOpportunity(ctx context.Context, in *UpdateOpportunityRequest, opts ...grpc.CallOption) (*UpdateOpportunityResponse, error)
	DeleteOpportunity(ctx context.Context, in *DeleteOpportunityRequest, opts ...grpc.CallOption) (*DeleteOpportunityResponse, error)
	ListOpportunities(ctx context.Context, in *ListOpportunitiesRequest, opts ...grpc.CallOption) (*ListOpportunitiesResponse, error)
}

type opportunityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpportunityServiceClient(cc grpc.ClientConnInterface) OpportunityServiceClient {
	return &opportunityServiceClient{cc}
}

func (c *opportunityServiceClient) CreateOpportunity(ctx context.Context, in *CreateOpportunityRequest, opts ...grpc.CallOption) (*CreateOpportunityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOpportunityResponse)
	err := c.cc.Invoke(ctx, OpportunityService_CreateOpportunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opportunityServiceClient) GetOpportunity(ctx context.Context, in *GetOpportunityRequest, opts ...grpc.CallOption) (*GetOpportunityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOpportunityResponse)
	err := c.cc.Invoke(ctx, OpportunityService_GetOpportunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opportunityServiceClient) UpdateOpportunity(ctx context.Context, in *UpdateOpportunityRequest, opts ...grpc.CallOption) (*UpdateOpportunityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOpportunityResponse)
	err := c.cc.Invoke(ctx, OpportunityService_UpdateOpportunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opportunityServiceClient) DeleteOpportunity(ctx context.Context, in *DeleteOpportunityRequest, opts ...grpc.CallOption) (*DeleteOpportunityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOpportunityResponse)
	err := c.cc.Invoke(ctx, OpportunityService_DeleteOpportunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opportunityServiceClient) ListOpportunities(ctx context.Context, in *ListOpportunitiesRequest, opts ...grpc.CallOption) (*ListOpportunitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOpportunitiesResponse)
	err := c.cc.Invoke(ctx, OpportunityService_ListOpportunities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpportunityServiceServer is the server API for OpportunityService service.
// All implementations must embed UnimplementedOpportunityServiceServer
// for forward compatibility.
type OpportunityServiceServer interface {
	CreateOpportunity(context.Context, *CreateOpportunityRequest) (*CreateOpportunityResponse, error)
	GetOpportunity(context.Context, *GetOpportunityRequest) (*GetOpportunityResponse, error)
	UpdateOpportunity(context.Context, *UpdateOpportunityRequest) (*UpdateOpportunityResponse, error)
	DeleteOpportunity(context.Context, *DeleteOpportunityRequest) (*DeleteOpportunityResponse, error)
	ListOpportunities(context.Context, *ListOpportunitiesRequest) (*ListOpportunitiesResponse, error)
	mustEmbedUnimplementedOpportunityServiceServer()
}

// UnimplementedOpportunityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOpportunityServiceServer struct{}

func (UnimplementedOpportunityServiceServer) CreateOpportunity(context.Context, *CreateOpportunityRequest) (*CreateOpportunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOpportunity not implemented")
}
func (UnimplementedOpportunityServiceServer) GetOpportunity(context.Context, *GetOpportunityRequest) (*GetOpportunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpportunity not implemented")
}
func (UnimplementedOpportunityServiceServer) UpdateOpportunity(context.Context, *UpdateOpportunityRequest) (*UpdateOpportunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOpportunity not implemented")
}
func (UnimplementedOpportunityServiceServer) DeleteOpportunity(context.Context, *DeleteOpportunityRequest) (*DeleteOpportunityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOpportunity not implemented")
}
func (UnimplementedOpportunityServiceServer) ListOpportunities(context.Context, *ListOpportunitiesRequest) (*ListOpportunitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOpportunities not implemented")
}
func (UnimplementedOpportunityServiceServer) mustEmbedUnimplementedOpportunityServiceServer() {}
func (UnimplementedOpportunityServiceServer) testEmbeddedByValue()                            {}

// UnsafeOpportunityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpportunityServiceServer will
// result in compilation errors.
type UnsafeOpportunityServiceServer interface {
	mustEmbedUnimplementedOpportunityServiceServer()
}

func RegisterOpportunityServiceServer(s grpc.ServiceRegistrar, srv OpportunityServiceServer) {
	// If the following call pancis, it indicates UnimplementedOpportunityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OpportunityService_ServiceDesc, srv)
}

func _OpportunityService_CreateOpportunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOpportunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpportunityServiceServer).CreateOpportunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpportunityService_CreateOpportunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpportunityServiceServer).CreateOpportunity(ctx, req.(*CreateOpportunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpportunityService_GetOpportunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpportunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpportunityServiceServer).GetOpportunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpportunityService_GetOpportunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpportunityServiceServer).GetOpportunity(ctx, req.(*GetOpportunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpportunityService_UpdateOpportunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOpportunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpportunityServiceServer).UpdateOpportunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpportunityService_UpdateOpportunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpportunityServiceServer).UpdateOpportunity(ctx, req.(*UpdateOpportunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpportunityService_DeleteOpportunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOpportunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpportunityServiceServer).DeleteOpportunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpportunityService_DeleteOpportunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpportunityServiceServer).DeleteOpportunity(ctx, req.(*DeleteOpportunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpportunityService_ListOpportunities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOpportunitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpportunityServiceServer).ListOpportunities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpportunityService_ListOpportunities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpportunityServiceServer).ListOpportunities(ctx, req.(*ListOpportunitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpportunityService_ServiceDesc is the grpc.ServiceDesc for OpportunityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpportunityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opportunitypb.OpportunityService",
	HandlerType: (*OpportunityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOpportunity",
			Handler:    _OpportunityService_CreateOpportunity_Handler,
		},
		{
			MethodName: "GetOpportunity",
			Handler:    _OpportunityService_GetOpportunity_Handler,
		},
		{
			MethodName: "UpdateOpportunity",
			Handler:    _OpportunityService_UpdateOpportunity_Handler,
		},
		{
			MethodName: "DeleteOpportunity",
			Handler:    _OpportunityService_DeleteOpportunity_Handler,
		},
		{
			MethodName: "ListOpportunities",
			Handler:    _OpportunityService_ListOpportunities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/opportunity.proto",
}
