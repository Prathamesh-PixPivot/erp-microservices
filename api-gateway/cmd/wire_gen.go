// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"api-gateway/infrastructure"
	"api-gateway/internal/delivery/graphql"
	"github.com/labstack/echo/v4"
	"go.uber.org/zap"
)

// Injectors from di.go:

// InitializeDependencies sets up all dependencies using Google Wire
func InitializeDependencies() (*Dependencies, error) {
	echo := ProvideEcho()
	logger := ProvideLogger()
	dependencies := &Dependencies{
		Echo:     echo,
		Logger:   logger,
	}
	return dependencies, nil
}

// di.go:

// Dependencies struct groups all dependencies
type Dependencies struct {
	Echo     *echo.Echo
	Logger   *zap.Logger
	Resolver *graphql.Resolver
}

// ProvideEcho initializes Echo
func ProvideEcho() *echo.Echo {
	e := echo.New()
	return e
}

// ProvideLogger initializes Zap Logger
func ProvideLogger() *zap.Logger {
	infrastructure.InitLogger("DEV")
	return infrastructure.GetLogger()
}

// ProvideGraphQLResolver initializes the main Resolver
func ProvideGraphQLResolver(
) *graphql.Resolver {
	return &graphql.Resolver{}
}
