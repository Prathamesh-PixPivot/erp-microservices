# Enum for Activity Status
enum ActivityStatus {
  Pending
  InProgress
  Completed
  Canceled
  Scheduled
}

# Enum for Sorting Activity Fields
enum ActivitySortField {
  TITLE
  DUEDATE
  CREATEDAT
  UPDATEDAT
}

# Enum for Task Status
enum TaskStatus {
  Pending
  InProgress
  Completed
  Canceled
}

# Enum for Task Priority
enum TaskPriority {
  Low
  Medium
  High
}

# Enum for Sorting Task Fields
enum TaskSortField {
  TITLE
  DUEDATE
  CREATEDAT
  UPDATEDAT
}

# Enum for Lead Status
enum LeadStatus {
  New
  Contacted
  Qualified
  Converted
  Unqualified
}

# Enum for Sorting Contact Fields
enum ContactSortField {
  FIRSTNAME
  LASTNAME
  EMAIL
  CREATEDAT
  UPDATEDAT
}

# Enum for Sorting Opportunity Fields
enum OpportunitySortField {
  NAME
  AMOUNT
  CREATEDAT
  UPDATEDAT
}

# SignupResponse type
type SignupResponse {
  message: String!
  userId: ID!
  organizationId: ID!
}

# SigninResponse type
type SigninResponse {
  accessToken: String!
  refreshToken: String!
}

# User type
type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  phone: String!
  role: String!
  organization: Organization!
}

# Organization type
type Organization {
  id: ID!
  gstIn: String!
  name: String!
  phone: String!
  email: String!
  address: String!
  city: String!
  country: String!
  state: String!
  zipcode: String!
  website: String!
  industry: String!
}

# Lead type
type Lead {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  phone: String
  status: LeadStatus!
  assignedTo: String!
  organization: Organization!
}

# Opportunity type
type Opportunity {
  id: ID!
  name: String!
  description: String
  stage: String!
  amount: Float!
  closeDate: String!
  probability: Float
  lead: Lead!
  account: Organization
  owner: User!
}

# Contact type
type Contact {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  phone: String
  address: String
  city: String
  state: String
  country: String
  zipCode: String
  company: String
  position: String
  socialMediaProfiles: String
  notes: String
  createdAt: String
  updatedAt: String
}

# Activity type
type Activity {
  id: ID!
  title: String!
  description: String
  type: String!
  status: ActivityStatus!
  dueDate: String
  createdAt: String!
  updatedAt: String!
  contact: Contact!
  tasks: [Task!]!
}

# Task type
type Task {
  id: ID!
  title: String!
  description: String
  status: TaskStatus!
  priority: TaskPriority!
  dueDate: String
  createdAt: String!
  updatedAt: String!
  activity: Activity!
}

type Vendor {
    id: ID!
    name: String!
    category: String!
    service: String!
    industry: String!
    gstin: String!
    certifications: String
    licenses: String
    isCompliant: Boolean
    performanceScore: Float
    riskAssessment: String
}

type PurchaseOrder {
    id: ID!
    vendorId: ID!
    orderDetails: String!
    status: String!
    deliveryDate: String  # ISO Date string in GraphQL
    receivedDate: String  # ISO Date string in GraphQL
}

# Vendor Performance Type
type VendorPerformance {
    id: ID!
    vendorId: ID!
    score: Float
    riskLevel: String
    evaluatedAt: String
}

# Payment Type
type Payment {
    id: ID!
    purchaseOrderId: ID!
    amount: Float!
    status: String!
    paymentTerms: String
    paidAt: String
}

type InvoiceItem {
    id: ID!
    item_id: String!
    name: String!
    price: Float!
    quantity: Int!
    total: Float!
}

type Invoice {
    id: ID!
    invoice_number: String!
    type: String!          # "sales", "proforma", "challan", "purchase"
    vendor_id: ID
    customer_id: ID
    total_amount: Float!
    cgst: Float!
    sgst: Float!
    igst: Float!
    status: String!
    invoice_date: String!
    items: [InvoiceItem!]!
}

type CreditDebitNote {
    id: ID!
    type: String!          # "credit" or "debit"
    invoice_id: ID!        # Linked invoice ID
    amount: Float!
    reason: String!
    date: String!
}

input CreateCreditDebitNoteInput {
    type: String!
    invoice_id: ID!
    amount: Float!
    reason: String!
    date: String!
}

# Ledger Types and Inputs

type LedgerEntry {
    id: ID!
    transaction_id: String!
    description: String!
    debit: Float
    credit: Float
    balance: Float
    transaction_date: String!
}

input CreateLedgerEntryInput {
    transaction_id: String!
    description: String!
    debit: Float
    credit: Float
    transaction_date: String!
}

# Payment Due Types and Inputs

type PaymentDue {
    id: ID!
    invoice_id: ID!
    amount_due: Float!
    due_date: String!
    status: String!
}

input AddPaymentDueInput {
    invoice_id: ID!
    amount_due: Float!
    due_date: String!
    status: String!
}


input InvoiceItemInput {
    item_id: String!
    name: String!
    price: Float!
    quantity: Int!
}

input CreateInvoiceInput {
    type: String!
    vendor_id: ID
    customer_id: ID
    items: [InvoiceItemInput!]!
    invoice_date: String!
}

input UpdateInvoiceInput {
    invoice_id: ID!
    status: String
    items: [InvoiceItemInput]
    invoice_date: String
}

# Input types for creating and updating opportunities
input CreateOpportunityInput {
  name: String!
  description: String
  stage: String!
  amount: Float!
  closeDate: String!
  probability: Float
  leadId: ID!
  accountId: ID
  ownerId: ID!
}

input UpdateOpportunityInput {
  id: ID!
  name: String
  description: String
  stage: String
  amount: Float
  closeDate: String
  probability: Float
  leadId: ID
  accountId: ID
  ownerId: ID
}

# Input types for creating and updating Contacts
input CreateContactInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String
  address: String
  city: String
  state: String
  country: String
  zipCode: String
  company: String
  position: String
  socialMediaProfiles: String
  notes: String
}

input UpdateContactInput {
  id: ID!
  firstName: String
  lastName: String
  email: String
  phone: String
  address: String
  city: String
  state: String
  country: String
  zipCode: String
  company: String
  position: String
  socialMediaProfiles: String
  notes: String
}

# Input types for creating and updating Activities
input CreateActivityInput {
  title: String!
  description: String
  type: String!
  status: ActivityStatus!
  dueDate: String
  contactId: ID!
}

input UpdateActivityInput {
  id: ID!
  title: String
  description: String
  type: String
  status: ActivityStatus
  dueDate: String
  contactId: ID
}

# Input types for creating and updating Tasks
input CreateTaskInput {
  title: String!
  description: String
  status: TaskStatus!
  priority: TaskPriority!
  dueDate: String
  activityId: ID!
}

input UpdateTaskInput {
  id: ID!
  title: String
  description: String
  status: TaskStatus
  priority: TaskPriority
  dueDate: String
  activityId: ID
}

# Input types for creating and updating Leads
input CreateLeadInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String
  status: LeadStatus!
  assignedTo: String!
  organizationId: ID!
}

input UpdateLeadInput {
  id: ID!
  firstName: String
  lastName: String
  email: String
  phone: String
  status: LeadStatus
  assignedTo: String!
  organizationId: ID
}

# Combining all queries into a single Query type
type Query {
    getUser(id: ID!): User!                    # Get user by ID
    getOrganization(id: ID!): Organization!    # Get organization by ID
    leads: [Lead!]!                            # Get all leads
    lead(id: ID!): Lead                        # Get lead by ID
    leadByEmail(email: String!): Lead          # Get lead by email

    # Opportunity queries
    getOpportunity(id: ID!): Opportunity       # Get opportunity by ID
    listOpportunities(ownerId: ID): [Opportunity!]!  # List opportunities, optionally filtered by ownerId

    # Contacts queries
    getContact(id: ID!): Contact
    listContacts(
      pageNumber: Int, 
      pageSize: Int, 
      sortBy: ContactSortField,            # Using enum for sortBy
      ascending: Boolean
    ): [Contact!]!

    # Activity queries
    getActivity(id: ID!): Activity
    listActivities(
      pageNumber: Int, 
      pageSize: Int, 
      sortBy: ActivitySortField!,          # Using enum for sortBy
      ascending: Boolean!, 
      contactId: ID
    ): [Activity!]!

    # Task queries
    getTask(id: ID!): Task
    listTasks(
      pageNumber: Int, 
      pageSize: Int, 
      sortBy: TaskSortField!,              # Using enum for sortBy
      ascending: Boolean!, 
      activityId: ID
    ): [Task!]!

    getVendorByID(id: ID!): Vendor
    searchVendors(query: String!): [Vendor]
    getPurchaseOrderByID(id: ID!): PurchaseOrder
    getPerformanceByID(id: ID!): VendorPerformance
    getPaymentByID(id: ID!): Payment

    getInvoiceById(id: ID!): Invoice!
    listInvoices(page: Int, pageSize: Int): [Invoice!]!

    getCreditDebitNoteById(id: ID!): CreditDebitNote!
    listCreditDebitNotes: [CreditDebitNote!]!

    getLedgerEntryById(id: ID!): LedgerEntry!
    listLedgerEntries: [LedgerEntry!]!

    getPaymentDueById(id: ID!): PaymentDue!
    listPaymentDues: [PaymentDue!]!
}

# Combining all mutations into a single Mutation type
type Mutation {
    signup(
        firstName: String!,
        lastName: String!,
        email: String!,
        password: String!,
        phone: String!,
        role: String!,
        organizationName: String!,
        gstIn: String!,
        address: String!,
        city: String!,
        state: String!,
        country: String!,
        zipcode: String!,
        website: String!
    ): SignupResponse!                         # Signup mutation

    signin(email: String!, password: String!): SigninResponse! # Signin mutation

    createLead(input: CreateLeadInput!): Lead            # Create a lead
    updateLead(input: UpdateLeadInput!): Lead            # Update a lead
    deleteLead(id: ID!): Boolean                         # Delete a lead by ID

    # Opportunity mutations
    createOpportunity(input: CreateOpportunityInput!): Opportunity  # Create an opportunity
    updateOpportunity(input: UpdateOpportunityInput!): Opportunity  # Update an opportunity
    deleteOpportunity(id: ID!): Boolean                             # Delete an opportunity by ID

    # Contacts mutations
    createContact(input: CreateContactInput!): Contact
    updateContact(input: UpdateContactInput!): Contact
    deleteContact(id: ID!): Boolean

    # Activity mutations
    createActivity(input: CreateActivityInput!): Activity
    updateActivity(input: UpdateActivityInput!): Activity
    deleteActivity(id: ID!): Boolean

    # Task mutations
    createTask(input: CreateTaskInput!): Task
    updateTask(input: UpdateTaskInput!): Task
    deleteTask(id: ID!): Boolean

    createVendor(name: String!, category: String!, service: String!, industry: String!, gstin: String!, certifications: String, licenses: String): Vendor
    updateVendor(id: ID!, name: String!, category: String!, service: String!, industry: String!, gstin: String!, certifications: String, licenses: String): Vendor
    deleteVendor(id: ID!): String
    createPurchaseOrder(vendorId: ID!, orderDetails: String!, deliveryDate: String!): PurchaseOrder
    updatePurchaseOrder(id: ID!, orderDetails: String!, status: String!, deliveryDate: String, receivedDate: String): PurchaseOrder
    deletePurchaseOrder(id: ID!): String
    recordPerformance(vendorId: ID!, score: Float!, riskLevel: String!, evaluatedAt: String!): VendorPerformance
    processInvoice(purchaseOrderId: ID!, amount: Float!, paymentTerms: String!): Payment

    createInvoice(input: CreateInvoiceInput!): Invoice!
    updateInvoice(input: UpdateInvoiceInput!): Invoice!
    deleteInvoice(id: ID!): String!

    createCreditDebitNote(input: CreateCreditDebitNoteInput!): CreditDebitNote!
    deleteCreditDebitNote(id: ID!): String!

    addLedgerEntry(input: CreateLedgerEntryInput!): LedgerEntry!
    deleteLedgerEntry(id: ID!): String!

    addPaymentDue(input: AddPaymentDueInput!): PaymentDue!
    markPaymentAsPaid(id: ID!): PaymentDue!
}
