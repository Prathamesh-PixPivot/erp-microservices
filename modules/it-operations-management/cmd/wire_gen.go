// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"go.opentelemetry.io/otel"
	"go.uber.org/zap"
	"itom/config"
	"itom/internal"
	"time"
)

// Injectors from di.go:

func InitializeDependencies() (*Dependencies, error) {
	internalConfig, err := config.LoadConfig()
	if err != nil {
		return nil, err
	}
	logger, err := NewZapLogger()
	if err != nil {
		return nil, err
	}
	zabbixClient := NewZabbixClient(internalConfig)
	itomService := NewITOMService(logger, zabbixClient)
	server := NewServer(internalConfig, itomService)
	dependencies := &Dependencies{
		Config:       internalConfig,
		Logger:       logger,
		ZabbixClient: zabbixClient,
		ITOMService:  itomService,
		Server:       server,
	}
	return dependencies, nil
}

// di.go:

type Dependencies struct {
	Config       *internal.Config
	Logger       *zap.Logger
	ZabbixClient *internal.ZabbixClient
	ITOMService  *internal.ITOMService
	Server       *Server
}

func NewZapLogger() (*zap.Logger, error) {
	return zap.NewProduction()
}

func NewZabbixClient(cfg *internal.Config) *internal.ZabbixClient {
	return &internal.ZabbixClient{
		APIURL:    cfg.ZabbixAPIURL,
		AuthToken: cfg.AuthToken,
		Timeout:   10 * time.Second,
	}
}

func NewITOMService(logger *zap.Logger, client *internal.ZabbixClient) *internal.ITOMService {
	tracer := otel.Tracer("itom-service")
	return &internal.ITOMService{
		Logger:       logger,
		ZabbixClient: client,
		Tracer:       tracer,
	}
}

func NewServer(cfg *internal.Config, srv *internal.ITOMService) *Server {
	return NewFiberServer(cfg, srv)
}

var wireSet = wire.NewSet(config.LoadConfig, NewZapLogger,
	NewZabbixClient,
	NewITOMService,
	NewServer,
)
