// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pantry.proto

package pantry_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PantryService_CreatePantryItem_FullMethodName = "/pantry.PantryService/CreatePantryItem"
	PantryService_GetPantryItem_FullMethodName    = "/pantry.PantryService/GetPantryItem"
	PantryService_UpdatePantryItem_FullMethodName = "/pantry.PantryService/UpdatePantryItem"
	PantryService_DeletePantryItem_FullMethodName = "/pantry.PantryService/DeletePantryItem"
	PantryService_ListPantryItems_FullMethodName  = "/pantry.PantryService/ListPantryItems"
	PantryService_CreateBucketItem_FullMethodName = "/pantry.PantryService/CreateBucketItem"
	PantryService_GetBucketItem_FullMethodName    = "/pantry.PantryService/GetBucketItem"
	PantryService_UpdateBucketItem_FullMethodName = "/pantry.PantryService/UpdateBucketItem"
	PantryService_DeleteBucketItem_FullMethodName = "/pantry.PantryService/DeleteBucketItem"
	PantryService_ListBucketItems_FullMethodName  = "/pantry.PantryService/ListBucketItems"
	PantryService_CreateExpenseLog_FullMethodName = "/pantry.PantryService/CreateExpenseLog"
	PantryService_GetExpenseLog_FullMethodName    = "/pantry.PantryService/GetExpenseLog"
	PantryService_UpdateExpenseLog_FullMethodName = "/pantry.PantryService/UpdateExpenseLog"
	PantryService_DeleteExpenseLog_FullMethodName = "/pantry.PantryService/DeleteExpenseLog"
	PantryService_ListExpenseLogs_FullMethodName  = "/pantry.PantryService/ListExpenseLogs"
)

// PantryServiceClient is the client API for PantryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Inventory Management Service
type PantryServiceClient interface {
	// CRUD for pantry items
	CreatePantryItem(ctx context.Context, in *CreatePantryItemRequest, opts ...grpc.CallOption) (*CreatePantryItemResponse, error)
	GetPantryItem(ctx context.Context, in *GetPantryItemRequest, opts ...grpc.CallOption) (*GetPantryItemResponse, error)
	UpdatePantryItem(ctx context.Context, in *UpdatePantryItemRequest, opts ...grpc.CallOption) (*UpdatePantryItemResponse, error)
	DeletePantryItem(ctx context.Context, in *DeletePantryItemRequest, opts ...grpc.CallOption) (*DeletePantryItemResponse, error)
	ListPantryItems(ctx context.Context, in *ListPantryItemsRequest, opts ...grpc.CallOption) (*ListPantryItemsResponse, error)
	// CRUD for pantry items
	CreateBucketItem(ctx context.Context, in *CreateBucketItemRequest, opts ...grpc.CallOption) (*CreateBucketItemResponse, error)
	GetBucketItem(ctx context.Context, in *GetBucketItemRequest, opts ...grpc.CallOption) (*GetBucketItemResponse, error)
	UpdateBucketItem(ctx context.Context, in *UpdateBucketItemRequest, opts ...grpc.CallOption) (*UpdateBucketItemResponse, error)
	DeleteBucketItem(ctx context.Context, in *DeleteBucketItemRequest, opts ...grpc.CallOption) (*DeleteBucketItemResponse, error)
	ListBucketItems(ctx context.Context, in *ListBucketItemsRequest, opts ...grpc.CallOption) (*ListBucketItemsResponse, error)
	// // CRUD for pantry items
	CreateExpenseLog(ctx context.Context, in *CreateExpenseLogRequest, opts ...grpc.CallOption) (*CreateExpenseLogResponse, error)
	GetExpenseLog(ctx context.Context, in *GetExpenseLogRequest, opts ...grpc.CallOption) (*GetExpenseLogResponse, error)
	UpdateExpenseLog(ctx context.Context, in *UpdateExpenseLogRequest, opts ...grpc.CallOption) (*UpdateExpenseLogResponse, error)
	DeleteExpenseLog(ctx context.Context, in *DeleteExpenseLogRequest, opts ...grpc.CallOption) (*DeleteExpenseLogResponse, error)
	ListExpenseLogs(ctx context.Context, in *ListExpenseLogsRequest, opts ...grpc.CallOption) (*ListExpenseLogsResponse, error)
}

type pantryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPantryServiceClient(cc grpc.ClientConnInterface) PantryServiceClient {
	return &pantryServiceClient{cc}
}

func (c *pantryServiceClient) CreatePantryItem(ctx context.Context, in *CreatePantryItemRequest, opts ...grpc.CallOption) (*CreatePantryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePantryItemResponse)
	err := c.cc.Invoke(ctx, PantryService_CreatePantryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pantryServiceClient) GetPantryItem(ctx context.Context, in *GetPantryItemRequest, opts ...grpc.CallOption) (*GetPantryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPantryItemResponse)
	err := c.cc.Invoke(ctx, PantryService_GetPantryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pantryServiceClient) UpdatePantryItem(ctx context.Context, in *UpdatePantryItemRequest, opts ...grpc.CallOption) (*UpdatePantryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePantryItemResponse)
	err := c.cc.Invoke(ctx, PantryService_UpdatePantryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pantryServiceClient) DeletePantryItem(ctx context.Context, in *DeletePantryItemRequest, opts ...grpc.CallOption) (*DeletePantryItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePantryItemResponse)
	err := c.cc.Invoke(ctx, PantryService_DeletePantryItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pantryServiceClient) ListPantryItems(ctx context.Context, in *ListPantryItemsRequest, opts ...grpc.CallOption) (*ListPantryItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPantryItemsResponse)
	err := c.cc.Invoke(ctx, PantryService_ListPantryItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pantryServiceClient) CreateBucketItem(ctx context.Context, in *CreateBucketItemRequest, opts ...grpc.CallOption) (*CreateBucketItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBucketItemResponse)
	err := c.cc.Invoke(ctx, PantryService_CreateBucketItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pantryServiceClient) GetBucketItem(ctx context.Context, in *GetBucketItemRequest, opts ...grpc.CallOption) (*GetBucketItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBucketItemResponse)
	err := c.cc.Invoke(ctx, PantryService_GetBucketItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pantryServiceClient) UpdateBucketItem(ctx context.Context, in *UpdateBucketItemRequest, opts ...grpc.CallOption) (*UpdateBucketItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBucketItemResponse)
	err := c.cc.Invoke(ctx, PantryService_UpdateBucketItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pantryServiceClient) DeleteBucketItem(ctx context.Context, in *DeleteBucketItemRequest, opts ...grpc.CallOption) (*DeleteBucketItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBucketItemResponse)
	err := c.cc.Invoke(ctx, PantryService_DeleteBucketItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pantryServiceClient) ListBucketItems(ctx context.Context, in *ListBucketItemsRequest, opts ...grpc.CallOption) (*ListBucketItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBucketItemsResponse)
	err := c.cc.Invoke(ctx, PantryService_ListBucketItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pantryServiceClient) CreateExpenseLog(ctx context.Context, in *CreateExpenseLogRequest, opts ...grpc.CallOption) (*CreateExpenseLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateExpenseLogResponse)
	err := c.cc.Invoke(ctx, PantryService_CreateExpenseLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pantryServiceClient) GetExpenseLog(ctx context.Context, in *GetExpenseLogRequest, opts ...grpc.CallOption) (*GetExpenseLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExpenseLogResponse)
	err := c.cc.Invoke(ctx, PantryService_GetExpenseLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pantryServiceClient) UpdateExpenseLog(ctx context.Context, in *UpdateExpenseLogRequest, opts ...grpc.CallOption) (*UpdateExpenseLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateExpenseLogResponse)
	err := c.cc.Invoke(ctx, PantryService_UpdateExpenseLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pantryServiceClient) DeleteExpenseLog(ctx context.Context, in *DeleteExpenseLogRequest, opts ...grpc.CallOption) (*DeleteExpenseLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteExpenseLogResponse)
	err := c.cc.Invoke(ctx, PantryService_DeleteExpenseLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pantryServiceClient) ListExpenseLogs(ctx context.Context, in *ListExpenseLogsRequest, opts ...grpc.CallOption) (*ListExpenseLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListExpenseLogsResponse)
	err := c.cc.Invoke(ctx, PantryService_ListExpenseLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PantryServiceServer is the server API for PantryService service.
// All implementations must embed UnimplementedPantryServiceServer
// for forward compatibility.
//
// Inventory Management Service
type PantryServiceServer interface {
	// CRUD for pantry items
	CreatePantryItem(context.Context, *CreatePantryItemRequest) (*CreatePantryItemResponse, error)
	GetPantryItem(context.Context, *GetPantryItemRequest) (*GetPantryItemResponse, error)
	UpdatePantryItem(context.Context, *UpdatePantryItemRequest) (*UpdatePantryItemResponse, error)
	DeletePantryItem(context.Context, *DeletePantryItemRequest) (*DeletePantryItemResponse, error)
	ListPantryItems(context.Context, *ListPantryItemsRequest) (*ListPantryItemsResponse, error)
	// CRUD for pantry items
	CreateBucketItem(context.Context, *CreateBucketItemRequest) (*CreateBucketItemResponse, error)
	GetBucketItem(context.Context, *GetBucketItemRequest) (*GetBucketItemResponse, error)
	UpdateBucketItem(context.Context, *UpdateBucketItemRequest) (*UpdateBucketItemResponse, error)
	DeleteBucketItem(context.Context, *DeleteBucketItemRequest) (*DeleteBucketItemResponse, error)
	ListBucketItems(context.Context, *ListBucketItemsRequest) (*ListBucketItemsResponse, error)
	// // CRUD for pantry items
	CreateExpenseLog(context.Context, *CreateExpenseLogRequest) (*CreateExpenseLogResponse, error)
	GetExpenseLog(context.Context, *GetExpenseLogRequest) (*GetExpenseLogResponse, error)
	UpdateExpenseLog(context.Context, *UpdateExpenseLogRequest) (*UpdateExpenseLogResponse, error)
	DeleteExpenseLog(context.Context, *DeleteExpenseLogRequest) (*DeleteExpenseLogResponse, error)
	ListExpenseLogs(context.Context, *ListExpenseLogsRequest) (*ListExpenseLogsResponse, error)
	mustEmbedUnimplementedPantryServiceServer()
}

// UnimplementedPantryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPantryServiceServer struct{}

func (UnimplementedPantryServiceServer) CreatePantryItem(context.Context, *CreatePantryItemRequest) (*CreatePantryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePantryItem not implemented")
}
func (UnimplementedPantryServiceServer) GetPantryItem(context.Context, *GetPantryItemRequest) (*GetPantryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPantryItem not implemented")
}
func (UnimplementedPantryServiceServer) UpdatePantryItem(context.Context, *UpdatePantryItemRequest) (*UpdatePantryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePantryItem not implemented")
}
func (UnimplementedPantryServiceServer) DeletePantryItem(context.Context, *DeletePantryItemRequest) (*DeletePantryItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePantryItem not implemented")
}
func (UnimplementedPantryServiceServer) ListPantryItems(context.Context, *ListPantryItemsRequest) (*ListPantryItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPantryItems not implemented")
}
func (UnimplementedPantryServiceServer) CreateBucketItem(context.Context, *CreateBucketItemRequest) (*CreateBucketItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucketItem not implemented")
}
func (UnimplementedPantryServiceServer) GetBucketItem(context.Context, *GetBucketItemRequest) (*GetBucketItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucketItem not implemented")
}
func (UnimplementedPantryServiceServer) UpdateBucketItem(context.Context, *UpdateBucketItemRequest) (*UpdateBucketItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucketItem not implemented")
}
func (UnimplementedPantryServiceServer) DeleteBucketItem(context.Context, *DeleteBucketItemRequest) (*DeleteBucketItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucketItem not implemented")
}
func (UnimplementedPantryServiceServer) ListBucketItems(context.Context, *ListBucketItemsRequest) (*ListBucketItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBucketItems not implemented")
}
func (UnimplementedPantryServiceServer) CreateExpenseLog(context.Context, *CreateExpenseLogRequest) (*CreateExpenseLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExpenseLog not implemented")
}
func (UnimplementedPantryServiceServer) GetExpenseLog(context.Context, *GetExpenseLogRequest) (*GetExpenseLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpenseLog not implemented")
}
func (UnimplementedPantryServiceServer) UpdateExpenseLog(context.Context, *UpdateExpenseLogRequest) (*UpdateExpenseLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExpenseLog not implemented")
}
func (UnimplementedPantryServiceServer) DeleteExpenseLog(context.Context, *DeleteExpenseLogRequest) (*DeleteExpenseLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExpenseLog not implemented")
}
func (UnimplementedPantryServiceServer) ListExpenseLogs(context.Context, *ListExpenseLogsRequest) (*ListExpenseLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExpenseLogs not implemented")
}
func (UnimplementedPantryServiceServer) mustEmbedUnimplementedPantryServiceServer() {}
func (UnimplementedPantryServiceServer) testEmbeddedByValue()                       {}

// UnsafePantryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PantryServiceServer will
// result in compilation errors.
type UnsafePantryServiceServer interface {
	mustEmbedUnimplementedPantryServiceServer()
}

func RegisterPantryServiceServer(s grpc.ServiceRegistrar, srv PantryServiceServer) {
	// If the following call pancis, it indicates UnimplementedPantryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PantryService_ServiceDesc, srv)
}

func _PantryService_CreatePantryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePantryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PantryServiceServer).CreatePantryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PantryService_CreatePantryItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PantryServiceServer).CreatePantryItem(ctx, req.(*CreatePantryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PantryService_GetPantryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPantryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PantryServiceServer).GetPantryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PantryService_GetPantryItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PantryServiceServer).GetPantryItem(ctx, req.(*GetPantryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PantryService_UpdatePantryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePantryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PantryServiceServer).UpdatePantryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PantryService_UpdatePantryItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PantryServiceServer).UpdatePantryItem(ctx, req.(*UpdatePantryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PantryService_DeletePantryItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePantryItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PantryServiceServer).DeletePantryItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PantryService_DeletePantryItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PantryServiceServer).DeletePantryItem(ctx, req.(*DeletePantryItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PantryService_ListPantryItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPantryItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PantryServiceServer).ListPantryItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PantryService_ListPantryItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PantryServiceServer).ListPantryItems(ctx, req.(*ListPantryItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PantryService_CreateBucketItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PantryServiceServer).CreateBucketItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PantryService_CreateBucketItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PantryServiceServer).CreateBucketItem(ctx, req.(*CreateBucketItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PantryService_GetBucketItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PantryServiceServer).GetBucketItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PantryService_GetBucketItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PantryServiceServer).GetBucketItem(ctx, req.(*GetBucketItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PantryService_UpdateBucketItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBucketItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PantryServiceServer).UpdateBucketItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PantryService_UpdateBucketItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PantryServiceServer).UpdateBucketItem(ctx, req.(*UpdateBucketItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PantryService_DeleteBucketItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PantryServiceServer).DeleteBucketItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PantryService_DeleteBucketItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PantryServiceServer).DeleteBucketItem(ctx, req.(*DeleteBucketItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PantryService_ListBucketItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PantryServiceServer).ListBucketItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PantryService_ListBucketItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PantryServiceServer).ListBucketItems(ctx, req.(*ListBucketItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PantryService_CreateExpenseLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExpenseLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PantryServiceServer).CreateExpenseLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PantryService_CreateExpenseLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PantryServiceServer).CreateExpenseLog(ctx, req.(*CreateExpenseLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PantryService_GetExpenseLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExpenseLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PantryServiceServer).GetExpenseLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PantryService_GetExpenseLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PantryServiceServer).GetExpenseLog(ctx, req.(*GetExpenseLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PantryService_UpdateExpenseLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExpenseLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PantryServiceServer).UpdateExpenseLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PantryService_UpdateExpenseLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PantryServiceServer).UpdateExpenseLog(ctx, req.(*UpdateExpenseLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PantryService_DeleteExpenseLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExpenseLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PantryServiceServer).DeleteExpenseLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PantryService_DeleteExpenseLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PantryServiceServer).DeleteExpenseLog(ctx, req.(*DeleteExpenseLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PantryService_ListExpenseLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExpenseLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PantryServiceServer).ListExpenseLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PantryService_ListExpenseLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PantryServiceServer).ListExpenseLogs(ctx, req.(*ListExpenseLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PantryService_ServiceDesc is the grpc.ServiceDesc for PantryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PantryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pantry.PantryService",
	HandlerType: (*PantryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePantryItem",
			Handler:    _PantryService_CreatePantryItem_Handler,
		},
		{
			MethodName: "GetPantryItem",
			Handler:    _PantryService_GetPantryItem_Handler,
		},
		{
			MethodName: "UpdatePantryItem",
			Handler:    _PantryService_UpdatePantryItem_Handler,
		},
		{
			MethodName: "DeletePantryItem",
			Handler:    _PantryService_DeletePantryItem_Handler,
		},
		{
			MethodName: "ListPantryItems",
			Handler:    _PantryService_ListPantryItems_Handler,
		},
		{
			MethodName: "CreateBucketItem",
			Handler:    _PantryService_CreateBucketItem_Handler,
		},
		{
			MethodName: "GetBucketItem",
			Handler:    _PantryService_GetBucketItem_Handler,
		},
		{
			MethodName: "UpdateBucketItem",
			Handler:    _PantryService_UpdateBucketItem_Handler,
		},
		{
			MethodName: "DeleteBucketItem",
			Handler:    _PantryService_DeleteBucketItem_Handler,
		},
		{
			MethodName: "ListBucketItems",
			Handler:    _PantryService_ListBucketItems_Handler,
		},
		{
			MethodName: "CreateExpenseLog",
			Handler:    _PantryService_CreateExpenseLog_Handler,
		},
		{
			MethodName: "GetExpenseLog",
			Handler:    _PantryService_GetExpenseLog_Handler,
		},
		{
			MethodName: "UpdateExpenseLog",
			Handler:    _PantryService_UpdateExpenseLog_Handler,
		},
		{
			MethodName: "DeleteExpenseLog",
			Handler:    _PantryService_DeleteExpenseLog_Handler,
		},
		{
			MethodName: "ListExpenseLogs",
			Handler:    _PantryService_ListExpenseLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pantry.proto",
}
