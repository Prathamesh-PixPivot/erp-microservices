syntax = "proto3";

import "google/protobuf/timestamp.proto";

package finance;

option go_package = "/finance_pb";

// --------------- Invoice & Tax Services ----------------
service InvoiceService {
    rpc CreateInvoice(CreateInvoiceRequest) returns (InvoiceResponse);
    rpc GetInvoiceByID(GetInvoiceByIDRequest) returns (InvoiceResponse);
    rpc ListInvoices(ListInvoicesRequest) returns (ListInvoicesResponse);
    rpc UpdateInvoice(UpdateInvoiceRequest) returns (InvoiceResponse);
    rpc DeleteInvoice(DeleteInvoiceRequest) returns (DeleteInvoiceResponse);
    rpc SearchInvoices(SearchInvoicesRequest) returns (ListInvoicesResponse);
}

// --------------- Credit/Debit Note Services ----------------
service CreditDebitNoteService {
    rpc CreateCreditDebitNote(CreateCreditDebitNoteRequest) returns (CreditDebitNoteResponse);
    rpc GetCreditDebitNoteByID(GetCreditDebitNoteByIDRequest) returns (CreditDebitNoteResponse);
    rpc ListCreditDebitNotes(ListCreditDebitNotesRequest) returns (ListCreditDebitNotesResponse);
    rpc UpdateCreditDebitNote(UpdateCreditDebitNoteRequest) returns (CreditDebitNoteResponse);
    rpc DeleteCreditDebitNote(DeleteCreditDebitNoteRequest) returns (DeleteCreditDebitNoteResponse);
}

// --------------- Payment & Bank Reconciliation Services ----------------
service PaymentService {
    rpc AddPaymentDue(AddPaymentDueRequest) returns (PaymentDueResponse);
    rpc MarkPaymentAsPaid(MarkPaymentAsPaidRequest) returns (PaymentDueResponse);
    rpc ListPaymentDues(ListPaymentDueRequest) returns (ListPaymentDueResponse);
}

service BankReconciliationService {
    rpc ReconcileTransaction(ReconcileTransactionRequest) returns (ReconciliationResponse);
}

// --------------- Ledger & Financial Reporting Services ----------------
service LedgerService {
    rpc AddLedgerEntry(AddLedgerEntryRequest) returns (LedgerResponse);
    rpc ListLedgerEntries(ListLedgerEntriesRequest) returns (ListLedgerEntriesResponse);
}

service FinancialReportService {
    rpc GenerateProfitLossReport(ReportRequest) returns (ProfitLossReport);
    rpc GenerateBalanceSheetReport(ReportRequest) returns (BalanceSheetReport);
    rpc GenerateTrialBalanceReport(ReportRequest) returns (TrialBalanceReport);
}

// --------------- Budgeting & Budget Allocation Services ----------------
service BudgetService {
    rpc CreateBudget(CreateBudgetRequest) returns (BudgetResponse);
    rpc ListBudgets(ListBudgetsRequest) returns (ListBudgetsResponse);
}

service BudgetAllocationService {
    rpc AllocateBudget(AllocateBudgetRequest) returns (BudgetAllocationResponse);
    rpc ListBudgetAllocations(ListBudgetAllocationsRequest) returns (ListBudgetAllocationsResponse);
}

service BudgetComparisonService {
    rpc GetBudgetComparisonReport(BudgetComparisonRequest) returns (BudgetComparisonResponse);
}

// --------------- Expense Management Services ----------------
service ExpenseService {
    rpc CreateExpense(CreateExpenseRequest) returns (ExpenseResponse);
    rpc ListExpenses(ListExpensesRequest) returns (ListExpensesResponse);
}

// ---------------- Message Definitions ----------------

// Invoice message
message Invoice {
    string id = 1;
    string invoice_number = 2;
    string invoice_date = 3;
    string type = 4; // "sales", "proforma", "challan", "purchase"
    optional string vendor_id = 5; // Vendor for purchase invoices
    optional string customer_id = 6;
    string organization_id = 7;
    repeated InvoiceItem items = 8;
    
    string due_date = 9;
    string delivery_date = 10;
    string po_number = 11;
    string eway_number = 12;
    string status = 13; // "pending", "paid", etc.
    string payment_type = 14;
    string cheque_number = 15;
    string challan_number = 16;
    string challan_date = 17;
    string reverse_charge = 18;
    string lr_number = 19;
    string transporter_name = 20;
    string transporter_id = 21;
    string vehicle_number = 22;
    string against_invoice_number = 23;
    string against_invoice_date = 24;

    double total_amount = 25;
    float gst_rate = 26;
    double cgst = 27;
    double sgst = 28;
    double igst = 29;

    string created_at = 30;
    string updated_at = 31;

}

// InvoiceItem message
message InvoiceItem {
    string id = 1;
    string invoice_id = 2;
    string name = 3;
    string description = 4;
    int32 hsn = 5;
    int32 quantity = 6;
    double price = 7;
    double total = 8;
}

// Request and Response messages
message CreateInvoiceRequest {
    Invoice invoice = 1;
}

message GetInvoiceByIDRequest {
    string id = 1;
}

message ListInvoicesRequest {
    int32 page = 1;
    int32 page_size = 2;
}

message ListInvoicesResponse {
    repeated Invoice invoices = 1;
}

message UpdateInvoiceRequest {
    Invoice invoice = 1;
}

message InvoiceResponse {
    Invoice invoice = 1;
}

message DeleteInvoiceRequest {
    string id = 1;
}

message DeleteInvoiceResponse {
    string message = 1;
}

message SearchInvoicesRequest {
    string query = 1;
    int32 page = 2;
    int32 page_size = 3;
}

message CreditDebitNote {
    string note_id = 1;
    string invoice_id = 2;
    string type = 3; // "credit" or "debit"
    double amount = 4;
}

// Payment Messages
message PaymentDue {
    string payment_due_id = 1;
    string invoice_id = 2;
    double amount_due = 3;
    google.protobuf.Timestamp due_date = 4;
    string status = 5; // "paid", "unpaid"
}

// Bank Reconciliation Messages
message ReconcileTransactionRequest {
    string transaction_id = 1;
    double amount = 2;
    google.protobuf.Timestamp transaction_date = 3;
}

message ReconciliationResponse {
    bool matched = 1;
    string status = 2; // "Matched", "Pending", "Discrepancy Found"
}

// Ledger Messages
message LedgerEntry {
    string entry_id = 1;
    string description = 2;
    double debit = 3;
    double credit = 4;
    google.protobuf.Timestamp transaction_date = 5;
}

// Financial Reporting Messages
message ReportRequest {
    google.protobuf.Timestamp start_date = 1;
    google.protobuf.Timestamp end_date = 2;
}

message ProfitLossReport {
    double total_revenue = 1;
    double total_expenses = 2;
    double net_profit = 3;
}

message BalanceSheetReport {
    double total_assets = 1;
    double total_liabilities = 2;
    double net_worth = 3;
}

message TrialBalanceReport {
    repeated LedgerEntry entries = 1;
}

// Budget Messages
message Budget {
    string budget_id = 1;
    string name = 2; // "IT Budget", "Marketing Budget"
    double total_amount = 3;
    string status = 4; // "Active", "Closed"
}

message BudgetAllocation {
    string allocation_id = 1;
    string budget_id = 2;
    string department_id = 3;
    double allocated_amount = 4;
    double spent_amount = 5;
    double remaining_amount = 6;
}

message BudgetComparisonResponse {
    string budget_id = 1;
    double total_budget = 2;
    double total_allocated = 3;
    double total_spent = 4;
    double remaining_budget = 5;
}

// Expense Messages
message Expense {
    string expense_id = 1;
    string category = 2; // "Office Supplies", "Travel", "Utilities"
    double amount = 3;
    string currency = 4;
    google.protobuf.Timestamp expense_date = 5;
}

// General Response Messages
message DeleteResponse {
    string message = 1;
}
