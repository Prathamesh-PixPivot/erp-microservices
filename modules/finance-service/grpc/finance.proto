syntax = "proto3";

import "google/protobuf/timestamp.proto";

package finance;

option go_package = "/finance_pb";

// --------------- Invoice & Tax Services ----------------
service InvoiceService {
    rpc CreateInvoice(CreateInvoiceRequest) returns (InvoiceResponse);
    rpc GetInvoiceByID(GetInvoiceByIDRequest) returns (InvoiceResponse);
    rpc ListInvoices(ListInvoicesRequest) returns (ListInvoicesResponse);
    rpc UpdateInvoice(UpdateInvoiceRequest) returns (InvoiceResponse);
    rpc DeleteInvoice(DeleteInvoiceRequest) returns (DeleteInvoiceResponse);
    rpc SearchInvoices(SearchInvoicesRequest) returns (ListInvoicesResponse);
}

// --------------- Credit/Debit Note Services ----------------
service CreditDebitNoteService {
    rpc CreateCreditDebitNote(CreateCreditDebitNoteRequest) returns (CreditDebitNoteResponse);
    rpc GetCreditDebitNoteByID(GetCreditDebitNoteByIDRequest) returns (CreditDebitNoteResponse);
    rpc ListCreditDebitNotes(ListCreditDebitNotesRequest) returns (ListCreditDebitNotesResponse);
    rpc UpdateCreditDebitNote(UpdateCreditDebitNoteRequest) returns (CreditDebitNoteResponse);
    rpc DeleteCreditDebitNote(DeleteCreditDebitNoteRequest) returns (DeleteCreditDebitNoteResponse);
}

// --------------- Payment & Bank Reconciliation Services ----------------
service PaymentService {
    rpc AddPaymentDue(AddPaymentDueRequest) returns (PaymentDueResponse);
    rpc MarkPaymentAsPaid(MarkPaymentAsPaidRequest) returns (PaymentDueResponse);
    rpc ListPaymentDues(ListPaymentDueRequest) returns (ListPaymentDueResponse);
}

service BankReconciliationService {
    rpc ReconcileTransaction(ReconcileTransactionRequest) returns (ReconciliationResponse);
}

// --------------- Ledger & Financial Reporting Services ----------------
service LedgerService {
    rpc AddLedgerEntry(AddLedgerEntryRequest) returns (LedgerResponse);
    rpc ListLedgerEntries(ListLedgerEntriesRequest) returns (ListLedgerEntriesResponse);
}

service FinancialReportService {
    rpc GenerateProfitLossReport(ReportRequest) returns (ProfitLossReport);
    rpc GenerateBalanceSheetReport(ReportRequest) returns (BalanceSheetReport);
    rpc GenerateTrialBalanceReport(ReportRequest) returns (TrialBalanceReport);
}

// --------------- Budgeting & Budget Allocation Services ----------------
service BudgetService {
    rpc CreateBudget(CreateBudgetRequest) returns (BudgetResponse);
    rpc ListBudgets(ListBudgetsRequest) returns (ListBudgetsResponse);
}

service BudgetAllocationService {
    rpc AllocateBudget(AllocateBudgetRequest) returns (BudgetAllocationResponse);
    rpc ListBudgetAllocations(ListBudgetAllocationsRequest) returns (ListBudgetAllocationsResponse);
}

service BudgetComparisonService {
    rpc GetBudgetComparisonReport(BudgetComparisonRequest) returns (BudgetComparisonResponse);
}

// --------------- Expense Management Services ----------------
service ExpenseService {
    rpc CreateExpense(CreateExpenseRequest) returns (ExpenseResponse);
    rpc ListExpenses(ListExpensesRequest) returns (ListExpensesResponse);
}

// ---------------- Message Definitions ----------------

// Invoice Messages
message Invoice {
    string id = 1;
    string type = 2; // "sales", "purchase", "proforma"
    string customer_id = 3;
    string vendor_id = 4;
    double total_amount = 5;
    string currency = 6;
    double exchange_rate = 7;
    repeated TaxConfig taxes = 8;
    string status = 9; // "pending", "paid"
    google.protobuf.Timestamp invoice_date = 10;
}

// Tax Messages
message TaxConfig {
    string tax_name = 1; // "GST", "VAT", etc.
    double tax_rate = 2;
}

// Credit/Debit Note Messages
message CreditDebitNote {
    string note_id = 1;
    string invoice_id = 2;
    string type = 3; // "credit" or "debit"
    double amount = 4;
}

// Payment Messages
message PaymentDue {
    string payment_due_id = 1;
    string invoice_id = 2;
    double amount_due = 3;
    google.protobuf.Timestamp due_date = 4;
    string status = 5; // "paid", "unpaid"
}

// Bank Reconciliation Messages
message ReconcileTransactionRequest {
    string transaction_id = 1;
    double amount = 2;
    google.protobuf.Timestamp transaction_date = 3;
}

message ReconciliationResponse {
    bool matched = 1;
    string status = 2; // "Matched", "Pending", "Discrepancy Found"
}

// Ledger Messages
message LedgerEntry {
    string entry_id = 1;
    string description = 2;
    double debit = 3;
    double credit = 4;
    google.protobuf.Timestamp transaction_date = 5;
}

// Financial Reporting Messages
message ReportRequest {
    google.protobuf.Timestamp start_date = 1;
    google.protobuf.Timestamp end_date = 2;
}

message ProfitLossReport {
    double total_revenue = 1;
    double total_expenses = 2;
    double net_profit = 3;
}

message BalanceSheetReport {
    double total_assets = 1;
    double total_liabilities = 2;
    double net_worth = 3;
}

message TrialBalanceReport {
    repeated LedgerEntry entries = 1;
}

// Budget Messages
message Budget {
    string budget_id = 1;
    string name = 2; // "IT Budget", "Marketing Budget"
    double total_amount = 3;
    string status = 4; // "Active", "Closed"
}

message BudgetAllocation {
    string allocation_id = 1;
    string budget_id = 2;
    string department_id = 3;
    double allocated_amount = 4;
    double spent_amount = 5;
    double remaining_amount = 6;
}

message BudgetComparisonResponse {
    string budget_id = 1;
    double total_budget = 2;
    double total_allocated = 3;
    double total_spent = 4;
    double remaining_budget = 5;
}

// Expense Messages
message Expense {
    string expense_id = 1;
    string category = 2; // "Office Supplies", "Travel", "Utilities"
    double amount = 3;
    string currency = 4;
    google.protobuf.Timestamp expense_date = 5;
}

// General Response Messages
message DeleteResponse {
    string message = 1;
}
