// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: finance.proto

package finance_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InvoiceService_CreateInvoice_FullMethodName          = "/finance.InvoiceService/CreateInvoice"
	InvoiceService_GetInvoiceByID_FullMethodName         = "/finance.InvoiceService/GetInvoiceByID"
	InvoiceService_ListInvoices_FullMethodName           = "/finance.InvoiceService/ListInvoices"
	InvoiceService_UpdateInvoice_FullMethodName          = "/finance.InvoiceService/UpdateInvoice"
	InvoiceService_DeleteInvoice_FullMethodName          = "/finance.InvoiceService/DeleteInvoice"
	InvoiceService_SearchInvoices_FullMethodName         = "/finance.InvoiceService/SearchInvoices"
	InvoiceService_CreateProformaInvoice_FullMethodName  = "/finance.InvoiceService/CreateProformaInvoice"
	InvoiceService_GetProformaInvoiceByID_FullMethodName = "/finance.InvoiceService/GetProformaInvoiceByID"
	InvoiceService_UpdateProformaInvoice_FullMethodName  = "/finance.InvoiceService/UpdateProformaInvoice"
	InvoiceService_DeleteProformaInvoice_FullMethodName  = "/finance.InvoiceService/DeleteProformaInvoice"
	InvoiceService_ListProformaInvoices_FullMethodName   = "/finance.InvoiceService/ListProformaInvoices"
	InvoiceService_CreateChallan_FullMethodName          = "/finance.InvoiceService/CreateChallan"
	InvoiceService_GetChallanByID_FullMethodName         = "/finance.InvoiceService/GetChallanByID"
	InvoiceService_UpdateChallan_FullMethodName          = "/finance.InvoiceService/UpdateChallan"
	InvoiceService_DeleteChallan_FullMethodName          = "/finance.InvoiceService/DeleteChallan"
	InvoiceService_ListChallans_FullMethodName           = "/finance.InvoiceService/ListChallans"
)

// InvoiceServiceClient is the client API for InvoiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Sales Invoice, Proforma Invoice, Challan services
type InvoiceServiceClient interface {
	CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
	GetInvoiceByID(ctx context.Context, in *GetInvoiceByIDRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
	ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error)
	UpdateInvoice(ctx context.Context, in *UpdateInvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
	DeleteInvoice(ctx context.Context, in *DeleteInvoiceRequest, opts ...grpc.CallOption) (*DeleteInvoiceResponse, error)
	SearchInvoices(ctx context.Context, in *SearchInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error)
	CreateProformaInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
	GetProformaInvoiceByID(ctx context.Context, in *GetInvoiceByIDRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
	UpdateProformaInvoice(ctx context.Context, in *UpdateInvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
	DeleteProformaInvoice(ctx context.Context, in *DeleteInvoiceRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListProformaInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error)
	CreateChallan(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
	GetChallanByID(ctx context.Context, in *GetInvoiceByIDRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
	UpdateChallan(ctx context.Context, in *UpdateInvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
	DeleteChallan(ctx context.Context, in *DeleteInvoiceRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	ListChallans(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error)
}

type invoiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoiceServiceClient(cc grpc.ClientConnInterface) InvoiceServiceClient {
	return &invoiceServiceClient{cc}
}

func (c *invoiceServiceClient) CreateInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, InvoiceService_CreateInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetInvoiceByID(ctx context.Context, in *GetInvoiceByIDRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, InvoiceService_GetInvoiceByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) ListInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvoicesResponse)
	err := c.cc.Invoke(ctx, InvoiceService_ListInvoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) UpdateInvoice(ctx context.Context, in *UpdateInvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, InvoiceService_UpdateInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) DeleteInvoice(ctx context.Context, in *DeleteInvoiceRequest, opts ...grpc.CallOption) (*DeleteInvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteInvoiceResponse)
	err := c.cc.Invoke(ctx, InvoiceService_DeleteInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) SearchInvoices(ctx context.Context, in *SearchInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvoicesResponse)
	err := c.cc.Invoke(ctx, InvoiceService_SearchInvoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) CreateProformaInvoice(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, InvoiceService_CreateProformaInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetProformaInvoiceByID(ctx context.Context, in *GetInvoiceByIDRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, InvoiceService_GetProformaInvoiceByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) UpdateProformaInvoice(ctx context.Context, in *UpdateInvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, InvoiceService_UpdateProformaInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) DeleteProformaInvoice(ctx context.Context, in *DeleteInvoiceRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, InvoiceService_DeleteProformaInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) ListProformaInvoices(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvoicesResponse)
	err := c.cc.Invoke(ctx, InvoiceService_ListProformaInvoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) CreateChallan(ctx context.Context, in *CreateInvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, InvoiceService_CreateChallan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetChallanByID(ctx context.Context, in *GetInvoiceByIDRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, InvoiceService_GetChallanByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) UpdateChallan(ctx context.Context, in *UpdateInvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, InvoiceService_UpdateChallan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) DeleteChallan(ctx context.Context, in *DeleteInvoiceRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, InvoiceService_DeleteChallan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) ListChallans(ctx context.Context, in *ListInvoicesRequest, opts ...grpc.CallOption) (*ListInvoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInvoicesResponse)
	err := c.cc.Invoke(ctx, InvoiceService_ListChallans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoiceServiceServer is the server API for InvoiceService service.
// All implementations must embed UnimplementedInvoiceServiceServer
// for forward compatibility.
//
// Sales Invoice, Proforma Invoice, Challan services
type InvoiceServiceServer interface {
	CreateInvoice(context.Context, *CreateInvoiceRequest) (*InvoiceResponse, error)
	GetInvoiceByID(context.Context, *GetInvoiceByIDRequest) (*InvoiceResponse, error)
	ListInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error)
	UpdateInvoice(context.Context, *UpdateInvoiceRequest) (*InvoiceResponse, error)
	DeleteInvoice(context.Context, *DeleteInvoiceRequest) (*DeleteInvoiceResponse, error)
	SearchInvoices(context.Context, *SearchInvoicesRequest) (*ListInvoicesResponse, error)
	CreateProformaInvoice(context.Context, *CreateInvoiceRequest) (*InvoiceResponse, error)
	GetProformaInvoiceByID(context.Context, *GetInvoiceByIDRequest) (*InvoiceResponse, error)
	UpdateProformaInvoice(context.Context, *UpdateInvoiceRequest) (*InvoiceResponse, error)
	DeleteProformaInvoice(context.Context, *DeleteInvoiceRequest) (*DeleteResponse, error)
	ListProformaInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error)
	CreateChallan(context.Context, *CreateInvoiceRequest) (*InvoiceResponse, error)
	GetChallanByID(context.Context, *GetInvoiceByIDRequest) (*InvoiceResponse, error)
	UpdateChallan(context.Context, *UpdateInvoiceRequest) (*InvoiceResponse, error)
	DeleteChallan(context.Context, *DeleteInvoiceRequest) (*DeleteResponse, error)
	ListChallans(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error)
	mustEmbedUnimplementedInvoiceServiceServer()
}

// UnimplementedInvoiceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInvoiceServiceServer struct{}

func (UnimplementedInvoiceServiceServer) CreateInvoice(context.Context, *CreateInvoiceRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) GetInvoiceByID(context.Context, *GetInvoiceByIDRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceByID not implemented")
}
func (UnimplementedInvoiceServiceServer) ListInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInvoices not implemented")
}
func (UnimplementedInvoiceServiceServer) UpdateInvoice(context.Context, *UpdateInvoiceRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) DeleteInvoice(context.Context, *DeleteInvoiceRequest) (*DeleteInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) SearchInvoices(context.Context, *SearchInvoicesRequest) (*ListInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInvoices not implemented")
}
func (UnimplementedInvoiceServiceServer) CreateProformaInvoice(context.Context, *CreateInvoiceRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProformaInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) GetProformaInvoiceByID(context.Context, *GetInvoiceByIDRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProformaInvoiceByID not implemented")
}
func (UnimplementedInvoiceServiceServer) UpdateProformaInvoice(context.Context, *UpdateInvoiceRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProformaInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) DeleteProformaInvoice(context.Context, *DeleteInvoiceRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProformaInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) ListProformaInvoices(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProformaInvoices not implemented")
}
func (UnimplementedInvoiceServiceServer) CreateChallan(context.Context, *CreateInvoiceRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChallan not implemented")
}
func (UnimplementedInvoiceServiceServer) GetChallanByID(context.Context, *GetInvoiceByIDRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallanByID not implemented")
}
func (UnimplementedInvoiceServiceServer) UpdateChallan(context.Context, *UpdateInvoiceRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChallan not implemented")
}
func (UnimplementedInvoiceServiceServer) DeleteChallan(context.Context, *DeleteInvoiceRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChallan not implemented")
}
func (UnimplementedInvoiceServiceServer) ListChallans(context.Context, *ListInvoicesRequest) (*ListInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChallans not implemented")
}
func (UnimplementedInvoiceServiceServer) mustEmbedUnimplementedInvoiceServiceServer() {}
func (UnimplementedInvoiceServiceServer) testEmbeddedByValue()                        {}

// UnsafeInvoiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoiceServiceServer will
// result in compilation errors.
type UnsafeInvoiceServiceServer interface {
	mustEmbedUnimplementedInvoiceServiceServer()
}

func RegisterInvoiceServiceServer(s grpc.ServiceRegistrar, srv InvoiceServiceServer) {
	// If the following call pancis, it indicates UnimplementedInvoiceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InvoiceService_ServiceDesc, srv)
}

func _InvoiceService_CreateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).CreateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_CreateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).CreateInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetInvoiceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetInvoiceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_GetInvoiceByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetInvoiceByID(ctx, req.(*GetInvoiceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_ListInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).ListInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_ListInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).ListInvoices(ctx, req.(*ListInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_UpdateInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).UpdateInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_UpdateInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).UpdateInvoice(ctx, req.(*UpdateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_DeleteInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).DeleteInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_DeleteInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).DeleteInvoice(ctx, req.(*DeleteInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_SearchInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).SearchInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_SearchInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).SearchInvoices(ctx, req.(*SearchInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_CreateProformaInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).CreateProformaInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_CreateProformaInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).CreateProformaInvoice(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetProformaInvoiceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetProformaInvoiceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_GetProformaInvoiceByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetProformaInvoiceByID(ctx, req.(*GetInvoiceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_UpdateProformaInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).UpdateProformaInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_UpdateProformaInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).UpdateProformaInvoice(ctx, req.(*UpdateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_DeleteProformaInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).DeleteProformaInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_DeleteProformaInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).DeleteProformaInvoice(ctx, req.(*DeleteInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_ListProformaInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).ListProformaInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_ListProformaInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).ListProformaInvoices(ctx, req.(*ListInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_CreateChallan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).CreateChallan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_CreateChallan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).CreateChallan(ctx, req.(*CreateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetChallanByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetChallanByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_GetChallanByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetChallanByID(ctx, req.(*GetInvoiceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_UpdateChallan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).UpdateChallan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_UpdateChallan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).UpdateChallan(ctx, req.(*UpdateInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_DeleteChallan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).DeleteChallan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_DeleteChallan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).DeleteChallan(ctx, req.(*DeleteInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_ListChallans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).ListChallans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvoiceService_ListChallans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).ListChallans(ctx, req.(*ListInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvoiceService_ServiceDesc is the grpc.ServiceDesc for InvoiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance.InvoiceService",
	HandlerType: (*InvoiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvoice",
			Handler:    _InvoiceService_CreateInvoice_Handler,
		},
		{
			MethodName: "GetInvoiceByID",
			Handler:    _InvoiceService_GetInvoiceByID_Handler,
		},
		{
			MethodName: "ListInvoices",
			Handler:    _InvoiceService_ListInvoices_Handler,
		},
		{
			MethodName: "UpdateInvoice",
			Handler:    _InvoiceService_UpdateInvoice_Handler,
		},
		{
			MethodName: "DeleteInvoice",
			Handler:    _InvoiceService_DeleteInvoice_Handler,
		},
		{
			MethodName: "SearchInvoices",
			Handler:    _InvoiceService_SearchInvoices_Handler,
		},
		{
			MethodName: "CreateProformaInvoice",
			Handler:    _InvoiceService_CreateProformaInvoice_Handler,
		},
		{
			MethodName: "GetProformaInvoiceByID",
			Handler:    _InvoiceService_GetProformaInvoiceByID_Handler,
		},
		{
			MethodName: "UpdateProformaInvoice",
			Handler:    _InvoiceService_UpdateProformaInvoice_Handler,
		},
		{
			MethodName: "DeleteProformaInvoice",
			Handler:    _InvoiceService_DeleteProformaInvoice_Handler,
		},
		{
			MethodName: "ListProformaInvoices",
			Handler:    _InvoiceService_ListProformaInvoices_Handler,
		},
		{
			MethodName: "CreateChallan",
			Handler:    _InvoiceService_CreateChallan_Handler,
		},
		{
			MethodName: "GetChallanByID",
			Handler:    _InvoiceService_GetChallanByID_Handler,
		},
		{
			MethodName: "UpdateChallan",
			Handler:    _InvoiceService_UpdateChallan_Handler,
		},
		{
			MethodName: "DeleteChallan",
			Handler:    _InvoiceService_DeleteChallan_Handler,
		},
		{
			MethodName: "ListChallans",
			Handler:    _InvoiceService_ListChallans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance.proto",
}

const (
	CreditDebitNoteService_CreateCreditDebitNote_FullMethodName           = "/finance.CreditDebitNoteService/CreateCreditDebitNote"
	CreditDebitNoteService_GetCreditDebitNoteByID_FullMethodName          = "/finance.CreditDebitNoteService/GetCreditDebitNoteByID"
	CreditDebitNoteService_ListCreditDebitNotesByInvoiceID_FullMethodName = "/finance.CreditDebitNoteService/ListCreditDebitNotesByInvoiceID"
	CreditDebitNoteService_ListAllCreditDebitNotes_FullMethodName         = "/finance.CreditDebitNoteService/ListAllCreditDebitNotes"
	CreditDebitNoteService_UpdateCreditDebitNote_FullMethodName           = "/finance.CreditDebitNoteService/UpdateCreditDebitNote"
	CreditDebitNoteService_DeleteCreditDebitNote_FullMethodName           = "/finance.CreditDebitNoteService/DeleteCreditDebitNote"
)

// CreditDebitNoteServiceClient is the client API for CreditDebitNoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Credit/Debit Note related services
type CreditDebitNoteServiceClient interface {
	CreateCreditDebitNote(ctx context.Context, in *CreateCreditDebitNoteRequest, opts ...grpc.CallOption) (*CreditDebitNoteResponse, error)
	GetCreditDebitNoteByID(ctx context.Context, in *GetCreditDebitNoteByIDRequest, opts ...grpc.CallOption) (*CreditDebitNoteResponse, error)
	ListCreditDebitNotesByInvoiceID(ctx context.Context, in *ListCreditDebitNotesByInvoiceIDRequest, opts ...grpc.CallOption) (*ListCreditDebitNotesResponse, error)
	ListAllCreditDebitNotes(ctx context.Context, in *ListCreditDebitNotesRequest, opts ...grpc.CallOption) (*ListCreditDebitNotesResponse, error)
	UpdateCreditDebitNote(ctx context.Context, in *UpdateCreditDebitNoteRequest, opts ...grpc.CallOption) (*CreditDebitNoteResponse, error)
	DeleteCreditDebitNote(ctx context.Context, in *DeleteCreditDebitNoteRequest, opts ...grpc.CallOption) (*DeleteCreditDebitNoteResponse, error)
}

type creditDebitNoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCreditDebitNoteServiceClient(cc grpc.ClientConnInterface) CreditDebitNoteServiceClient {
	return &creditDebitNoteServiceClient{cc}
}

func (c *creditDebitNoteServiceClient) CreateCreditDebitNote(ctx context.Context, in *CreateCreditDebitNoteRequest, opts ...grpc.CallOption) (*CreditDebitNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditDebitNoteResponse)
	err := c.cc.Invoke(ctx, CreditDebitNoteService_CreateCreditDebitNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditDebitNoteServiceClient) GetCreditDebitNoteByID(ctx context.Context, in *GetCreditDebitNoteByIDRequest, opts ...grpc.CallOption) (*CreditDebitNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditDebitNoteResponse)
	err := c.cc.Invoke(ctx, CreditDebitNoteService_GetCreditDebitNoteByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditDebitNoteServiceClient) ListCreditDebitNotesByInvoiceID(ctx context.Context, in *ListCreditDebitNotesByInvoiceIDRequest, opts ...grpc.CallOption) (*ListCreditDebitNotesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCreditDebitNotesResponse)
	err := c.cc.Invoke(ctx, CreditDebitNoteService_ListCreditDebitNotesByInvoiceID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditDebitNoteServiceClient) ListAllCreditDebitNotes(ctx context.Context, in *ListCreditDebitNotesRequest, opts ...grpc.CallOption) (*ListCreditDebitNotesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCreditDebitNotesResponse)
	err := c.cc.Invoke(ctx, CreditDebitNoteService_ListAllCreditDebitNotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditDebitNoteServiceClient) UpdateCreditDebitNote(ctx context.Context, in *UpdateCreditDebitNoteRequest, opts ...grpc.CallOption) (*CreditDebitNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreditDebitNoteResponse)
	err := c.cc.Invoke(ctx, CreditDebitNoteService_UpdateCreditDebitNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creditDebitNoteServiceClient) DeleteCreditDebitNote(ctx context.Context, in *DeleteCreditDebitNoteRequest, opts ...grpc.CallOption) (*DeleteCreditDebitNoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCreditDebitNoteResponse)
	err := c.cc.Invoke(ctx, CreditDebitNoteService_DeleteCreditDebitNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreditDebitNoteServiceServer is the server API for CreditDebitNoteService service.
// All implementations must embed UnimplementedCreditDebitNoteServiceServer
// for forward compatibility.
//
// Credit/Debit Note related services
type CreditDebitNoteServiceServer interface {
	CreateCreditDebitNote(context.Context, *CreateCreditDebitNoteRequest) (*CreditDebitNoteResponse, error)
	GetCreditDebitNoteByID(context.Context, *GetCreditDebitNoteByIDRequest) (*CreditDebitNoteResponse, error)
	ListCreditDebitNotesByInvoiceID(context.Context, *ListCreditDebitNotesByInvoiceIDRequest) (*ListCreditDebitNotesResponse, error)
	ListAllCreditDebitNotes(context.Context, *ListCreditDebitNotesRequest) (*ListCreditDebitNotesResponse, error)
	UpdateCreditDebitNote(context.Context, *UpdateCreditDebitNoteRequest) (*CreditDebitNoteResponse, error)
	DeleteCreditDebitNote(context.Context, *DeleteCreditDebitNoteRequest) (*DeleteCreditDebitNoteResponse, error)
	mustEmbedUnimplementedCreditDebitNoteServiceServer()
}

// UnimplementedCreditDebitNoteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCreditDebitNoteServiceServer struct{}

func (UnimplementedCreditDebitNoteServiceServer) CreateCreditDebitNote(context.Context, *CreateCreditDebitNoteRequest) (*CreditDebitNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCreditDebitNote not implemented")
}
func (UnimplementedCreditDebitNoteServiceServer) GetCreditDebitNoteByID(context.Context, *GetCreditDebitNoteByIDRequest) (*CreditDebitNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditDebitNoteByID not implemented")
}
func (UnimplementedCreditDebitNoteServiceServer) ListCreditDebitNotesByInvoiceID(context.Context, *ListCreditDebitNotesByInvoiceIDRequest) (*ListCreditDebitNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCreditDebitNotesByInvoiceID not implemented")
}
func (UnimplementedCreditDebitNoteServiceServer) ListAllCreditDebitNotes(context.Context, *ListCreditDebitNotesRequest) (*ListCreditDebitNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllCreditDebitNotes not implemented")
}
func (UnimplementedCreditDebitNoteServiceServer) UpdateCreditDebitNote(context.Context, *UpdateCreditDebitNoteRequest) (*CreditDebitNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCreditDebitNote not implemented")
}
func (UnimplementedCreditDebitNoteServiceServer) DeleteCreditDebitNote(context.Context, *DeleteCreditDebitNoteRequest) (*DeleteCreditDebitNoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCreditDebitNote not implemented")
}
func (UnimplementedCreditDebitNoteServiceServer) mustEmbedUnimplementedCreditDebitNoteServiceServer() {
}
func (UnimplementedCreditDebitNoteServiceServer) testEmbeddedByValue() {}

// UnsafeCreditDebitNoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreditDebitNoteServiceServer will
// result in compilation errors.
type UnsafeCreditDebitNoteServiceServer interface {
	mustEmbedUnimplementedCreditDebitNoteServiceServer()
}

func RegisterCreditDebitNoteServiceServer(s grpc.ServiceRegistrar, srv CreditDebitNoteServiceServer) {
	// If the following call pancis, it indicates UnimplementedCreditDebitNoteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CreditDebitNoteService_ServiceDesc, srv)
}

func _CreditDebitNoteService_CreateCreditDebitNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCreditDebitNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditDebitNoteServiceServer).CreateCreditDebitNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditDebitNoteService_CreateCreditDebitNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditDebitNoteServiceServer).CreateCreditDebitNote(ctx, req.(*CreateCreditDebitNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditDebitNoteService_GetCreditDebitNoteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditDebitNoteByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditDebitNoteServiceServer).GetCreditDebitNoteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditDebitNoteService_GetCreditDebitNoteByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditDebitNoteServiceServer).GetCreditDebitNoteByID(ctx, req.(*GetCreditDebitNoteByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditDebitNoteService_ListCreditDebitNotesByInvoiceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCreditDebitNotesByInvoiceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditDebitNoteServiceServer).ListCreditDebitNotesByInvoiceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditDebitNoteService_ListCreditDebitNotesByInvoiceID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditDebitNoteServiceServer).ListCreditDebitNotesByInvoiceID(ctx, req.(*ListCreditDebitNotesByInvoiceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditDebitNoteService_ListAllCreditDebitNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCreditDebitNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditDebitNoteServiceServer).ListAllCreditDebitNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditDebitNoteService_ListAllCreditDebitNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditDebitNoteServiceServer).ListAllCreditDebitNotes(ctx, req.(*ListCreditDebitNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditDebitNoteService_UpdateCreditDebitNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCreditDebitNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditDebitNoteServiceServer).UpdateCreditDebitNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditDebitNoteService_UpdateCreditDebitNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditDebitNoteServiceServer).UpdateCreditDebitNote(ctx, req.(*UpdateCreditDebitNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CreditDebitNoteService_DeleteCreditDebitNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCreditDebitNoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreditDebitNoteServiceServer).DeleteCreditDebitNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreditDebitNoteService_DeleteCreditDebitNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreditDebitNoteServiceServer).DeleteCreditDebitNote(ctx, req.(*DeleteCreditDebitNoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CreditDebitNoteService_ServiceDesc is the grpc.ServiceDesc for CreditDebitNoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreditDebitNoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance.CreditDebitNoteService",
	HandlerType: (*CreditDebitNoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCreditDebitNote",
			Handler:    _CreditDebitNoteService_CreateCreditDebitNote_Handler,
		},
		{
			MethodName: "GetCreditDebitNoteByID",
			Handler:    _CreditDebitNoteService_GetCreditDebitNoteByID_Handler,
		},
		{
			MethodName: "ListCreditDebitNotesByInvoiceID",
			Handler:    _CreditDebitNoteService_ListCreditDebitNotesByInvoiceID_Handler,
		},
		{
			MethodName: "ListAllCreditDebitNotes",
			Handler:    _CreditDebitNoteService_ListAllCreditDebitNotes_Handler,
		},
		{
			MethodName: "UpdateCreditDebitNote",
			Handler:    _CreditDebitNoteService_UpdateCreditDebitNote_Handler,
		},
		{
			MethodName: "DeleteCreditDebitNote",
			Handler:    _CreditDebitNoteService_DeleteCreditDebitNote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance.proto",
}

const (
	PaymentService_AddPaymentDue_FullMethodName     = "/finance.PaymentService/AddPaymentDue"
	PaymentService_GetPaymentDueByID_FullMethodName = "/finance.PaymentService/GetPaymentDueByID"
	PaymentService_ListPaymentDues_FullMethodName   = "/finance.PaymentService/ListPaymentDues"
	PaymentService_MarkPaymentAsPaid_FullMethodName = "/finance.PaymentService/MarkPaymentAsPaid"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Payment-related services
type PaymentServiceClient interface {
	AddPaymentDue(ctx context.Context, in *AddPaymentDueRequest, opts ...grpc.CallOption) (*PaymentDueResponse, error)
	GetPaymentDueByID(ctx context.Context, in *GetPaymentDueByIDRequest, opts ...grpc.CallOption) (*PaymentDueResponse, error)
	ListPaymentDues(ctx context.Context, in *ListPaymentDueRequest, opts ...grpc.CallOption) (*ListPaymentDueResponse, error)
	MarkPaymentAsPaid(ctx context.Context, in *MarkPaymentAsPaidRequest, opts ...grpc.CallOption) (*PaymentDueResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) AddPaymentDue(ctx context.Context, in *AddPaymentDueRequest, opts ...grpc.CallOption) (*PaymentDueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentDueResponse)
	err := c.cc.Invoke(ctx, PaymentService_AddPaymentDue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentDueByID(ctx context.Context, in *GetPaymentDueByIDRequest, opts ...grpc.CallOption) (*PaymentDueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentDueResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetPaymentDueByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ListPaymentDues(ctx context.Context, in *ListPaymentDueRequest, opts ...grpc.CallOption) (*ListPaymentDueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPaymentDueResponse)
	err := c.cc.Invoke(ctx, PaymentService_ListPaymentDues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) MarkPaymentAsPaid(ctx context.Context, in *MarkPaymentAsPaidRequest, opts ...grpc.CallOption) (*PaymentDueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentDueResponse)
	err := c.cc.Invoke(ctx, PaymentService_MarkPaymentAsPaid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility.
//
// Payment-related services
type PaymentServiceServer interface {
	AddPaymentDue(context.Context, *AddPaymentDueRequest) (*PaymentDueResponse, error)
	GetPaymentDueByID(context.Context, *GetPaymentDueByIDRequest) (*PaymentDueResponse, error)
	ListPaymentDues(context.Context, *ListPaymentDueRequest) (*ListPaymentDueResponse, error)
	MarkPaymentAsPaid(context.Context, *MarkPaymentAsPaidRequest) (*PaymentDueResponse, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) AddPaymentDue(context.Context, *AddPaymentDueRequest) (*PaymentDueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaymentDue not implemented")
}
func (UnimplementedPaymentServiceServer) GetPaymentDueByID(context.Context, *GetPaymentDueByIDRequest) (*PaymentDueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentDueByID not implemented")
}
func (UnimplementedPaymentServiceServer) ListPaymentDues(context.Context, *ListPaymentDueRequest) (*ListPaymentDueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPaymentDues not implemented")
}
func (UnimplementedPaymentServiceServer) MarkPaymentAsPaid(context.Context, *MarkPaymentAsPaidRequest) (*PaymentDueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkPaymentAsPaid not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue()                        {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_AddPaymentDue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPaymentDueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).AddPaymentDue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_AddPaymentDue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).AddPaymentDue(ctx, req.(*AddPaymentDueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentDueByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentDueByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentDueByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetPaymentDueByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentDueByID(ctx, req.(*GetPaymentDueByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ListPaymentDues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPaymentDueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ListPaymentDues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_ListPaymentDues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ListPaymentDues(ctx, req.(*ListPaymentDueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_MarkPaymentAsPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkPaymentAsPaidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).MarkPaymentAsPaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_MarkPaymentAsPaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).MarkPaymentAsPaid(ctx, req.(*MarkPaymentAsPaidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPaymentDue",
			Handler:    _PaymentService_AddPaymentDue_Handler,
		},
		{
			MethodName: "GetPaymentDueByID",
			Handler:    _PaymentService_GetPaymentDueByID_Handler,
		},
		{
			MethodName: "ListPaymentDues",
			Handler:    _PaymentService_ListPaymentDues_Handler,
		},
		{
			MethodName: "MarkPaymentAsPaid",
			Handler:    _PaymentService_MarkPaymentAsPaid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance.proto",
}

const (
	LedgerService_AddLedgerEntry_FullMethodName     = "/finance.LedgerService/AddLedgerEntry"
	LedgerService_GetLedgerEntryByID_FullMethodName = "/finance.LedgerService/GetLedgerEntryByID"
	LedgerService_ListLedgerEntries_FullMethodName  = "/finance.LedgerService/ListLedgerEntries"
	LedgerService_DeleteLedgerEntry_FullMethodName  = "/finance.LedgerService/DeleteLedgerEntry"
	LedgerService_UpdateLedgerEntry_FullMethodName  = "/finance.LedgerService/UpdateLedgerEntry"
)

// LedgerServiceClient is the client API for LedgerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Ledger-related services
type LedgerServiceClient interface {
	AddLedgerEntry(ctx context.Context, in *AddLedgerEntryRequest, opts ...grpc.CallOption) (*LedgerResponse, error)
	GetLedgerEntryByID(ctx context.Context, in *GetLedgerEntryByIDRequest, opts ...grpc.CallOption) (*LedgerResponse, error)
	ListLedgerEntries(ctx context.Context, in *ListLedgerEntriesRequest, opts ...grpc.CallOption) (*ListLedgerEntriesResponse, error)
	DeleteLedgerEntry(ctx context.Context, in *DeleteLedgerEntryRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	UpdateLedgerEntry(ctx context.Context, in *UpdateLedgerEntryRequest, opts ...grpc.CallOption) (*LedgerResponse, error)
}

type ledgerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerServiceClient(cc grpc.ClientConnInterface) LedgerServiceClient {
	return &ledgerServiceClient{cc}
}

func (c *ledgerServiceClient) AddLedgerEntry(ctx context.Context, in *AddLedgerEntryRequest, opts ...grpc.CallOption) (*LedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LedgerResponse)
	err := c.cc.Invoke(ctx, LedgerService_AddLedgerEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) GetLedgerEntryByID(ctx context.Context, in *GetLedgerEntryByIDRequest, opts ...grpc.CallOption) (*LedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LedgerResponse)
	err := c.cc.Invoke(ctx, LedgerService_GetLedgerEntryByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) ListLedgerEntries(ctx context.Context, in *ListLedgerEntriesRequest, opts ...grpc.CallOption) (*ListLedgerEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLedgerEntriesResponse)
	err := c.cc.Invoke(ctx, LedgerService_ListLedgerEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) DeleteLedgerEntry(ctx context.Context, in *DeleteLedgerEntryRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, LedgerService_DeleteLedgerEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerServiceClient) UpdateLedgerEntry(ctx context.Context, in *UpdateLedgerEntryRequest, opts ...grpc.CallOption) (*LedgerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LedgerResponse)
	err := c.cc.Invoke(ctx, LedgerService_UpdateLedgerEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LedgerServiceServer is the server API for LedgerService service.
// All implementations must embed UnimplementedLedgerServiceServer
// for forward compatibility.
//
// Ledger-related services
type LedgerServiceServer interface {
	AddLedgerEntry(context.Context, *AddLedgerEntryRequest) (*LedgerResponse, error)
	GetLedgerEntryByID(context.Context, *GetLedgerEntryByIDRequest) (*LedgerResponse, error)
	ListLedgerEntries(context.Context, *ListLedgerEntriesRequest) (*ListLedgerEntriesResponse, error)
	DeleteLedgerEntry(context.Context, *DeleteLedgerEntryRequest) (*DeleteResponse, error)
	UpdateLedgerEntry(context.Context, *UpdateLedgerEntryRequest) (*LedgerResponse, error)
	mustEmbedUnimplementedLedgerServiceServer()
}

// UnimplementedLedgerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLedgerServiceServer struct{}

func (UnimplementedLedgerServiceServer) AddLedgerEntry(context.Context, *AddLedgerEntryRequest) (*LedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLedgerEntry not implemented")
}
func (UnimplementedLedgerServiceServer) GetLedgerEntryByID(context.Context, *GetLedgerEntryByIDRequest) (*LedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLedgerEntryByID not implemented")
}
func (UnimplementedLedgerServiceServer) ListLedgerEntries(context.Context, *ListLedgerEntriesRequest) (*ListLedgerEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLedgerEntries not implemented")
}
func (UnimplementedLedgerServiceServer) DeleteLedgerEntry(context.Context, *DeleteLedgerEntryRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLedgerEntry not implemented")
}
func (UnimplementedLedgerServiceServer) UpdateLedgerEntry(context.Context, *UpdateLedgerEntryRequest) (*LedgerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLedgerEntry not implemented")
}
func (UnimplementedLedgerServiceServer) mustEmbedUnimplementedLedgerServiceServer() {}
func (UnimplementedLedgerServiceServer) testEmbeddedByValue()                       {}

// UnsafeLedgerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LedgerServiceServer will
// result in compilation errors.
type UnsafeLedgerServiceServer interface {
	mustEmbedUnimplementedLedgerServiceServer()
}

func RegisterLedgerServiceServer(s grpc.ServiceRegistrar, srv LedgerServiceServer) {
	// If the following call pancis, it indicates UnimplementedLedgerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LedgerService_ServiceDesc, srv)
}

func _LedgerService_AddLedgerEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLedgerEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).AddLedgerEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_AddLedgerEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).AddLedgerEntry(ctx, req.(*AddLedgerEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_GetLedgerEntryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLedgerEntryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).GetLedgerEntryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_GetLedgerEntryByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).GetLedgerEntryByID(ctx, req.(*GetLedgerEntryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_ListLedgerEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLedgerEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).ListLedgerEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_ListLedgerEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).ListLedgerEntries(ctx, req.(*ListLedgerEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_DeleteLedgerEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLedgerEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).DeleteLedgerEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_DeleteLedgerEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).DeleteLedgerEntry(ctx, req.(*DeleteLedgerEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerService_UpdateLedgerEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLedgerEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServiceServer).UpdateLedgerEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LedgerService_UpdateLedgerEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServiceServer).UpdateLedgerEntry(ctx, req.(*UpdateLedgerEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LedgerService_ServiceDesc is the grpc.ServiceDesc for LedgerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LedgerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finance.LedgerService",
	HandlerType: (*LedgerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLedgerEntry",
			Handler:    _LedgerService_AddLedgerEntry_Handler,
		},
		{
			MethodName: "GetLedgerEntryByID",
			Handler:    _LedgerService_GetLedgerEntryByID_Handler,
		},
		{
			MethodName: "ListLedgerEntries",
			Handler:    _LedgerService_ListLedgerEntries_Handler,
		},
		{
			MethodName: "DeleteLedgerEntry",
			Handler:    _LedgerService_DeleteLedgerEntry_Handler,
		},
		{
			MethodName: "UpdateLedgerEntry",
			Handler:    _LedgerService_UpdateLedgerEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "finance.proto",
}
