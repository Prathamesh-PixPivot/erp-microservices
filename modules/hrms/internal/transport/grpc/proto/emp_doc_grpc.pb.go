// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/emp_doc.proto

package hrms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmployeeDocumentService_CreateEmployeeDocument_FullMethodName  = "/hrms.EmployeeDocumentService/CreateEmployeeDocument"
	EmployeeDocumentService_GetEmployeeDocumentByID_FullMethodName = "/hrms.EmployeeDocumentService/GetEmployeeDocumentByID"
	EmployeeDocumentService_GetDocumentsByEmployee_FullMethodName  = "/hrms.EmployeeDocumentService/GetDocumentsByEmployee"
	EmployeeDocumentService_GetExpiredDocuments_FullMethodName     = "/hrms.EmployeeDocumentService/GetExpiredDocuments"
	EmployeeDocumentService_UpdateEmployeeDocument_FullMethodName  = "/hrms.EmployeeDocumentService/UpdateEmployeeDocument"
	EmployeeDocumentService_DeleteEmployeeDocument_FullMethodName  = "/hrms.EmployeeDocumentService/DeleteEmployeeDocument"
)

// EmployeeDocumentServiceClient is the client API for EmployeeDocumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC Service for Employee Documents
type EmployeeDocumentServiceClient interface {
	CreateEmployeeDocument(ctx context.Context, in *CreateEmployeeDocumentRequest, opts ...grpc.CallOption) (*EmployeeDocumentResponse, error)
	GetEmployeeDocumentByID(ctx context.Context, in *GetEmployeeDocumentByIDRequest, opts ...grpc.CallOption) (*EmployeeDocumentResponse, error)
	GetDocumentsByEmployee(ctx context.Context, in *GetDocumentsByEmployeeRequest, opts ...grpc.CallOption) (*ListEmployeeDocumentsResponse, error)
	GetExpiredDocuments(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListEmployeeDocumentsResponse, error)
	UpdateEmployeeDocument(ctx context.Context, in *UpdateEmployeeDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteEmployeeDocument(ctx context.Context, in *DeleteEmployeeDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type employeeDocumentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeDocumentServiceClient(cc grpc.ClientConnInterface) EmployeeDocumentServiceClient {
	return &employeeDocumentServiceClient{cc}
}

func (c *employeeDocumentServiceClient) CreateEmployeeDocument(ctx context.Context, in *CreateEmployeeDocumentRequest, opts ...grpc.CallOption) (*EmployeeDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeeDocumentResponse)
	err := c.cc.Invoke(ctx, EmployeeDocumentService_CreateEmployeeDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeDocumentServiceClient) GetEmployeeDocumentByID(ctx context.Context, in *GetEmployeeDocumentByIDRequest, opts ...grpc.CallOption) (*EmployeeDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeeDocumentResponse)
	err := c.cc.Invoke(ctx, EmployeeDocumentService_GetEmployeeDocumentByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeDocumentServiceClient) GetDocumentsByEmployee(ctx context.Context, in *GetDocumentsByEmployeeRequest, opts ...grpc.CallOption) (*ListEmployeeDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmployeeDocumentsResponse)
	err := c.cc.Invoke(ctx, EmployeeDocumentService_GetDocumentsByEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeDocumentServiceClient) GetExpiredDocuments(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListEmployeeDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmployeeDocumentsResponse)
	err := c.cc.Invoke(ctx, EmployeeDocumentService_GetExpiredDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeDocumentServiceClient) UpdateEmployeeDocument(ctx context.Context, in *UpdateEmployeeDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EmployeeDocumentService_UpdateEmployeeDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeDocumentServiceClient) DeleteEmployeeDocument(ctx context.Context, in *DeleteEmployeeDocumentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EmployeeDocumentService_DeleteEmployeeDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeDocumentServiceServer is the server API for EmployeeDocumentService service.
// All implementations must embed UnimplementedEmployeeDocumentServiceServer
// for forward compatibility.
//
// gRPC Service for Employee Documents
type EmployeeDocumentServiceServer interface {
	CreateEmployeeDocument(context.Context, *CreateEmployeeDocumentRequest) (*EmployeeDocumentResponse, error)
	GetEmployeeDocumentByID(context.Context, *GetEmployeeDocumentByIDRequest) (*EmployeeDocumentResponse, error)
	GetDocumentsByEmployee(context.Context, *GetDocumentsByEmployeeRequest) (*ListEmployeeDocumentsResponse, error)
	GetExpiredDocuments(context.Context, *emptypb.Empty) (*ListEmployeeDocumentsResponse, error)
	UpdateEmployeeDocument(context.Context, *UpdateEmployeeDocumentRequest) (*emptypb.Empty, error)
	DeleteEmployeeDocument(context.Context, *DeleteEmployeeDocumentRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedEmployeeDocumentServiceServer()
}

// UnimplementedEmployeeDocumentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmployeeDocumentServiceServer struct{}

func (UnimplementedEmployeeDocumentServiceServer) CreateEmployeeDocument(context.Context, *CreateEmployeeDocumentRequest) (*EmployeeDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployeeDocument not implemented")
}
func (UnimplementedEmployeeDocumentServiceServer) GetEmployeeDocumentByID(context.Context, *GetEmployeeDocumentByIDRequest) (*EmployeeDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeDocumentByID not implemented")
}
func (UnimplementedEmployeeDocumentServiceServer) GetDocumentsByEmployee(context.Context, *GetDocumentsByEmployeeRequest) (*ListEmployeeDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentsByEmployee not implemented")
}
func (UnimplementedEmployeeDocumentServiceServer) GetExpiredDocuments(context.Context, *emptypb.Empty) (*ListEmployeeDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpiredDocuments not implemented")
}
func (UnimplementedEmployeeDocumentServiceServer) UpdateEmployeeDocument(context.Context, *UpdateEmployeeDocumentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployeeDocument not implemented")
}
func (UnimplementedEmployeeDocumentServiceServer) DeleteEmployeeDocument(context.Context, *DeleteEmployeeDocumentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployeeDocument not implemented")
}
func (UnimplementedEmployeeDocumentServiceServer) mustEmbedUnimplementedEmployeeDocumentServiceServer() {
}
func (UnimplementedEmployeeDocumentServiceServer) testEmbeddedByValue() {}

// UnsafeEmployeeDocumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeDocumentServiceServer will
// result in compilation errors.
type UnsafeEmployeeDocumentServiceServer interface {
	mustEmbedUnimplementedEmployeeDocumentServiceServer()
}

func RegisterEmployeeDocumentServiceServer(s grpc.ServiceRegistrar, srv EmployeeDocumentServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmployeeDocumentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmployeeDocumentService_ServiceDesc, srv)
}

func _EmployeeDocumentService_CreateEmployeeDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmployeeDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeDocumentServiceServer).CreateEmployeeDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeDocumentService_CreateEmployeeDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeDocumentServiceServer).CreateEmployeeDocument(ctx, req.(*CreateEmployeeDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeDocumentService_GetEmployeeDocumentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeDocumentByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeDocumentServiceServer).GetEmployeeDocumentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeDocumentService_GetEmployeeDocumentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeDocumentServiceServer).GetEmployeeDocumentByID(ctx, req.(*GetEmployeeDocumentByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeDocumentService_GetDocumentsByEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentsByEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeDocumentServiceServer).GetDocumentsByEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeDocumentService_GetDocumentsByEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeDocumentServiceServer).GetDocumentsByEmployee(ctx, req.(*GetDocumentsByEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeDocumentService_GetExpiredDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeDocumentServiceServer).GetExpiredDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeDocumentService_GetExpiredDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeDocumentServiceServer).GetExpiredDocuments(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeDocumentService_UpdateEmployeeDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmployeeDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeDocumentServiceServer).UpdateEmployeeDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeDocumentService_UpdateEmployeeDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeDocumentServiceServer).UpdateEmployeeDocument(ctx, req.(*UpdateEmployeeDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeDocumentService_DeleteEmployeeDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmployeeDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeDocumentServiceServer).DeleteEmployeeDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeDocumentService_DeleteEmployeeDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeDocumentServiceServer).DeleteEmployeeDocument(ctx, req.(*DeleteEmployeeDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeDocumentService_ServiceDesc is the grpc.ServiceDesc for EmployeeDocumentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeDocumentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hrms.EmployeeDocumentService",
	HandlerType: (*EmployeeDocumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmployeeDocument",
			Handler:    _EmployeeDocumentService_CreateEmployeeDocument_Handler,
		},
		{
			MethodName: "GetEmployeeDocumentByID",
			Handler:    _EmployeeDocumentService_GetEmployeeDocumentByID_Handler,
		},
		{
			MethodName: "GetDocumentsByEmployee",
			Handler:    _EmployeeDocumentService_GetDocumentsByEmployee_Handler,
		},
		{
			MethodName: "GetExpiredDocuments",
			Handler:    _EmployeeDocumentService_GetExpiredDocuments_Handler,
		},
		{
			MethodName: "UpdateEmployeeDocument",
			Handler:    _EmployeeDocumentService_UpdateEmployeeDocument_Handler,
		},
		{
			MethodName: "DeleteEmployeeDocument",
			Handler:    _EmployeeDocumentService_DeleteEmployeeDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/emp_doc.proto",
}
