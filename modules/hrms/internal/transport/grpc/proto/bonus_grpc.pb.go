// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/bonus.proto

package hrms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BonusService_CreateBonus_FullMethodName  = "/hrms.BonusService/CreateBonus"
	BonusService_GetBonusByID_FullMethodName = "/hrms.BonusService/GetBonusByID"
	BonusService_ListBonuses_FullMethodName  = "/hrms.BonusService/ListBonuses"
	BonusService_UpdateBonus_FullMethodName  = "/hrms.BonusService/UpdateBonus"
	BonusService_DeleteBonus_FullMethodName  = "/hrms.BonusService/DeleteBonus"
)

// BonusServiceClient is the client API for BonusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BonusServiceClient interface {
	CreateBonus(ctx context.Context, in *CreateBonusRequest, opts ...grpc.CallOption) (*BonusResponse, error)
	GetBonusByID(ctx context.Context, in *GetBonusRequest, opts ...grpc.CallOption) (*BonusResponse, error)
	ListBonuses(ctx context.Context, in *ListBonusesRequest, opts ...grpc.CallOption) (*ListBonusesResponse, error)
	UpdateBonus(ctx context.Context, in *UpdateBonusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteBonus(ctx context.Context, in *DeleteBonusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bonusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBonusServiceClient(cc grpc.ClientConnInterface) BonusServiceClient {
	return &bonusServiceClient{cc}
}

func (c *bonusServiceClient) CreateBonus(ctx context.Context, in *CreateBonusRequest, opts ...grpc.CallOption) (*BonusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BonusResponse)
	err := c.cc.Invoke(ctx, BonusService_CreateBonus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bonusServiceClient) GetBonusByID(ctx context.Context, in *GetBonusRequest, opts ...grpc.CallOption) (*BonusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BonusResponse)
	err := c.cc.Invoke(ctx, BonusService_GetBonusByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bonusServiceClient) ListBonuses(ctx context.Context, in *ListBonusesRequest, opts ...grpc.CallOption) (*ListBonusesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBonusesResponse)
	err := c.cc.Invoke(ctx, BonusService_ListBonuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bonusServiceClient) UpdateBonus(ctx context.Context, in *UpdateBonusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BonusService_UpdateBonus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bonusServiceClient) DeleteBonus(ctx context.Context, in *DeleteBonusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BonusService_DeleteBonus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BonusServiceServer is the server API for BonusService service.
// All implementations must embed UnimplementedBonusServiceServer
// for forward compatibility.
type BonusServiceServer interface {
	CreateBonus(context.Context, *CreateBonusRequest) (*BonusResponse, error)
	GetBonusByID(context.Context, *GetBonusRequest) (*BonusResponse, error)
	ListBonuses(context.Context, *ListBonusesRequest) (*ListBonusesResponse, error)
	UpdateBonus(context.Context, *UpdateBonusRequest) (*emptypb.Empty, error)
	DeleteBonus(context.Context, *DeleteBonusRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBonusServiceServer()
}

// UnimplementedBonusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBonusServiceServer struct{}

func (UnimplementedBonusServiceServer) CreateBonus(context.Context, *CreateBonusRequest) (*BonusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBonus not implemented")
}
func (UnimplementedBonusServiceServer) GetBonusByID(context.Context, *GetBonusRequest) (*BonusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBonusByID not implemented")
}
func (UnimplementedBonusServiceServer) ListBonuses(context.Context, *ListBonusesRequest) (*ListBonusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBonuses not implemented")
}
func (UnimplementedBonusServiceServer) UpdateBonus(context.Context, *UpdateBonusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBonus not implemented")
}
func (UnimplementedBonusServiceServer) DeleteBonus(context.Context, *DeleteBonusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBonus not implemented")
}
func (UnimplementedBonusServiceServer) mustEmbedUnimplementedBonusServiceServer() {}
func (UnimplementedBonusServiceServer) testEmbeddedByValue()                      {}

// UnsafeBonusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BonusServiceServer will
// result in compilation errors.
type UnsafeBonusServiceServer interface {
	mustEmbedUnimplementedBonusServiceServer()
}

func RegisterBonusServiceServer(s grpc.ServiceRegistrar, srv BonusServiceServer) {
	// If the following call pancis, it indicates UnimplementedBonusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BonusService_ServiceDesc, srv)
}

func _BonusService_CreateBonus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBonusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BonusServiceServer).CreateBonus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BonusService_CreateBonus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BonusServiceServer).CreateBonus(ctx, req.(*CreateBonusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BonusService_GetBonusByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBonusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BonusServiceServer).GetBonusByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BonusService_GetBonusByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BonusServiceServer).GetBonusByID(ctx, req.(*GetBonusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BonusService_ListBonuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBonusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BonusServiceServer).ListBonuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BonusService_ListBonuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BonusServiceServer).ListBonuses(ctx, req.(*ListBonusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BonusService_UpdateBonus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBonusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BonusServiceServer).UpdateBonus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BonusService_UpdateBonus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BonusServiceServer).UpdateBonus(ctx, req.(*UpdateBonusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BonusService_DeleteBonus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBonusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BonusServiceServer).DeleteBonus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BonusService_DeleteBonus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BonusServiceServer).DeleteBonus(ctx, req.(*DeleteBonusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BonusService_ServiceDesc is the grpc.ServiceDesc for BonusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BonusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hrms.BonusService",
	HandlerType: (*BonusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBonus",
			Handler:    _BonusService_CreateBonus_Handler,
		},
		{
			MethodName: "GetBonusByID",
			Handler:    _BonusService_GetBonusByID_Handler,
		},
		{
			MethodName: "ListBonuses",
			Handler:    _BonusService_ListBonuses_Handler,
		},
		{
			MethodName: "UpdateBonus",
			Handler:    _BonusService_UpdateBonus_Handler,
		},
		{
			MethodName: "DeleteBonus",
			Handler:    _BonusService_DeleteBonus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bonus.proto",
}
