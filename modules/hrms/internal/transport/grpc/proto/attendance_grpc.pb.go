// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/attendance.proto

package hrms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AttendanceService_CreateAttendance_FullMethodName   = "/hrms.AttendanceService/CreateAttendance"
	AttendanceService_CheckOutAttendance_FullMethodName = "/hrms.AttendanceService/CheckOutAttendance"
	AttendanceService_GetAttendanceByID_FullMethodName  = "/hrms.AttendanceService/GetAttendanceByID"
	AttendanceService_ListAttendances_FullMethodName    = "/hrms.AttendanceService/ListAttendances"
	AttendanceService_DeleteAttendance_FullMethodName   = "/hrms.AttendanceService/DeleteAttendance"
)

// AttendanceServiceClient is the client API for AttendanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttendanceServiceClient interface {
	CreateAttendance(ctx context.Context, in *CreateAttendanceRequest, opts ...grpc.CallOption) (*AttendanceResponse, error)
	CheckOutAttendance(ctx context.Context, in *CheckOutAttendanceRequest, opts ...grpc.CallOption) (*CheckOutResponse, error)
	GetAttendanceByID(ctx context.Context, in *GetAttendanceByIDRequest, opts ...grpc.CallOption) (*AttendanceResponse, error)
	ListAttendances(ctx context.Context, in *ListAttendancesRequest, opts ...grpc.CallOption) (*ListAttendancesResponse, error)
	DeleteAttendance(ctx context.Context, in *DeleteAttendanceRequest, opts ...grpc.CallOption) (*DeleteAttendanceResponse, error)
}

type attendanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttendanceServiceClient(cc grpc.ClientConnInterface) AttendanceServiceClient {
	return &attendanceServiceClient{cc}
}

func (c *attendanceServiceClient) CreateAttendance(ctx context.Context, in *CreateAttendanceRequest, opts ...grpc.CallOption) (*AttendanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendanceResponse)
	err := c.cc.Invoke(ctx, AttendanceService_CreateAttendance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceServiceClient) CheckOutAttendance(ctx context.Context, in *CheckOutAttendanceRequest, opts ...grpc.CallOption) (*CheckOutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckOutResponse)
	err := c.cc.Invoke(ctx, AttendanceService_CheckOutAttendance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceServiceClient) GetAttendanceByID(ctx context.Context, in *GetAttendanceByIDRequest, opts ...grpc.CallOption) (*AttendanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttendanceResponse)
	err := c.cc.Invoke(ctx, AttendanceService_GetAttendanceByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceServiceClient) ListAttendances(ctx context.Context, in *ListAttendancesRequest, opts ...grpc.CallOption) (*ListAttendancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAttendancesResponse)
	err := c.cc.Invoke(ctx, AttendanceService_ListAttendances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendanceServiceClient) DeleteAttendance(ctx context.Context, in *DeleteAttendanceRequest, opts ...grpc.CallOption) (*DeleteAttendanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAttendanceResponse)
	err := c.cc.Invoke(ctx, AttendanceService_DeleteAttendance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttendanceServiceServer is the server API for AttendanceService service.
// All implementations must embed UnimplementedAttendanceServiceServer
// for forward compatibility.
type AttendanceServiceServer interface {
	CreateAttendance(context.Context, *CreateAttendanceRequest) (*AttendanceResponse, error)
	CheckOutAttendance(context.Context, *CheckOutAttendanceRequest) (*CheckOutResponse, error)
	GetAttendanceByID(context.Context, *GetAttendanceByIDRequest) (*AttendanceResponse, error)
	ListAttendances(context.Context, *ListAttendancesRequest) (*ListAttendancesResponse, error)
	DeleteAttendance(context.Context, *DeleteAttendanceRequest) (*DeleteAttendanceResponse, error)
	mustEmbedUnimplementedAttendanceServiceServer()
}

// UnimplementedAttendanceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAttendanceServiceServer struct{}

func (UnimplementedAttendanceServiceServer) CreateAttendance(context.Context, *CreateAttendanceRequest) (*AttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttendance not implemented")
}
func (UnimplementedAttendanceServiceServer) CheckOutAttendance(context.Context, *CheckOutAttendanceRequest) (*CheckOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOutAttendance not implemented")
}
func (UnimplementedAttendanceServiceServer) GetAttendanceByID(context.Context, *GetAttendanceByIDRequest) (*AttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttendanceByID not implemented")
}
func (UnimplementedAttendanceServiceServer) ListAttendances(context.Context, *ListAttendancesRequest) (*ListAttendancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttendances not implemented")
}
func (UnimplementedAttendanceServiceServer) DeleteAttendance(context.Context, *DeleteAttendanceRequest) (*DeleteAttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttendance not implemented")
}
func (UnimplementedAttendanceServiceServer) mustEmbedUnimplementedAttendanceServiceServer() {}
func (UnimplementedAttendanceServiceServer) testEmbeddedByValue()                           {}

// UnsafeAttendanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttendanceServiceServer will
// result in compilation errors.
type UnsafeAttendanceServiceServer interface {
	mustEmbedUnimplementedAttendanceServiceServer()
}

func RegisterAttendanceServiceServer(s grpc.ServiceRegistrar, srv AttendanceServiceServer) {
	// If the following call pancis, it indicates UnimplementedAttendanceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AttendanceService_ServiceDesc, srv)
}

func _AttendanceService_CreateAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).CreateAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanceService_CreateAttendance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).CreateAttendance(ctx, req.(*CreateAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceService_CheckOutAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckOutAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).CheckOutAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanceService_CheckOutAttendance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).CheckOutAttendance(ctx, req.(*CheckOutAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceService_GetAttendanceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttendanceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).GetAttendanceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanceService_GetAttendanceByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).GetAttendanceByID(ctx, req.(*GetAttendanceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceService_ListAttendances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttendancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).ListAttendances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanceService_ListAttendances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).ListAttendances(ctx, req.(*ListAttendancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttendanceService_DeleteAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendanceServiceServer).DeleteAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AttendanceService_DeleteAttendance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendanceServiceServer).DeleteAttendance(ctx, req.(*DeleteAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttendanceService_ServiceDesc is the grpc.ServiceDesc for AttendanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttendanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hrms.AttendanceService",
	HandlerType: (*AttendanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAttendance",
			Handler:    _AttendanceService_CreateAttendance_Handler,
		},
		{
			MethodName: "CheckOutAttendance",
			Handler:    _AttendanceService_CheckOutAttendance_Handler,
		},
		{
			MethodName: "GetAttendanceByID",
			Handler:    _AttendanceService_GetAttendanceByID_Handler,
		},
		{
			MethodName: "ListAttendances",
			Handler:    _AttendanceService_ListAttendances_Handler,
		},
		{
			MethodName: "DeleteAttendance",
			Handler:    _AttendanceService_DeleteAttendance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/attendance.proto",
}
