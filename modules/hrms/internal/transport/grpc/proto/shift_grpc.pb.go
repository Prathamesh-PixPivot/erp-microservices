// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/shift.proto

package hrms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShiftService_CreateShift_FullMethodName  = "/hrms.ShiftService/CreateShift"
	ShiftService_GetShiftByID_FullMethodName = "/hrms.ShiftService/GetShiftByID"
	ShiftService_ListShifts_FullMethodName   = "/hrms.ShiftService/ListShifts"
	ShiftService_UpdateShift_FullMethodName  = "/hrms.ShiftService/UpdateShift"
	ShiftService_DeleteShift_FullMethodName  = "/hrms.ShiftService/DeleteShift"
)

// ShiftServiceClient is the client API for ShiftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Shift service definition.
type ShiftServiceClient interface {
	// Creates a new shift.
	CreateShift(ctx context.Context, in *CreateShiftRequest, opts ...grpc.CallOption) (*ShiftResponse, error)
	// Fetches a specific shift by ID.
	GetShiftByID(ctx context.Context, in *GetShiftByIDRequest, opts ...grpc.CallOption) (*ShiftResponse, error)
	// Retrieves all shifts with optional search & pagination.
	ListShifts(ctx context.Context, in *ListShiftsRequest, opts ...grpc.CallOption) (*ListShiftsResponse, error)
	// Updates an existing shift.
	UpdateShift(ctx context.Context, in *UpdateShiftRequest, opts ...grpc.CallOption) (*UpdateShiftResponse, error)
	// Deletes a shift.
	DeleteShift(ctx context.Context, in *DeleteShiftRequest, opts ...grpc.CallOption) (*DeleteShiftResponse, error)
}

type shiftServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShiftServiceClient(cc grpc.ClientConnInterface) ShiftServiceClient {
	return &shiftServiceClient{cc}
}

func (c *shiftServiceClient) CreateShift(ctx context.Context, in *CreateShiftRequest, opts ...grpc.CallOption) (*ShiftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftResponse)
	err := c.cc.Invoke(ctx, ShiftService_CreateShift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftServiceClient) GetShiftByID(ctx context.Context, in *GetShiftByIDRequest, opts ...grpc.CallOption) (*ShiftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShiftResponse)
	err := c.cc.Invoke(ctx, ShiftService_GetShiftByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftServiceClient) ListShifts(ctx context.Context, in *ListShiftsRequest, opts ...grpc.CallOption) (*ListShiftsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListShiftsResponse)
	err := c.cc.Invoke(ctx, ShiftService_ListShifts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftServiceClient) UpdateShift(ctx context.Context, in *UpdateShiftRequest, opts ...grpc.CallOption) (*UpdateShiftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateShiftResponse)
	err := c.cc.Invoke(ctx, ShiftService_UpdateShift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shiftServiceClient) DeleteShift(ctx context.Context, in *DeleteShiftRequest, opts ...grpc.CallOption) (*DeleteShiftResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteShiftResponse)
	err := c.cc.Invoke(ctx, ShiftService_DeleteShift_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShiftServiceServer is the server API for ShiftService service.
// All implementations must embed UnimplementedShiftServiceServer
// for forward compatibility.
//
// Shift service definition.
type ShiftServiceServer interface {
	// Creates a new shift.
	CreateShift(context.Context, *CreateShiftRequest) (*ShiftResponse, error)
	// Fetches a specific shift by ID.
	GetShiftByID(context.Context, *GetShiftByIDRequest) (*ShiftResponse, error)
	// Retrieves all shifts with optional search & pagination.
	ListShifts(context.Context, *ListShiftsRequest) (*ListShiftsResponse, error)
	// Updates an existing shift.
	UpdateShift(context.Context, *UpdateShiftRequest) (*UpdateShiftResponse, error)
	// Deletes a shift.
	DeleteShift(context.Context, *DeleteShiftRequest) (*DeleteShiftResponse, error)
	mustEmbedUnimplementedShiftServiceServer()
}

// UnimplementedShiftServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShiftServiceServer struct{}

func (UnimplementedShiftServiceServer) CreateShift(context.Context, *CreateShiftRequest) (*ShiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShift not implemented")
}
func (UnimplementedShiftServiceServer) GetShiftByID(context.Context, *GetShiftByIDRequest) (*ShiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShiftByID not implemented")
}
func (UnimplementedShiftServiceServer) ListShifts(context.Context, *ListShiftsRequest) (*ListShiftsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShifts not implemented")
}
func (UnimplementedShiftServiceServer) UpdateShift(context.Context, *UpdateShiftRequest) (*UpdateShiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShift not implemented")
}
func (UnimplementedShiftServiceServer) DeleteShift(context.Context, *DeleteShiftRequest) (*DeleteShiftResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShift not implemented")
}
func (UnimplementedShiftServiceServer) mustEmbedUnimplementedShiftServiceServer() {}
func (UnimplementedShiftServiceServer) testEmbeddedByValue()                      {}

// UnsafeShiftServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShiftServiceServer will
// result in compilation errors.
type UnsafeShiftServiceServer interface {
	mustEmbedUnimplementedShiftServiceServer()
}

func RegisterShiftServiceServer(s grpc.ServiceRegistrar, srv ShiftServiceServer) {
	// If the following call pancis, it indicates UnimplementedShiftServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShiftService_ServiceDesc, srv)
}

func _ShiftService_CreateShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServiceServer).CreateShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShiftService_CreateShift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServiceServer).CreateShift(ctx, req.(*CreateShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShiftService_GetShiftByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShiftByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServiceServer).GetShiftByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShiftService_GetShiftByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServiceServer).GetShiftByID(ctx, req.(*GetShiftByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShiftService_ListShifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShiftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServiceServer).ListShifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShiftService_ListShifts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServiceServer).ListShifts(ctx, req.(*ListShiftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShiftService_UpdateShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServiceServer).UpdateShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShiftService_UpdateShift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServiceServer).UpdateShift(ctx, req.(*UpdateShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShiftService_DeleteShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShiftServiceServer).DeleteShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShiftService_DeleteShift_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShiftServiceServer).DeleteShift(ctx, req.(*DeleteShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShiftService_ServiceDesc is the grpc.ServiceDesc for ShiftService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShiftService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hrms.ShiftService",
	HandlerType: (*ShiftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShift",
			Handler:    _ShiftService_CreateShift_Handler,
		},
		{
			MethodName: "GetShiftByID",
			Handler:    _ShiftService_GetShiftByID_Handler,
		},
		{
			MethodName: "ListShifts",
			Handler:    _ShiftService_ListShifts_Handler,
		},
		{
			MethodName: "UpdateShift",
			Handler:    _ShiftService_UpdateShift_Handler,
		},
		{
			MethodName: "DeleteShift",
			Handler:    _ShiftService_DeleteShift_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shift.proto",
}
