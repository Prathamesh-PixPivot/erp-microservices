// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/work_history.proto

package hrms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WorkHistoryService_CreateWorkHistory_FullMethodName        = "/hrms.WorkHistoryService/CreateWorkHistory"
	WorkHistoryService_GetWorkHistoryByID_FullMethodName       = "/hrms.WorkHistoryService/GetWorkHistoryByID"
	WorkHistoryService_GetWorkHistoryByEmployee_FullMethodName = "/hrms.WorkHistoryService/GetWorkHistoryByEmployee"
	WorkHistoryService_UpdateWorkHistory_FullMethodName        = "/hrms.WorkHistoryService/UpdateWorkHistory"
	WorkHistoryService_DeleteWorkHistory_FullMethodName        = "/hrms.WorkHistoryService/DeleteWorkHistory"
)

// WorkHistoryServiceClient is the client API for WorkHistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WorkHistoryService defines operations for managing work history records.
type WorkHistoryServiceClient interface {
	// Creates a new work history record.
	CreateWorkHistory(ctx context.Context, in *CreateWorkHistoryRequest, opts ...grpc.CallOption) (*WorkHistoryResponse, error)
	// Fetches a specific work history record by ID.
	GetWorkHistoryByID(ctx context.Context, in *GetWorkHistoryByIDRequest, opts ...grpc.CallOption) (*WorkHistoryResponse, error)
	// Retrieves work history records for a specific employee.
	GetWorkHistoryByEmployee(ctx context.Context, in *GetWorkHistoryByEmployeeRequest, opts ...grpc.CallOption) (*GetWorkHistoryByEmployeeResponse, error)
	// Updates an existing work history record.
	UpdateWorkHistory(ctx context.Context, in *UpdateWorkHistoryRequest, opts ...grpc.CallOption) (*UpdateWorkHistoryResponse, error)
	// Deletes a work history record.
	DeleteWorkHistory(ctx context.Context, in *DeleteWorkHistoryRequest, opts ...grpc.CallOption) (*DeleteWorkHistoryResponse, error)
}

type workHistoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkHistoryServiceClient(cc grpc.ClientConnInterface) WorkHistoryServiceClient {
	return &workHistoryServiceClient{cc}
}

func (c *workHistoryServiceClient) CreateWorkHistory(ctx context.Context, in *CreateWorkHistoryRequest, opts ...grpc.CallOption) (*WorkHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkHistoryResponse)
	err := c.cc.Invoke(ctx, WorkHistoryService_CreateWorkHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workHistoryServiceClient) GetWorkHistoryByID(ctx context.Context, in *GetWorkHistoryByIDRequest, opts ...grpc.CallOption) (*WorkHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkHistoryResponse)
	err := c.cc.Invoke(ctx, WorkHistoryService_GetWorkHistoryByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workHistoryServiceClient) GetWorkHistoryByEmployee(ctx context.Context, in *GetWorkHistoryByEmployeeRequest, opts ...grpc.CallOption) (*GetWorkHistoryByEmployeeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWorkHistoryByEmployeeResponse)
	err := c.cc.Invoke(ctx, WorkHistoryService_GetWorkHistoryByEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workHistoryServiceClient) UpdateWorkHistory(ctx context.Context, in *UpdateWorkHistoryRequest, opts ...grpc.CallOption) (*UpdateWorkHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWorkHistoryResponse)
	err := c.cc.Invoke(ctx, WorkHistoryService_UpdateWorkHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workHistoryServiceClient) DeleteWorkHistory(ctx context.Context, in *DeleteWorkHistoryRequest, opts ...grpc.CallOption) (*DeleteWorkHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWorkHistoryResponse)
	err := c.cc.Invoke(ctx, WorkHistoryService_DeleteWorkHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkHistoryServiceServer is the server API for WorkHistoryService service.
// All implementations must embed UnimplementedWorkHistoryServiceServer
// for forward compatibility.
//
// WorkHistoryService defines operations for managing work history records.
type WorkHistoryServiceServer interface {
	// Creates a new work history record.
	CreateWorkHistory(context.Context, *CreateWorkHistoryRequest) (*WorkHistoryResponse, error)
	// Fetches a specific work history record by ID.
	GetWorkHistoryByID(context.Context, *GetWorkHistoryByIDRequest) (*WorkHistoryResponse, error)
	// Retrieves work history records for a specific employee.
	GetWorkHistoryByEmployee(context.Context, *GetWorkHistoryByEmployeeRequest) (*GetWorkHistoryByEmployeeResponse, error)
	// Updates an existing work history record.
	UpdateWorkHistory(context.Context, *UpdateWorkHistoryRequest) (*UpdateWorkHistoryResponse, error)
	// Deletes a work history record.
	DeleteWorkHistory(context.Context, *DeleteWorkHistoryRequest) (*DeleteWorkHistoryResponse, error)
	mustEmbedUnimplementedWorkHistoryServiceServer()
}

// UnimplementedWorkHistoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkHistoryServiceServer struct{}

func (UnimplementedWorkHistoryServiceServer) CreateWorkHistory(context.Context, *CreateWorkHistoryRequest) (*WorkHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkHistory not implemented")
}
func (UnimplementedWorkHistoryServiceServer) GetWorkHistoryByID(context.Context, *GetWorkHistoryByIDRequest) (*WorkHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkHistoryByID not implemented")
}
func (UnimplementedWorkHistoryServiceServer) GetWorkHistoryByEmployee(context.Context, *GetWorkHistoryByEmployeeRequest) (*GetWorkHistoryByEmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkHistoryByEmployee not implemented")
}
func (UnimplementedWorkHistoryServiceServer) UpdateWorkHistory(context.Context, *UpdateWorkHistoryRequest) (*UpdateWorkHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkHistory not implemented")
}
func (UnimplementedWorkHistoryServiceServer) DeleteWorkHistory(context.Context, *DeleteWorkHistoryRequest) (*DeleteWorkHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkHistory not implemented")
}
func (UnimplementedWorkHistoryServiceServer) mustEmbedUnimplementedWorkHistoryServiceServer() {}
func (UnimplementedWorkHistoryServiceServer) testEmbeddedByValue()                            {}

// UnsafeWorkHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkHistoryServiceServer will
// result in compilation errors.
type UnsafeWorkHistoryServiceServer interface {
	mustEmbedUnimplementedWorkHistoryServiceServer()
}

func RegisterWorkHistoryServiceServer(s grpc.ServiceRegistrar, srv WorkHistoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedWorkHistoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WorkHistoryService_ServiceDesc, srv)
}

func _WorkHistoryService_CreateWorkHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkHistoryServiceServer).CreateWorkHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkHistoryService_CreateWorkHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkHistoryServiceServer).CreateWorkHistory(ctx, req.(*CreateWorkHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkHistoryService_GetWorkHistoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkHistoryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkHistoryServiceServer).GetWorkHistoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkHistoryService_GetWorkHistoryByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkHistoryServiceServer).GetWorkHistoryByID(ctx, req.(*GetWorkHistoryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkHistoryService_GetWorkHistoryByEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkHistoryByEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkHistoryServiceServer).GetWorkHistoryByEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkHistoryService_GetWorkHistoryByEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkHistoryServiceServer).GetWorkHistoryByEmployee(ctx, req.(*GetWorkHistoryByEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkHistoryService_UpdateWorkHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkHistoryServiceServer).UpdateWorkHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkHistoryService_UpdateWorkHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkHistoryServiceServer).UpdateWorkHistory(ctx, req.(*UpdateWorkHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkHistoryService_DeleteWorkHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkHistoryServiceServer).DeleteWorkHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkHistoryService_DeleteWorkHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkHistoryServiceServer).DeleteWorkHistory(ctx, req.(*DeleteWorkHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkHistoryService_ServiceDesc is the grpc.ServiceDesc for WorkHistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkHistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hrms.WorkHistoryService",
	HandlerType: (*WorkHistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkHistory",
			Handler:    _WorkHistoryService_CreateWorkHistory_Handler,
		},
		{
			MethodName: "GetWorkHistoryByID",
			Handler:    _WorkHistoryService_GetWorkHistoryByID_Handler,
		},
		{
			MethodName: "GetWorkHistoryByEmployee",
			Handler:    _WorkHistoryService_GetWorkHistoryByEmployee_Handler,
		},
		{
			MethodName: "UpdateWorkHistory",
			Handler:    _WorkHistoryService_UpdateWorkHistory_Handler,
		},
		{
			MethodName: "DeleteWorkHistory",
			Handler:    _WorkHistoryService_DeleteWorkHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/work_history.proto",
}
