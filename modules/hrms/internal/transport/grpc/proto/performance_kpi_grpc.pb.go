// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/performance_kpi.proto

package hrms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PerformanceKPIService_CreatePerformanceKPI_FullMethodName = "/hrms.PerformanceKPIService/CreatePerformanceKPI"
	PerformanceKPIService_GetPerformanceKPI_FullMethodName    = "/hrms.PerformanceKPIService/GetPerformanceKPI"
	PerformanceKPIService_ListPerformanceKPIs_FullMethodName  = "/hrms.PerformanceKPIService/ListPerformanceKPIs"
	PerformanceKPIService_UpdatePerformanceKPI_FullMethodName = "/hrms.PerformanceKPIService/UpdatePerformanceKPI"
	PerformanceKPIService_DeletePerformanceKPI_FullMethodName = "/hrms.PerformanceKPIService/DeletePerformanceKPI"
)

// PerformanceKPIServiceClient is the client API for PerformanceKPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC Service for Performance KPI Management
type PerformanceKPIServiceClient interface {
	CreatePerformanceKPI(ctx context.Context, in *CreatePerformanceKPIRequest, opts ...grpc.CallOption) (*PerformanceKPIResponse, error)
	GetPerformanceKPI(ctx context.Context, in *GetPerformanceKPIRequest, opts ...grpc.CallOption) (*PerformanceKPIResponse, error)
	ListPerformanceKPIs(ctx context.Context, in *ListPerformanceKPIsRequest, opts ...grpc.CallOption) (*ListPerformanceKPIsResponse, error)
	UpdatePerformanceKPI(ctx context.Context, in *UpdatePerformanceKPIRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePerformanceKPI(ctx context.Context, in *DeletePerformanceKPIRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type performanceKPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPerformanceKPIServiceClient(cc grpc.ClientConnInterface) PerformanceKPIServiceClient {
	return &performanceKPIServiceClient{cc}
}

func (c *performanceKPIServiceClient) CreatePerformanceKPI(ctx context.Context, in *CreatePerformanceKPIRequest, opts ...grpc.CallOption) (*PerformanceKPIResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PerformanceKPIResponse)
	err := c.cc.Invoke(ctx, PerformanceKPIService_CreatePerformanceKPI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceKPIServiceClient) GetPerformanceKPI(ctx context.Context, in *GetPerformanceKPIRequest, opts ...grpc.CallOption) (*PerformanceKPIResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PerformanceKPIResponse)
	err := c.cc.Invoke(ctx, PerformanceKPIService_GetPerformanceKPI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceKPIServiceClient) ListPerformanceKPIs(ctx context.Context, in *ListPerformanceKPIsRequest, opts ...grpc.CallOption) (*ListPerformanceKPIsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPerformanceKPIsResponse)
	err := c.cc.Invoke(ctx, PerformanceKPIService_ListPerformanceKPIs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceKPIServiceClient) UpdatePerformanceKPI(ctx context.Context, in *UpdatePerformanceKPIRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PerformanceKPIService_UpdatePerformanceKPI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceKPIServiceClient) DeletePerformanceKPI(ctx context.Context, in *DeletePerformanceKPIRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PerformanceKPIService_DeletePerformanceKPI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerformanceKPIServiceServer is the server API for PerformanceKPIService service.
// All implementations must embed UnimplementedPerformanceKPIServiceServer
// for forward compatibility.
//
// gRPC Service for Performance KPI Management
type PerformanceKPIServiceServer interface {
	CreatePerformanceKPI(context.Context, *CreatePerformanceKPIRequest) (*PerformanceKPIResponse, error)
	GetPerformanceKPI(context.Context, *GetPerformanceKPIRequest) (*PerformanceKPIResponse, error)
	ListPerformanceKPIs(context.Context, *ListPerformanceKPIsRequest) (*ListPerformanceKPIsResponse, error)
	UpdatePerformanceKPI(context.Context, *UpdatePerformanceKPIRequest) (*emptypb.Empty, error)
	DeletePerformanceKPI(context.Context, *DeletePerformanceKPIRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPerformanceKPIServiceServer()
}

// UnimplementedPerformanceKPIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPerformanceKPIServiceServer struct{}

func (UnimplementedPerformanceKPIServiceServer) CreatePerformanceKPI(context.Context, *CreatePerformanceKPIRequest) (*PerformanceKPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerformanceKPI not implemented")
}
func (UnimplementedPerformanceKPIServiceServer) GetPerformanceKPI(context.Context, *GetPerformanceKPIRequest) (*PerformanceKPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerformanceKPI not implemented")
}
func (UnimplementedPerformanceKPIServiceServer) ListPerformanceKPIs(context.Context, *ListPerformanceKPIsRequest) (*ListPerformanceKPIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPerformanceKPIs not implemented")
}
func (UnimplementedPerformanceKPIServiceServer) UpdatePerformanceKPI(context.Context, *UpdatePerformanceKPIRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerformanceKPI not implemented")
}
func (UnimplementedPerformanceKPIServiceServer) DeletePerformanceKPI(context.Context, *DeletePerformanceKPIRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePerformanceKPI not implemented")
}
func (UnimplementedPerformanceKPIServiceServer) mustEmbedUnimplementedPerformanceKPIServiceServer() {}
func (UnimplementedPerformanceKPIServiceServer) testEmbeddedByValue()                               {}

// UnsafePerformanceKPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PerformanceKPIServiceServer will
// result in compilation errors.
type UnsafePerformanceKPIServiceServer interface {
	mustEmbedUnimplementedPerformanceKPIServiceServer()
}

func RegisterPerformanceKPIServiceServer(s grpc.ServiceRegistrar, srv PerformanceKPIServiceServer) {
	// If the following call pancis, it indicates UnimplementedPerformanceKPIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PerformanceKPIService_ServiceDesc, srv)
}

func _PerformanceKPIService_CreatePerformanceKPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePerformanceKPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceKPIServiceServer).CreatePerformanceKPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceKPIService_CreatePerformanceKPI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceKPIServiceServer).CreatePerformanceKPI(ctx, req.(*CreatePerformanceKPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceKPIService_GetPerformanceKPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPerformanceKPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceKPIServiceServer).GetPerformanceKPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceKPIService_GetPerformanceKPI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceKPIServiceServer).GetPerformanceKPI(ctx, req.(*GetPerformanceKPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceKPIService_ListPerformanceKPIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPerformanceKPIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceKPIServiceServer).ListPerformanceKPIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceKPIService_ListPerformanceKPIs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceKPIServiceServer).ListPerformanceKPIs(ctx, req.(*ListPerformanceKPIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceKPIService_UpdatePerformanceKPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePerformanceKPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceKPIServiceServer).UpdatePerformanceKPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceKPIService_UpdatePerformanceKPI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceKPIServiceServer).UpdatePerformanceKPI(ctx, req.(*UpdatePerformanceKPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceKPIService_DeletePerformanceKPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePerformanceKPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceKPIServiceServer).DeletePerformanceKPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceKPIService_DeletePerformanceKPI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceKPIServiceServer).DeletePerformanceKPI(ctx, req.(*DeletePerformanceKPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PerformanceKPIService_ServiceDesc is the grpc.ServiceDesc for PerformanceKPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PerformanceKPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hrms.PerformanceKPIService",
	HandlerType: (*PerformanceKPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePerformanceKPI",
			Handler:    _PerformanceKPIService_CreatePerformanceKPI_Handler,
		},
		{
			MethodName: "GetPerformanceKPI",
			Handler:    _PerformanceKPIService_GetPerformanceKPI_Handler,
		},
		{
			MethodName: "ListPerformanceKPIs",
			Handler:    _PerformanceKPIService_ListPerformanceKPIs_Handler,
		},
		{
			MethodName: "UpdatePerformanceKPI",
			Handler:    _PerformanceKPIService_UpdatePerformanceKPI_Handler,
		},
		{
			MethodName: "DeletePerformanceKPI",
			Handler:    _PerformanceKPIService_DeletePerformanceKPI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/performance_kpi.proto",
}
