// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/performance_review.proto

package hrms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PerformanceReviewService_CreatePerformanceReview_FullMethodName  = "/hrms.PerformanceReviewService/CreatePerformanceReview"
	PerformanceReviewService_GetPerformanceReviewByID_FullMethodName = "/hrms.PerformanceReviewService/GetPerformanceReviewByID"
	PerformanceReviewService_ListPerformanceReviews_FullMethodName   = "/hrms.PerformanceReviewService/ListPerformanceReviews"
	PerformanceReviewService_UpdatePerformanceReview_FullMethodName  = "/hrms.PerformanceReviewService/UpdatePerformanceReview"
	PerformanceReviewService_DeletePerformanceReview_FullMethodName  = "/hrms.PerformanceReviewService/DeletePerformanceReview"
)

// PerformanceReviewServiceClient is the client API for PerformanceReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PerformanceReviewService defines the gRPC methods for managing performance reviews.
type PerformanceReviewServiceClient interface {
	CreatePerformanceReview(ctx context.Context, in *CreatePerformanceReviewRequest, opts ...grpc.CallOption) (*PerformanceReviewResponse, error)
	GetPerformanceReviewByID(ctx context.Context, in *GetPerformanceReviewRequest, opts ...grpc.CallOption) (*PerformanceReviewResponse, error)
	ListPerformanceReviews(ctx context.Context, in *ListPerformanceReviewsRequest, opts ...grpc.CallOption) (*ListPerformanceReviewsResponse, error)
	UpdatePerformanceReview(ctx context.Context, in *UpdatePerformanceReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePerformanceReview(ctx context.Context, in *DeletePerformanceReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type performanceReviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPerformanceReviewServiceClient(cc grpc.ClientConnInterface) PerformanceReviewServiceClient {
	return &performanceReviewServiceClient{cc}
}

func (c *performanceReviewServiceClient) CreatePerformanceReview(ctx context.Context, in *CreatePerformanceReviewRequest, opts ...grpc.CallOption) (*PerformanceReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PerformanceReviewResponse)
	err := c.cc.Invoke(ctx, PerformanceReviewService_CreatePerformanceReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceReviewServiceClient) GetPerformanceReviewByID(ctx context.Context, in *GetPerformanceReviewRequest, opts ...grpc.CallOption) (*PerformanceReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PerformanceReviewResponse)
	err := c.cc.Invoke(ctx, PerformanceReviewService_GetPerformanceReviewByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceReviewServiceClient) ListPerformanceReviews(ctx context.Context, in *ListPerformanceReviewsRequest, opts ...grpc.CallOption) (*ListPerformanceReviewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPerformanceReviewsResponse)
	err := c.cc.Invoke(ctx, PerformanceReviewService_ListPerformanceReviews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceReviewServiceClient) UpdatePerformanceReview(ctx context.Context, in *UpdatePerformanceReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PerformanceReviewService_UpdatePerformanceReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceReviewServiceClient) DeletePerformanceReview(ctx context.Context, in *DeletePerformanceReviewRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PerformanceReviewService_DeletePerformanceReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerformanceReviewServiceServer is the server API for PerformanceReviewService service.
// All implementations must embed UnimplementedPerformanceReviewServiceServer
// for forward compatibility.
//
// PerformanceReviewService defines the gRPC methods for managing performance reviews.
type PerformanceReviewServiceServer interface {
	CreatePerformanceReview(context.Context, *CreatePerformanceReviewRequest) (*PerformanceReviewResponse, error)
	GetPerformanceReviewByID(context.Context, *GetPerformanceReviewRequest) (*PerformanceReviewResponse, error)
	ListPerformanceReviews(context.Context, *ListPerformanceReviewsRequest) (*ListPerformanceReviewsResponse, error)
	UpdatePerformanceReview(context.Context, *UpdatePerformanceReviewRequest) (*emptypb.Empty, error)
	DeletePerformanceReview(context.Context, *DeletePerformanceReviewRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPerformanceReviewServiceServer()
}

// UnimplementedPerformanceReviewServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPerformanceReviewServiceServer struct{}

func (UnimplementedPerformanceReviewServiceServer) CreatePerformanceReview(context.Context, *CreatePerformanceReviewRequest) (*PerformanceReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerformanceReview not implemented")
}
func (UnimplementedPerformanceReviewServiceServer) GetPerformanceReviewByID(context.Context, *GetPerformanceReviewRequest) (*PerformanceReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerformanceReviewByID not implemented")
}
func (UnimplementedPerformanceReviewServiceServer) ListPerformanceReviews(context.Context, *ListPerformanceReviewsRequest) (*ListPerformanceReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPerformanceReviews not implemented")
}
func (UnimplementedPerformanceReviewServiceServer) UpdatePerformanceReview(context.Context, *UpdatePerformanceReviewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerformanceReview not implemented")
}
func (UnimplementedPerformanceReviewServiceServer) DeletePerformanceReview(context.Context, *DeletePerformanceReviewRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePerformanceReview not implemented")
}
func (UnimplementedPerformanceReviewServiceServer) mustEmbedUnimplementedPerformanceReviewServiceServer() {
}
func (UnimplementedPerformanceReviewServiceServer) testEmbeddedByValue() {}

// UnsafePerformanceReviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PerformanceReviewServiceServer will
// result in compilation errors.
type UnsafePerformanceReviewServiceServer interface {
	mustEmbedUnimplementedPerformanceReviewServiceServer()
}

func RegisterPerformanceReviewServiceServer(s grpc.ServiceRegistrar, srv PerformanceReviewServiceServer) {
	// If the following call pancis, it indicates UnimplementedPerformanceReviewServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PerformanceReviewService_ServiceDesc, srv)
}

func _PerformanceReviewService_CreatePerformanceReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePerformanceReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceReviewServiceServer).CreatePerformanceReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceReviewService_CreatePerformanceReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceReviewServiceServer).CreatePerformanceReview(ctx, req.(*CreatePerformanceReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceReviewService_GetPerformanceReviewByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPerformanceReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceReviewServiceServer).GetPerformanceReviewByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceReviewService_GetPerformanceReviewByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceReviewServiceServer).GetPerformanceReviewByID(ctx, req.(*GetPerformanceReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceReviewService_ListPerformanceReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPerformanceReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceReviewServiceServer).ListPerformanceReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceReviewService_ListPerformanceReviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceReviewServiceServer).ListPerformanceReviews(ctx, req.(*ListPerformanceReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceReviewService_UpdatePerformanceReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePerformanceReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceReviewServiceServer).UpdatePerformanceReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceReviewService_UpdatePerformanceReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceReviewServiceServer).UpdatePerformanceReview(ctx, req.(*UpdatePerformanceReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceReviewService_DeletePerformanceReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePerformanceReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceReviewServiceServer).DeletePerformanceReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceReviewService_DeletePerformanceReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceReviewServiceServer).DeletePerformanceReview(ctx, req.(*DeletePerformanceReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PerformanceReviewService_ServiceDesc is the grpc.ServiceDesc for PerformanceReviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PerformanceReviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hrms.PerformanceReviewService",
	HandlerType: (*PerformanceReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePerformanceReview",
			Handler:    _PerformanceReviewService_CreatePerformanceReview_Handler,
		},
		{
			MethodName: "GetPerformanceReviewByID",
			Handler:    _PerformanceReviewService_GetPerformanceReviewByID_Handler,
		},
		{
			MethodName: "ListPerformanceReviews",
			Handler:    _PerformanceReviewService_ListPerformanceReviews_Handler,
		},
		{
			MethodName: "UpdatePerformanceReview",
			Handler:    _PerformanceReviewService_UpdatePerformanceReview_Handler,
		},
		{
			MethodName: "DeletePerformanceReview",
			Handler:    _PerformanceReviewService_DeletePerformanceReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/performance_review.proto",
}
