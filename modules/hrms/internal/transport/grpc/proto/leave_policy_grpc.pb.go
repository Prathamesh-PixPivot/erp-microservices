// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/leave_policy.proto

package hrms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LeavePolicyService_CreateLeavePolicy_FullMethodName = "/hrms.LeavePolicyService/CreateLeavePolicy"
	LeavePolicyService_GetLeavePolicy_FullMethodName    = "/hrms.LeavePolicyService/GetLeavePolicy"
	LeavePolicyService_ListLeavePolicies_FullMethodName = "/hrms.LeavePolicyService/ListLeavePolicies"
	LeavePolicyService_UpdateLeavePolicy_FullMethodName = "/hrms.LeavePolicyService/UpdateLeavePolicy"
	LeavePolicyService_DeleteLeavePolicy_FullMethodName = "/hrms.LeavePolicyService/DeleteLeavePolicy"
)

// LeavePolicyServiceClient is the client API for LeavePolicyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC Service for Leave Policy Management
type LeavePolicyServiceClient interface {
	CreateLeavePolicy(ctx context.Context, in *CreateLeavePolicyRequest, opts ...grpc.CallOption) (*LeavePolicyResponse, error)
	GetLeavePolicy(ctx context.Context, in *GetLeavePolicyRequest, opts ...grpc.CallOption) (*LeavePolicyResponse, error)
	ListLeavePolicies(ctx context.Context, in *ListLeavePoliciesRequest, opts ...grpc.CallOption) (*ListLeavePoliciesResponse, error)
	UpdateLeavePolicy(ctx context.Context, in *UpdateLeavePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteLeavePolicy(ctx context.Context, in *DeleteLeavePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type leavePolicyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeavePolicyServiceClient(cc grpc.ClientConnInterface) LeavePolicyServiceClient {
	return &leavePolicyServiceClient{cc}
}

func (c *leavePolicyServiceClient) CreateLeavePolicy(ctx context.Context, in *CreateLeavePolicyRequest, opts ...grpc.CallOption) (*LeavePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavePolicyResponse)
	err := c.cc.Invoke(ctx, LeavePolicyService_CreateLeavePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavePolicyServiceClient) GetLeavePolicy(ctx context.Context, in *GetLeavePolicyRequest, opts ...grpc.CallOption) (*LeavePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeavePolicyResponse)
	err := c.cc.Invoke(ctx, LeavePolicyService_GetLeavePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavePolicyServiceClient) ListLeavePolicies(ctx context.Context, in *ListLeavePoliciesRequest, opts ...grpc.CallOption) (*ListLeavePoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLeavePoliciesResponse)
	err := c.cc.Invoke(ctx, LeavePolicyService_ListLeavePolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavePolicyServiceClient) UpdateLeavePolicy(ctx context.Context, in *UpdateLeavePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LeavePolicyService_UpdateLeavePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leavePolicyServiceClient) DeleteLeavePolicy(ctx context.Context, in *DeleteLeavePolicyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LeavePolicyService_DeleteLeavePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeavePolicyServiceServer is the server API for LeavePolicyService service.
// All implementations must embed UnimplementedLeavePolicyServiceServer
// for forward compatibility.
//
// gRPC Service for Leave Policy Management
type LeavePolicyServiceServer interface {
	CreateLeavePolicy(context.Context, *CreateLeavePolicyRequest) (*LeavePolicyResponse, error)
	GetLeavePolicy(context.Context, *GetLeavePolicyRequest) (*LeavePolicyResponse, error)
	ListLeavePolicies(context.Context, *ListLeavePoliciesRequest) (*ListLeavePoliciesResponse, error)
	UpdateLeavePolicy(context.Context, *UpdateLeavePolicyRequest) (*emptypb.Empty, error)
	DeleteLeavePolicy(context.Context, *DeleteLeavePolicyRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedLeavePolicyServiceServer()
}

// UnimplementedLeavePolicyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeavePolicyServiceServer struct{}

func (UnimplementedLeavePolicyServiceServer) CreateLeavePolicy(context.Context, *CreateLeavePolicyRequest) (*LeavePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLeavePolicy not implemented")
}
func (UnimplementedLeavePolicyServiceServer) GetLeavePolicy(context.Context, *GetLeavePolicyRequest) (*LeavePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeavePolicy not implemented")
}
func (UnimplementedLeavePolicyServiceServer) ListLeavePolicies(context.Context, *ListLeavePoliciesRequest) (*ListLeavePoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeavePolicies not implemented")
}
func (UnimplementedLeavePolicyServiceServer) UpdateLeavePolicy(context.Context, *UpdateLeavePolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeavePolicy not implemented")
}
func (UnimplementedLeavePolicyServiceServer) DeleteLeavePolicy(context.Context, *DeleteLeavePolicyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeavePolicy not implemented")
}
func (UnimplementedLeavePolicyServiceServer) mustEmbedUnimplementedLeavePolicyServiceServer() {}
func (UnimplementedLeavePolicyServiceServer) testEmbeddedByValue()                            {}

// UnsafeLeavePolicyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeavePolicyServiceServer will
// result in compilation errors.
type UnsafeLeavePolicyServiceServer interface {
	mustEmbedUnimplementedLeavePolicyServiceServer()
}

func RegisterLeavePolicyServiceServer(s grpc.ServiceRegistrar, srv LeavePolicyServiceServer) {
	// If the following call pancis, it indicates UnimplementedLeavePolicyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LeavePolicyService_ServiceDesc, srv)
}

func _LeavePolicyService_CreateLeavePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeavePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeavePolicyServiceServer).CreateLeavePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeavePolicyService_CreateLeavePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeavePolicyServiceServer).CreateLeavePolicy(ctx, req.(*CreateLeavePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeavePolicyService_GetLeavePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeavePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeavePolicyServiceServer).GetLeavePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeavePolicyService_GetLeavePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeavePolicyServiceServer).GetLeavePolicy(ctx, req.(*GetLeavePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeavePolicyService_ListLeavePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeavePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeavePolicyServiceServer).ListLeavePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeavePolicyService_ListLeavePolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeavePolicyServiceServer).ListLeavePolicies(ctx, req.(*ListLeavePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeavePolicyService_UpdateLeavePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLeavePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeavePolicyServiceServer).UpdateLeavePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeavePolicyService_UpdateLeavePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeavePolicyServiceServer).UpdateLeavePolicy(ctx, req.(*UpdateLeavePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeavePolicyService_DeleteLeavePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeavePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeavePolicyServiceServer).DeleteLeavePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeavePolicyService_DeleteLeavePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeavePolicyServiceServer).DeleteLeavePolicy(ctx, req.(*DeleteLeavePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeavePolicyService_ServiceDesc is the grpc.ServiceDesc for LeavePolicyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeavePolicyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hrms.LeavePolicyService",
	HandlerType: (*LeavePolicyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLeavePolicy",
			Handler:    _LeavePolicyService_CreateLeavePolicy_Handler,
		},
		{
			MethodName: "GetLeavePolicy",
			Handler:    _LeavePolicyService_GetLeavePolicy_Handler,
		},
		{
			MethodName: "ListLeavePolicies",
			Handler:    _LeavePolicyService_ListLeavePolicies_Handler,
		},
		{
			MethodName: "UpdateLeavePolicy",
			Handler:    _LeavePolicyService_UpdateLeavePolicy_Handler,
		},
		{
			MethodName: "DeleteLeavePolicy",
			Handler:    _LeavePolicyService_DeleteLeavePolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/leave_policy.proto",
}
