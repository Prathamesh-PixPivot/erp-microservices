// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: proto/emp_perk.proto

package hrms

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Employee Perk message
type EmployeePerk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EmployeeId    uint64                 `protobuf:"varint,2,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	Perk          string                 `protobuf:"bytes,3,opt,name=perk,proto3" json:"perk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmployeePerk) Reset() {
	*x = EmployeePerk{}
	mi := &file_proto_emp_perk_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmployeePerk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeePerk) ProtoMessage() {}

func (x *EmployeePerk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_emp_perk_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeePerk.ProtoReflect.Descriptor instead.
func (*EmployeePerk) Descriptor() ([]byte, []int) {
	return file_proto_emp_perk_proto_rawDescGZIP(), []int{0}
}

func (x *EmployeePerk) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EmployeePerk) GetEmployeeId() uint64 {
	if x != nil {
		return x.EmployeeId
	}
	return 0
}

func (x *EmployeePerk) GetPerk() string {
	if x != nil {
		return x.Perk
	}
	return ""
}

// Request for creating an employee perk
type CreateEmployeePerkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EmployeeId    uint64                 `protobuf:"varint,1,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	Perk          string                 `protobuf:"bytes,2,opt,name=perk,proto3" json:"perk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEmployeePerkRequest) Reset() {
	*x = CreateEmployeePerkRequest{}
	mi := &file_proto_emp_perk_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEmployeePerkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEmployeePerkRequest) ProtoMessage() {}

func (x *CreateEmployeePerkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_emp_perk_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEmployeePerkRequest.ProtoReflect.Descriptor instead.
func (*CreateEmployeePerkRequest) Descriptor() ([]byte, []int) {
	return file_proto_emp_perk_proto_rawDescGZIP(), []int{1}
}

func (x *CreateEmployeePerkRequest) GetEmployeeId() uint64 {
	if x != nil {
		return x.EmployeeId
	}
	return 0
}

func (x *CreateEmployeePerkRequest) GetPerk() string {
	if x != nil {
		return x.Perk
	}
	return ""
}

// Response with employee perk details
type EmployeePerkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Perk          *EmployeePerk          `protobuf:"bytes,1,opt,name=perk,proto3" json:"perk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmployeePerkResponse) Reset() {
	*x = EmployeePerkResponse{}
	mi := &file_proto_emp_perk_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmployeePerkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmployeePerkResponse) ProtoMessage() {}

func (x *EmployeePerkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_emp_perk_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmployeePerkResponse.ProtoReflect.Descriptor instead.
func (*EmployeePerkResponse) Descriptor() ([]byte, []int) {
	return file_proto_emp_perk_proto_rawDescGZIP(), []int{2}
}

func (x *EmployeePerkResponse) GetPerk() *EmployeePerk {
	if x != nil {
		return x.Perk
	}
	return nil
}

// Request for fetching perks by employee ID
type GetEmployeePerksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EmployeeId    uint64                 `protobuf:"varint,1,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetEmployeePerksRequest) Reset() {
	*x = GetEmployeePerksRequest{}
	mi := &file_proto_emp_perk_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetEmployeePerksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmployeePerksRequest) ProtoMessage() {}

func (x *GetEmployeePerksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_emp_perk_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmployeePerksRequest.ProtoReflect.Descriptor instead.
func (*GetEmployeePerksRequest) Descriptor() ([]byte, []int) {
	return file_proto_emp_perk_proto_rawDescGZIP(), []int{3}
}

func (x *GetEmployeePerksRequest) GetEmployeeId() uint64 {
	if x != nil {
		return x.EmployeeId
	}
	return 0
}

// Response for listing multiple perks
type ListEmployeePerksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Perks         []*EmployeePerk        `protobuf:"bytes,1,rep,name=perks,proto3" json:"perks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListEmployeePerksResponse) Reset() {
	*x = ListEmployeePerksResponse{}
	mi := &file_proto_emp_perk_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListEmployeePerksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListEmployeePerksResponse) ProtoMessage() {}

func (x *ListEmployeePerksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_emp_perk_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListEmployeePerksResponse.ProtoReflect.Descriptor instead.
func (*ListEmployeePerksResponse) Descriptor() ([]byte, []int) {
	return file_proto_emp_perk_proto_rawDescGZIP(), []int{4}
}

func (x *ListEmployeePerksResponse) GetPerks() []*EmployeePerk {
	if x != nil {
		return x.Perks
	}
	return nil
}

// Request for updating an employee perk
type UpdateEmployeePerkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PerkId        uint64                 `protobuf:"varint,1,opt,name=perk_id,json=perkId,proto3" json:"perk_id,omitempty"`
	Perk          string                 `protobuf:"bytes,2,opt,name=perk,proto3" json:"perk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateEmployeePerkRequest) Reset() {
	*x = UpdateEmployeePerkRequest{}
	mi := &file_proto_emp_perk_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateEmployeePerkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEmployeePerkRequest) ProtoMessage() {}

func (x *UpdateEmployeePerkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_emp_perk_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEmployeePerkRequest.ProtoReflect.Descriptor instead.
func (*UpdateEmployeePerkRequest) Descriptor() ([]byte, []int) {
	return file_proto_emp_perk_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateEmployeePerkRequest) GetPerkId() uint64 {
	if x != nil {
		return x.PerkId
	}
	return 0
}

func (x *UpdateEmployeePerkRequest) GetPerk() string {
	if x != nil {
		return x.Perk
	}
	return ""
}

// Request for deleting an employee perk by ID
type DeleteEmployeePerkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PerkId        uint64                 `protobuf:"varint,1,opt,name=perk_id,json=perkId,proto3" json:"perk_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteEmployeePerkRequest) Reset() {
	*x = DeleteEmployeePerkRequest{}
	mi := &file_proto_emp_perk_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteEmployeePerkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEmployeePerkRequest) ProtoMessage() {}

func (x *DeleteEmployeePerkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_emp_perk_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEmployeePerkRequest.ProtoReflect.Descriptor instead.
func (*DeleteEmployeePerkRequest) Descriptor() ([]byte, []int) {
	return file_proto_emp_perk_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteEmployeePerkRequest) GetPerkId() uint64 {
	if x != nil {
		return x.PerkId
	}
	return 0
}

var File_proto_emp_perk_proto protoreflect.FileDescriptor

var file_proto_emp_perk_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x6d, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x68, 0x72, 0x6d, 0x73, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a, 0x0c, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65,
	0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x65, 0x72, 0x6b, 0x22, 0x50,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x50, 0x65, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x65, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x65, 0x72, 0x6b,
	0x22, 0x3e, 0x0a, 0x14, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x72, 0x6d, 0x73, 0x2e, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x6b, 0x52, 0x04, 0x70, 0x65, 0x72, 0x6b,
	0x22, 0x3a, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50,
	0x65, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x22, 0x45, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x65, 0x72,
	0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x72, 0x6d, 0x73, 0x2e,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x6b, 0x52, 0x05, 0x70, 0x65,
	0x72, 0x6b, 0x73, 0x22, 0x48, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x65, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x72,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x65, 0x72, 0x6b, 0x22, 0x34, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50,
	0x65, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65,
	0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x6b, 0x49, 0x64, 0x32, 0xda, 0x02, 0x0a, 0x13, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x50, 0x65, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72,
	0x6b, 0x12, 0x1f, 0x2e, 0x68, 0x72, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x72, 0x6d, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79,
	0x65, 0x65, 0x50, 0x65, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72,
	0x6b, 0x73, 0x12, 0x1d, 0x2e, 0x68, 0x72, 0x6d, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x68, 0x72, 0x6d, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x6b, 0x12, 0x1f, 0x2e, 0x68, 0x72, 0x6d, 0x73, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x4d, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x50, 0x65, 0x72, 0x6b, 0x12, 0x1f, 0x2e, 0x68, 0x72, 0x6d, 0x73, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x50, 0x65, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x42, 0x11, 0x5a, 0x0f, 0x68, 0x72, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x68,
	0x72, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_emp_perk_proto_rawDescOnce sync.Once
	file_proto_emp_perk_proto_rawDescData []byte
)

func file_proto_emp_perk_proto_rawDescGZIP() []byte {
	file_proto_emp_perk_proto_rawDescOnce.Do(func() {
		file_proto_emp_perk_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_emp_perk_proto_rawDesc), len(file_proto_emp_perk_proto_rawDesc)))
	})
	return file_proto_emp_perk_proto_rawDescData
}

var file_proto_emp_perk_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_emp_perk_proto_goTypes = []any{
	(*EmployeePerk)(nil),              // 0: hrms.EmployeePerk
	(*CreateEmployeePerkRequest)(nil), // 1: hrms.CreateEmployeePerkRequest
	(*EmployeePerkResponse)(nil),      // 2: hrms.EmployeePerkResponse
	(*GetEmployeePerksRequest)(nil),   // 3: hrms.GetEmployeePerksRequest
	(*ListEmployeePerksResponse)(nil), // 4: hrms.ListEmployeePerksResponse
	(*UpdateEmployeePerkRequest)(nil), // 5: hrms.UpdateEmployeePerkRequest
	(*DeleteEmployeePerkRequest)(nil), // 6: hrms.DeleteEmployeePerkRequest
	(*emptypb.Empty)(nil),             // 7: google.protobuf.Empty
}
var file_proto_emp_perk_proto_depIdxs = []int32{
	0, // 0: hrms.EmployeePerkResponse.perk:type_name -> hrms.EmployeePerk
	0, // 1: hrms.ListEmployeePerksResponse.perks:type_name -> hrms.EmployeePerk
	1, // 2: hrms.EmployeePerkService.CreateEmployeePerk:input_type -> hrms.CreateEmployeePerkRequest
	3, // 3: hrms.EmployeePerkService.GetEmployeePerks:input_type -> hrms.GetEmployeePerksRequest
	5, // 4: hrms.EmployeePerkService.UpdateEmployeePerk:input_type -> hrms.UpdateEmployeePerkRequest
	6, // 5: hrms.EmployeePerkService.DeleteEmployeePerk:input_type -> hrms.DeleteEmployeePerkRequest
	2, // 6: hrms.EmployeePerkService.CreateEmployeePerk:output_type -> hrms.EmployeePerkResponse
	4, // 7: hrms.EmployeePerkService.GetEmployeePerks:output_type -> hrms.ListEmployeePerksResponse
	7, // 8: hrms.EmployeePerkService.UpdateEmployeePerk:output_type -> google.protobuf.Empty
	7, // 9: hrms.EmployeePerkService.DeleteEmployeePerk:output_type -> google.protobuf.Empty
	6, // [6:10] is the sub-list for method output_type
	2, // [2:6] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_emp_perk_proto_init() }
func file_proto_emp_perk_proto_init() {
	if File_proto_emp_perk_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_emp_perk_proto_rawDesc), len(file_proto_emp_perk_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_emp_perk_proto_goTypes,
		DependencyIndexes: file_proto_emp_perk_proto_depIdxs,
		MessageInfos:      file_proto_emp_perk_proto_msgTypes,
	}.Build()
	File_proto_emp_perk_proto = out.File
	file_proto_emp_perk_proto_goTypes = nil
	file_proto_emp_perk_proto_depIdxs = nil
}
