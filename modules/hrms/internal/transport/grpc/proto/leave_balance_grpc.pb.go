// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/leave_balance.proto

package hrms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LeaveBalanceService_CreateLeaveBalance_FullMethodName  = "/hrms.LeaveBalanceService/CreateLeaveBalance"
	LeaveBalanceService_DeductLeaveBalance_FullMethodName  = "/hrms.LeaveBalanceService/DeductLeaveBalance"
	LeaveBalanceService_RestoreLeaveBalance_FullMethodName = "/hrms.LeaveBalanceService/RestoreLeaveBalance"
	LeaveBalanceService_GetLeaveBalance_FullMethodName     = "/hrms.LeaveBalanceService/GetLeaveBalance"
	LeaveBalanceService_ListLeaveBalances_FullMethodName   = "/hrms.LeaveBalanceService/ListLeaveBalances"
	LeaveBalanceService_DeleteLeaveBalance_FullMethodName  = "/hrms.LeaveBalanceService/DeleteLeaveBalance"
)

// LeaveBalanceServiceClient is the client API for LeaveBalanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC Service for Leave Balance Management
type LeaveBalanceServiceClient interface {
	CreateLeaveBalance(ctx context.Context, in *CreateLeaveBalanceRequest, opts ...grpc.CallOption) (*LeaveBalanceResponse, error)
	DeductLeaveBalance(ctx context.Context, in *DeductLeaveBalanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RestoreLeaveBalance(ctx context.Context, in *RestoreLeaveBalanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetLeaveBalance(ctx context.Context, in *GetLeaveBalanceRequest, opts ...grpc.CallOption) (*LeaveBalanceResponse, error)
	ListLeaveBalances(ctx context.Context, in *ListLeaveBalancesRequest, opts ...grpc.CallOption) (*ListLeaveBalancesResponse, error)
	DeleteLeaveBalance(ctx context.Context, in *DeleteLeaveBalanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type leaveBalanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaveBalanceServiceClient(cc grpc.ClientConnInterface) LeaveBalanceServiceClient {
	return &leaveBalanceServiceClient{cc}
}

func (c *leaveBalanceServiceClient) CreateLeaveBalance(ctx context.Context, in *CreateLeaveBalanceRequest, opts ...grpc.CallOption) (*LeaveBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveBalanceResponse)
	err := c.cc.Invoke(ctx, LeaveBalanceService_CreateLeaveBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveBalanceServiceClient) DeductLeaveBalance(ctx context.Context, in *DeductLeaveBalanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LeaveBalanceService_DeductLeaveBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveBalanceServiceClient) RestoreLeaveBalance(ctx context.Context, in *RestoreLeaveBalanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LeaveBalanceService_RestoreLeaveBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveBalanceServiceClient) GetLeaveBalance(ctx context.Context, in *GetLeaveBalanceRequest, opts ...grpc.CallOption) (*LeaveBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveBalanceResponse)
	err := c.cc.Invoke(ctx, LeaveBalanceService_GetLeaveBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveBalanceServiceClient) ListLeaveBalances(ctx context.Context, in *ListLeaveBalancesRequest, opts ...grpc.CallOption) (*ListLeaveBalancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLeaveBalancesResponse)
	err := c.cc.Invoke(ctx, LeaveBalanceService_ListLeaveBalances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaveBalanceServiceClient) DeleteLeaveBalance(ctx context.Context, in *DeleteLeaveBalanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LeaveBalanceService_DeleteLeaveBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaveBalanceServiceServer is the server API for LeaveBalanceService service.
// All implementations must embed UnimplementedLeaveBalanceServiceServer
// for forward compatibility.
//
// gRPC Service for Leave Balance Management
type LeaveBalanceServiceServer interface {
	CreateLeaveBalance(context.Context, *CreateLeaveBalanceRequest) (*LeaveBalanceResponse, error)
	DeductLeaveBalance(context.Context, *DeductLeaveBalanceRequest) (*emptypb.Empty, error)
	RestoreLeaveBalance(context.Context, *RestoreLeaveBalanceRequest) (*emptypb.Empty, error)
	GetLeaveBalance(context.Context, *GetLeaveBalanceRequest) (*LeaveBalanceResponse, error)
	ListLeaveBalances(context.Context, *ListLeaveBalancesRequest) (*ListLeaveBalancesResponse, error)
	DeleteLeaveBalance(context.Context, *DeleteLeaveBalanceRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedLeaveBalanceServiceServer()
}

// UnimplementedLeaveBalanceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLeaveBalanceServiceServer struct{}

func (UnimplementedLeaveBalanceServiceServer) CreateLeaveBalance(context.Context, *CreateLeaveBalanceRequest) (*LeaveBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLeaveBalance not implemented")
}
func (UnimplementedLeaveBalanceServiceServer) DeductLeaveBalance(context.Context, *DeductLeaveBalanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeductLeaveBalance not implemented")
}
func (UnimplementedLeaveBalanceServiceServer) RestoreLeaveBalance(context.Context, *RestoreLeaveBalanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreLeaveBalance not implemented")
}
func (UnimplementedLeaveBalanceServiceServer) GetLeaveBalance(context.Context, *GetLeaveBalanceRequest) (*LeaveBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaveBalance not implemented")
}
func (UnimplementedLeaveBalanceServiceServer) ListLeaveBalances(context.Context, *ListLeaveBalancesRequest) (*ListLeaveBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeaveBalances not implemented")
}
func (UnimplementedLeaveBalanceServiceServer) DeleteLeaveBalance(context.Context, *DeleteLeaveBalanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLeaveBalance not implemented")
}
func (UnimplementedLeaveBalanceServiceServer) mustEmbedUnimplementedLeaveBalanceServiceServer() {}
func (UnimplementedLeaveBalanceServiceServer) testEmbeddedByValue()                             {}

// UnsafeLeaveBalanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaveBalanceServiceServer will
// result in compilation errors.
type UnsafeLeaveBalanceServiceServer interface {
	mustEmbedUnimplementedLeaveBalanceServiceServer()
}

func RegisterLeaveBalanceServiceServer(s grpc.ServiceRegistrar, srv LeaveBalanceServiceServer) {
	// If the following call pancis, it indicates UnimplementedLeaveBalanceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LeaveBalanceService_ServiceDesc, srv)
}

func _LeaveBalanceService_CreateLeaveBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeaveBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveBalanceServiceServer).CreateLeaveBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaveBalanceService_CreateLeaveBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveBalanceServiceServer).CreateLeaveBalance(ctx, req.(*CreateLeaveBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveBalanceService_DeductLeaveBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeductLeaveBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveBalanceServiceServer).DeductLeaveBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaveBalanceService_DeductLeaveBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveBalanceServiceServer).DeductLeaveBalance(ctx, req.(*DeductLeaveBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveBalanceService_RestoreLeaveBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreLeaveBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveBalanceServiceServer).RestoreLeaveBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaveBalanceService_RestoreLeaveBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveBalanceServiceServer).RestoreLeaveBalance(ctx, req.(*RestoreLeaveBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveBalanceService_GetLeaveBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaveBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveBalanceServiceServer).GetLeaveBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaveBalanceService_GetLeaveBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveBalanceServiceServer).GetLeaveBalance(ctx, req.(*GetLeaveBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveBalanceService_ListLeaveBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeaveBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveBalanceServiceServer).ListLeaveBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaveBalanceService_ListLeaveBalances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveBalanceServiceServer).ListLeaveBalances(ctx, req.(*ListLeaveBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaveBalanceService_DeleteLeaveBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeaveBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveBalanceServiceServer).DeleteLeaveBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaveBalanceService_DeleteLeaveBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveBalanceServiceServer).DeleteLeaveBalance(ctx, req.(*DeleteLeaveBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaveBalanceService_ServiceDesc is the grpc.ServiceDesc for LeaveBalanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaveBalanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hrms.LeaveBalanceService",
	HandlerType: (*LeaveBalanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLeaveBalance",
			Handler:    _LeaveBalanceService_CreateLeaveBalance_Handler,
		},
		{
			MethodName: "DeductLeaveBalance",
			Handler:    _LeaveBalanceService_DeductLeaveBalance_Handler,
		},
		{
			MethodName: "RestoreLeaveBalance",
			Handler:    _LeaveBalanceService_RestoreLeaveBalance_Handler,
		},
		{
			MethodName: "GetLeaveBalance",
			Handler:    _LeaveBalanceService_GetLeaveBalance_Handler,
		},
		{
			MethodName: "ListLeaveBalances",
			Handler:    _LeaveBalanceService_ListLeaveBalances_Handler,
		},
		{
			MethodName: "DeleteLeaveBalance",
			Handler:    _LeaveBalanceService_DeleteLeaveBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/leave_balance.proto",
}
