// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/payroll.proto

package hrms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PayrollService_CreatePayroll_FullMethodName = "/hrms.PayrollService/CreatePayroll"
	PayrollService_GetPayroll_FullMethodName    = "/hrms.PayrollService/GetPayroll"
	PayrollService_ListPayrolls_FullMethodName  = "/hrms.PayrollService/ListPayrolls"
	PayrollService_UpdatePayroll_FullMethodName = "/hrms.PayrollService/UpdatePayroll"
	PayrollService_DeletePayroll_FullMethodName = "/hrms.PayrollService/DeletePayroll"
)

// PayrollServiceClient is the client API for PayrollService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC Service for Payroll Management
type PayrollServiceClient interface {
	CreatePayroll(ctx context.Context, in *CreatePayrollRequest, opts ...grpc.CallOption) (*PayrollResponse, error)
	GetPayroll(ctx context.Context, in *GetPayrollRequest, opts ...grpc.CallOption) (*PayrollResponse, error)
	ListPayrolls(ctx context.Context, in *ListPayrollsRequest, opts ...grpc.CallOption) (*ListPayrollsResponse, error)
	UpdatePayroll(ctx context.Context, in *UpdatePayrollRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePayroll(ctx context.Context, in *DeletePayrollRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type payrollServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayrollServiceClient(cc grpc.ClientConnInterface) PayrollServiceClient {
	return &payrollServiceClient{cc}
}

func (c *payrollServiceClient) CreatePayroll(ctx context.Context, in *CreatePayrollRequest, opts ...grpc.CallOption) (*PayrollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayrollResponse)
	err := c.cc.Invoke(ctx, PayrollService_CreatePayroll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollServiceClient) GetPayroll(ctx context.Context, in *GetPayrollRequest, opts ...grpc.CallOption) (*PayrollResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayrollResponse)
	err := c.cc.Invoke(ctx, PayrollService_GetPayroll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollServiceClient) ListPayrolls(ctx context.Context, in *ListPayrollsRequest, opts ...grpc.CallOption) (*ListPayrollsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPayrollsResponse)
	err := c.cc.Invoke(ctx, PayrollService_ListPayrolls_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollServiceClient) UpdatePayroll(ctx context.Context, in *UpdatePayrollRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PayrollService_UpdatePayroll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *payrollServiceClient) DeletePayroll(ctx context.Context, in *DeletePayrollRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PayrollService_DeletePayroll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayrollServiceServer is the server API for PayrollService service.
// All implementations must embed UnimplementedPayrollServiceServer
// for forward compatibility.
//
// gRPC Service for Payroll Management
type PayrollServiceServer interface {
	CreatePayroll(context.Context, *CreatePayrollRequest) (*PayrollResponse, error)
	GetPayroll(context.Context, *GetPayrollRequest) (*PayrollResponse, error)
	ListPayrolls(context.Context, *ListPayrollsRequest) (*ListPayrollsResponse, error)
	UpdatePayroll(context.Context, *UpdatePayrollRequest) (*emptypb.Empty, error)
	DeletePayroll(context.Context, *DeletePayrollRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPayrollServiceServer()
}

// UnimplementedPayrollServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPayrollServiceServer struct{}

func (UnimplementedPayrollServiceServer) CreatePayroll(context.Context, *CreatePayrollRequest) (*PayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayroll not implemented")
}
func (UnimplementedPayrollServiceServer) GetPayroll(context.Context, *GetPayrollRequest) (*PayrollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayroll not implemented")
}
func (UnimplementedPayrollServiceServer) ListPayrolls(context.Context, *ListPayrollsRequest) (*ListPayrollsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPayrolls not implemented")
}
func (UnimplementedPayrollServiceServer) UpdatePayroll(context.Context, *UpdatePayrollRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayroll not implemented")
}
func (UnimplementedPayrollServiceServer) DeletePayroll(context.Context, *DeletePayrollRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePayroll not implemented")
}
func (UnimplementedPayrollServiceServer) mustEmbedUnimplementedPayrollServiceServer() {}
func (UnimplementedPayrollServiceServer) testEmbeddedByValue()                        {}

// UnsafePayrollServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayrollServiceServer will
// result in compilation errors.
type UnsafePayrollServiceServer interface {
	mustEmbedUnimplementedPayrollServiceServer()
}

func RegisterPayrollServiceServer(s grpc.ServiceRegistrar, srv PayrollServiceServer) {
	// If the following call pancis, it indicates UnimplementedPayrollServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PayrollService_ServiceDesc, srv)
}

func _PayrollService_CreatePayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrollServiceServer).CreatePayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayrollService_CreatePayroll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrollServiceServer).CreatePayroll(ctx, req.(*CreatePayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayrollService_GetPayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrollServiceServer).GetPayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayrollService_GetPayroll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrollServiceServer).GetPayroll(ctx, req.(*GetPayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayrollService_ListPayrolls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPayrollsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrollServiceServer).ListPayrolls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayrollService_ListPayrolls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrollServiceServer).ListPayrolls(ctx, req.(*ListPayrollsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayrollService_UpdatePayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrollServiceServer).UpdatePayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayrollService_UpdatePayroll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrollServiceServer).UpdatePayroll(ctx, req.(*UpdatePayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PayrollService_DeletePayroll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePayrollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayrollServiceServer).DeletePayroll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PayrollService_DeletePayroll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayrollServiceServer).DeletePayroll(ctx, req.(*DeletePayrollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PayrollService_ServiceDesc is the grpc.ServiceDesc for PayrollService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayrollService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hrms.PayrollService",
	HandlerType: (*PayrollServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePayroll",
			Handler:    _PayrollService_CreatePayroll_Handler,
		},
		{
			MethodName: "GetPayroll",
			Handler:    _PayrollService_GetPayroll_Handler,
		},
		{
			MethodName: "ListPayrolls",
			Handler:    _PayrollService_ListPayrolls_Handler,
		},
		{
			MethodName: "UpdatePayroll",
			Handler:    _PayrollService_UpdatePayroll_Handler,
		},
		{
			MethodName: "DeletePayroll",
			Handler:    _PayrollService_DeletePayroll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/payroll.proto",
}
