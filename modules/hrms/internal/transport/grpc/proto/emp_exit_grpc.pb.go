// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/emp_exit.proto

package hrms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmployeeExitService_CreateEmployeeExit_FullMethodName       = "/hrms.EmployeeExitService/CreateEmployeeExit"
	EmployeeExitService_GetEmployeeExitByID_FullMethodName      = "/hrms.EmployeeExitService/GetEmployeeExitByID"
	EmployeeExitService_GetExitRecordsByEmployee_FullMethodName = "/hrms.EmployeeExitService/GetExitRecordsByEmployee"
	EmployeeExitService_GetPendingClearances_FullMethodName     = "/hrms.EmployeeExitService/GetPendingClearances"
	EmployeeExitService_UpdateClearanceStatus_FullMethodName    = "/hrms.EmployeeExitService/UpdateClearanceStatus"
	EmployeeExitService_DeleteEmployeeExit_FullMethodName       = "/hrms.EmployeeExitService/DeleteEmployeeExit"
)

// EmployeeExitServiceClient is the client API for EmployeeExitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC Service for Employee Exits
type EmployeeExitServiceClient interface {
	CreateEmployeeExit(ctx context.Context, in *CreateEmployeeExitRequest, opts ...grpc.CallOption) (*EmployeeExitResponse, error)
	GetEmployeeExitByID(ctx context.Context, in *GetEmployeeExitByIDRequest, opts ...grpc.CallOption) (*EmployeeExitResponse, error)
	GetExitRecordsByEmployee(ctx context.Context, in *GetExitRecordsByEmployeeRequest, opts ...grpc.CallOption) (*ListEmployeeExitsResponse, error)
	GetPendingClearances(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListEmployeeExitsResponse, error)
	UpdateClearanceStatus(ctx context.Context, in *UpdateClearanceStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteEmployeeExit(ctx context.Context, in *DeleteEmployeeExitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type employeeExitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeExitServiceClient(cc grpc.ClientConnInterface) EmployeeExitServiceClient {
	return &employeeExitServiceClient{cc}
}

func (c *employeeExitServiceClient) CreateEmployeeExit(ctx context.Context, in *CreateEmployeeExitRequest, opts ...grpc.CallOption) (*EmployeeExitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeeExitResponse)
	err := c.cc.Invoke(ctx, EmployeeExitService_CreateEmployeeExit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeExitServiceClient) GetEmployeeExitByID(ctx context.Context, in *GetEmployeeExitByIDRequest, opts ...grpc.CallOption) (*EmployeeExitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeeExitResponse)
	err := c.cc.Invoke(ctx, EmployeeExitService_GetEmployeeExitByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeExitServiceClient) GetExitRecordsByEmployee(ctx context.Context, in *GetExitRecordsByEmployeeRequest, opts ...grpc.CallOption) (*ListEmployeeExitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmployeeExitsResponse)
	err := c.cc.Invoke(ctx, EmployeeExitService_GetExitRecordsByEmployee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeExitServiceClient) GetPendingClearances(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListEmployeeExitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmployeeExitsResponse)
	err := c.cc.Invoke(ctx, EmployeeExitService_GetPendingClearances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeExitServiceClient) UpdateClearanceStatus(ctx context.Context, in *UpdateClearanceStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EmployeeExitService_UpdateClearanceStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeExitServiceClient) DeleteEmployeeExit(ctx context.Context, in *DeleteEmployeeExitRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EmployeeExitService_DeleteEmployeeExit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeExitServiceServer is the server API for EmployeeExitService service.
// All implementations must embed UnimplementedEmployeeExitServiceServer
// for forward compatibility.
//
// gRPC Service for Employee Exits
type EmployeeExitServiceServer interface {
	CreateEmployeeExit(context.Context, *CreateEmployeeExitRequest) (*EmployeeExitResponse, error)
	GetEmployeeExitByID(context.Context, *GetEmployeeExitByIDRequest) (*EmployeeExitResponse, error)
	GetExitRecordsByEmployee(context.Context, *GetExitRecordsByEmployeeRequest) (*ListEmployeeExitsResponse, error)
	GetPendingClearances(context.Context, *emptypb.Empty) (*ListEmployeeExitsResponse, error)
	UpdateClearanceStatus(context.Context, *UpdateClearanceStatusRequest) (*emptypb.Empty, error)
	DeleteEmployeeExit(context.Context, *DeleteEmployeeExitRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedEmployeeExitServiceServer()
}

// UnimplementedEmployeeExitServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmployeeExitServiceServer struct{}

func (UnimplementedEmployeeExitServiceServer) CreateEmployeeExit(context.Context, *CreateEmployeeExitRequest) (*EmployeeExitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployeeExit not implemented")
}
func (UnimplementedEmployeeExitServiceServer) GetEmployeeExitByID(context.Context, *GetEmployeeExitByIDRequest) (*EmployeeExitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeExitByID not implemented")
}
func (UnimplementedEmployeeExitServiceServer) GetExitRecordsByEmployee(context.Context, *GetExitRecordsByEmployeeRequest) (*ListEmployeeExitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExitRecordsByEmployee not implemented")
}
func (UnimplementedEmployeeExitServiceServer) GetPendingClearances(context.Context, *emptypb.Empty) (*ListEmployeeExitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingClearances not implemented")
}
func (UnimplementedEmployeeExitServiceServer) UpdateClearanceStatus(context.Context, *UpdateClearanceStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClearanceStatus not implemented")
}
func (UnimplementedEmployeeExitServiceServer) DeleteEmployeeExit(context.Context, *DeleteEmployeeExitRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployeeExit not implemented")
}
func (UnimplementedEmployeeExitServiceServer) mustEmbedUnimplementedEmployeeExitServiceServer() {}
func (UnimplementedEmployeeExitServiceServer) testEmbeddedByValue()                             {}

// UnsafeEmployeeExitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeExitServiceServer will
// result in compilation errors.
type UnsafeEmployeeExitServiceServer interface {
	mustEmbedUnimplementedEmployeeExitServiceServer()
}

func RegisterEmployeeExitServiceServer(s grpc.ServiceRegistrar, srv EmployeeExitServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmployeeExitServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmployeeExitService_ServiceDesc, srv)
}

func _EmployeeExitService_CreateEmployeeExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmployeeExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeExitServiceServer).CreateEmployeeExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeExitService_CreateEmployeeExit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeExitServiceServer).CreateEmployeeExit(ctx, req.(*CreateEmployeeExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeExitService_GetEmployeeExitByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeExitByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeExitServiceServer).GetEmployeeExitByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeExitService_GetEmployeeExitByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeExitServiceServer).GetEmployeeExitByID(ctx, req.(*GetEmployeeExitByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeExitService_GetExitRecordsByEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExitRecordsByEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeExitServiceServer).GetExitRecordsByEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeExitService_GetExitRecordsByEmployee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeExitServiceServer).GetExitRecordsByEmployee(ctx, req.(*GetExitRecordsByEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeExitService_GetPendingClearances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeExitServiceServer).GetPendingClearances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeExitService_GetPendingClearances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeExitServiceServer).GetPendingClearances(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeExitService_UpdateClearanceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClearanceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeExitServiceServer).UpdateClearanceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeExitService_UpdateClearanceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeExitServiceServer).UpdateClearanceStatus(ctx, req.(*UpdateClearanceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeExitService_DeleteEmployeeExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmployeeExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeExitServiceServer).DeleteEmployeeExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeExitService_DeleteEmployeeExit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeExitServiceServer).DeleteEmployeeExit(ctx, req.(*DeleteEmployeeExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeExitService_ServiceDesc is the grpc.ServiceDesc for EmployeeExitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeExitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hrms.EmployeeExitService",
	HandlerType: (*EmployeeExitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmployeeExit",
			Handler:    _EmployeeExitService_CreateEmployeeExit_Handler,
		},
		{
			MethodName: "GetEmployeeExitByID",
			Handler:    _EmployeeExitService_GetEmployeeExitByID_Handler,
		},
		{
			MethodName: "GetExitRecordsByEmployee",
			Handler:    _EmployeeExitService_GetExitRecordsByEmployee_Handler,
		},
		{
			MethodName: "GetPendingClearances",
			Handler:    _EmployeeExitService_GetPendingClearances_Handler,
		},
		{
			MethodName: "UpdateClearanceStatus",
			Handler:    _EmployeeExitService_UpdateClearanceStatus_Handler,
		},
		{
			MethodName: "DeleteEmployeeExit",
			Handler:    _EmployeeExitService_DeleteEmployeeExit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/emp_exit.proto",
}
