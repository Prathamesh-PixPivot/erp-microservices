// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/loan_advance.proto

package hrms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoanAdvanceService_RequestLoanAdvance_FullMethodName = "/hrms.LoanAdvanceService/RequestLoanAdvance"
	LoanAdvanceService_ApproveLoanAdvance_FullMethodName = "/hrms.LoanAdvanceService/ApproveLoanAdvance"
	LoanAdvanceService_RejectLoanAdvance_FullMethodName  = "/hrms.LoanAdvanceService/RejectLoanAdvance"
	LoanAdvanceService_GetLoanAdvance_FullMethodName     = "/hrms.LoanAdvanceService/GetLoanAdvance"
	LoanAdvanceService_ListLoanAdvances_FullMethodName   = "/hrms.LoanAdvanceService/ListLoanAdvances"
	LoanAdvanceService_DeleteLoanAdvance_FullMethodName  = "/hrms.LoanAdvanceService/DeleteLoanAdvance"
)

// LoanAdvanceServiceClient is the client API for LoanAdvanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC Service for Loan Advance Management
type LoanAdvanceServiceClient interface {
	RequestLoanAdvance(ctx context.Context, in *RequestLoanAdvanceRequest, opts ...grpc.CallOption) (*LoanAdvanceResponse, error)
	ApproveLoanAdvance(ctx context.Context, in *ApproveLoanAdvanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RejectLoanAdvance(ctx context.Context, in *RejectLoanAdvanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetLoanAdvance(ctx context.Context, in *GetLoanAdvanceRequest, opts ...grpc.CallOption) (*LoanAdvanceResponse, error)
	ListLoanAdvances(ctx context.Context, in *ListLoanAdvancesRequest, opts ...grpc.CallOption) (*ListLoanAdvancesResponse, error)
	DeleteLoanAdvance(ctx context.Context, in *DeleteLoanAdvanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type loanAdvanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanAdvanceServiceClient(cc grpc.ClientConnInterface) LoanAdvanceServiceClient {
	return &loanAdvanceServiceClient{cc}
}

func (c *loanAdvanceServiceClient) RequestLoanAdvance(ctx context.Context, in *RequestLoanAdvanceRequest, opts ...grpc.CallOption) (*LoanAdvanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoanAdvanceResponse)
	err := c.cc.Invoke(ctx, LoanAdvanceService_RequestLoanAdvance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAdvanceServiceClient) ApproveLoanAdvance(ctx context.Context, in *ApproveLoanAdvanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LoanAdvanceService_ApproveLoanAdvance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAdvanceServiceClient) RejectLoanAdvance(ctx context.Context, in *RejectLoanAdvanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LoanAdvanceService_RejectLoanAdvance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAdvanceServiceClient) GetLoanAdvance(ctx context.Context, in *GetLoanAdvanceRequest, opts ...grpc.CallOption) (*LoanAdvanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoanAdvanceResponse)
	err := c.cc.Invoke(ctx, LoanAdvanceService_GetLoanAdvance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAdvanceServiceClient) ListLoanAdvances(ctx context.Context, in *ListLoanAdvancesRequest, opts ...grpc.CallOption) (*ListLoanAdvancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLoanAdvancesResponse)
	err := c.cc.Invoke(ctx, LoanAdvanceService_ListLoanAdvances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAdvanceServiceClient) DeleteLoanAdvance(ctx context.Context, in *DeleteLoanAdvanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LoanAdvanceService_DeleteLoanAdvance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanAdvanceServiceServer is the server API for LoanAdvanceService service.
// All implementations must embed UnimplementedLoanAdvanceServiceServer
// for forward compatibility.
//
// gRPC Service for Loan Advance Management
type LoanAdvanceServiceServer interface {
	RequestLoanAdvance(context.Context, *RequestLoanAdvanceRequest) (*LoanAdvanceResponse, error)
	ApproveLoanAdvance(context.Context, *ApproveLoanAdvanceRequest) (*emptypb.Empty, error)
	RejectLoanAdvance(context.Context, *RejectLoanAdvanceRequest) (*emptypb.Empty, error)
	GetLoanAdvance(context.Context, *GetLoanAdvanceRequest) (*LoanAdvanceResponse, error)
	ListLoanAdvances(context.Context, *ListLoanAdvancesRequest) (*ListLoanAdvancesResponse, error)
	DeleteLoanAdvance(context.Context, *DeleteLoanAdvanceRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedLoanAdvanceServiceServer()
}

// UnimplementedLoanAdvanceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoanAdvanceServiceServer struct{}

func (UnimplementedLoanAdvanceServiceServer) RequestLoanAdvance(context.Context, *RequestLoanAdvanceRequest) (*LoanAdvanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLoanAdvance not implemented")
}
func (UnimplementedLoanAdvanceServiceServer) ApproveLoanAdvance(context.Context, *ApproveLoanAdvanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveLoanAdvance not implemented")
}
func (UnimplementedLoanAdvanceServiceServer) RejectLoanAdvance(context.Context, *RejectLoanAdvanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectLoanAdvance not implemented")
}
func (UnimplementedLoanAdvanceServiceServer) GetLoanAdvance(context.Context, *GetLoanAdvanceRequest) (*LoanAdvanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoanAdvance not implemented")
}
func (UnimplementedLoanAdvanceServiceServer) ListLoanAdvances(context.Context, *ListLoanAdvancesRequest) (*ListLoanAdvancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoanAdvances not implemented")
}
func (UnimplementedLoanAdvanceServiceServer) DeleteLoanAdvance(context.Context, *DeleteLoanAdvanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoanAdvance not implemented")
}
func (UnimplementedLoanAdvanceServiceServer) mustEmbedUnimplementedLoanAdvanceServiceServer() {}
func (UnimplementedLoanAdvanceServiceServer) testEmbeddedByValue()                            {}

// UnsafeLoanAdvanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanAdvanceServiceServer will
// result in compilation errors.
type UnsafeLoanAdvanceServiceServer interface {
	mustEmbedUnimplementedLoanAdvanceServiceServer()
}

func RegisterLoanAdvanceServiceServer(s grpc.ServiceRegistrar, srv LoanAdvanceServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoanAdvanceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoanAdvanceService_ServiceDesc, srv)
}

func _LoanAdvanceService_RequestLoanAdvance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoanAdvanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAdvanceServiceServer).RequestLoanAdvance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAdvanceService_RequestLoanAdvance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAdvanceServiceServer).RequestLoanAdvance(ctx, req.(*RequestLoanAdvanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAdvanceService_ApproveLoanAdvance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveLoanAdvanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAdvanceServiceServer).ApproveLoanAdvance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAdvanceService_ApproveLoanAdvance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAdvanceServiceServer).ApproveLoanAdvance(ctx, req.(*ApproveLoanAdvanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAdvanceService_RejectLoanAdvance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectLoanAdvanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAdvanceServiceServer).RejectLoanAdvance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAdvanceService_RejectLoanAdvance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAdvanceServiceServer).RejectLoanAdvance(ctx, req.(*RejectLoanAdvanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAdvanceService_GetLoanAdvance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoanAdvanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAdvanceServiceServer).GetLoanAdvance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAdvanceService_GetLoanAdvance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAdvanceServiceServer).GetLoanAdvance(ctx, req.(*GetLoanAdvanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAdvanceService_ListLoanAdvances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoanAdvancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAdvanceServiceServer).ListLoanAdvances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAdvanceService_ListLoanAdvances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAdvanceServiceServer).ListLoanAdvances(ctx, req.(*ListLoanAdvancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAdvanceService_DeleteLoanAdvance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoanAdvanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAdvanceServiceServer).DeleteLoanAdvance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoanAdvanceService_DeleteLoanAdvance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAdvanceServiceServer).DeleteLoanAdvance(ctx, req.(*DeleteLoanAdvanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoanAdvanceService_ServiceDesc is the grpc.ServiceDesc for LoanAdvanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoanAdvanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hrms.LoanAdvanceService",
	HandlerType: (*LoanAdvanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestLoanAdvance",
			Handler:    _LoanAdvanceService_RequestLoanAdvance_Handler,
		},
		{
			MethodName: "ApproveLoanAdvance",
			Handler:    _LoanAdvanceService_ApproveLoanAdvance_Handler,
		},
		{
			MethodName: "RejectLoanAdvance",
			Handler:    _LoanAdvanceService_RejectLoanAdvance_Handler,
		},
		{
			MethodName: "GetLoanAdvance",
			Handler:    _LoanAdvanceService_GetLoanAdvance_Handler,
		},
		{
			MethodName: "ListLoanAdvances",
			Handler:    _LoanAdvanceService_ListLoanAdvances_Handler,
		},
		{
			MethodName: "DeleteLoanAdvance",
			Handler:    _LoanAdvanceService_DeleteLoanAdvance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/loan_advance.proto",
}
