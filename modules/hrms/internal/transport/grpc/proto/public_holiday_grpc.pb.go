// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/public_holiday.proto

package hrms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PublicHolidayService_CreatePublicHoliday_FullMethodName = "/hrms.PublicHolidayService/CreatePublicHoliday"
	PublicHolidayService_GetPublicHoliday_FullMethodName    = "/hrms.PublicHolidayService/GetPublicHoliday"
	PublicHolidayService_ListPublicHolidays_FullMethodName  = "/hrms.PublicHolidayService/ListPublicHolidays"
	PublicHolidayService_UpdatePublicHoliday_FullMethodName = "/hrms.PublicHolidayService/UpdatePublicHoliday"
	PublicHolidayService_DeletePublicHoliday_FullMethodName = "/hrms.PublicHolidayService/DeletePublicHoliday"
)

// PublicHolidayServiceClient is the client API for PublicHolidayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PublicHoliday service definition.
type PublicHolidayServiceClient interface {
	// Creates a new public holiday.
	CreatePublicHoliday(ctx context.Context, in *CreatePublicHolidayRequest, opts ...grpc.CallOption) (*PublicHolidayResponse, error)
	// Fetches a specific public holiday by ID.
	GetPublicHoliday(ctx context.Context, in *GetPublicHolidayRequest, opts ...grpc.CallOption) (*PublicHolidayResponse, error)
	// Retrieves all public holidays for an organization, with an optional year filter.
	ListPublicHolidays(ctx context.Context, in *ListPublicHolidaysRequest, opts ...grpc.CallOption) (*ListPublicHolidaysResponse, error)
	// Updates an existing public holiday.
	UpdatePublicHoliday(ctx context.Context, in *UpdatePublicHolidayRequest, opts ...grpc.CallOption) (*UpdatePublicHolidayResponse, error)
	// Deletes a public holiday.
	DeletePublicHoliday(ctx context.Context, in *DeletePublicHolidayRequest, opts ...grpc.CallOption) (*DeletePublicHolidayResponse, error)
}

type publicHolidayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicHolidayServiceClient(cc grpc.ClientConnInterface) PublicHolidayServiceClient {
	return &publicHolidayServiceClient{cc}
}

func (c *publicHolidayServiceClient) CreatePublicHoliday(ctx context.Context, in *CreatePublicHolidayRequest, opts ...grpc.CallOption) (*PublicHolidayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicHolidayResponse)
	err := c.cc.Invoke(ctx, PublicHolidayService_CreatePublicHoliday_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicHolidayServiceClient) GetPublicHoliday(ctx context.Context, in *GetPublicHolidayRequest, opts ...grpc.CallOption) (*PublicHolidayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublicHolidayResponse)
	err := c.cc.Invoke(ctx, PublicHolidayService_GetPublicHoliday_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicHolidayServiceClient) ListPublicHolidays(ctx context.Context, in *ListPublicHolidaysRequest, opts ...grpc.CallOption) (*ListPublicHolidaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPublicHolidaysResponse)
	err := c.cc.Invoke(ctx, PublicHolidayService_ListPublicHolidays_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicHolidayServiceClient) UpdatePublicHoliday(ctx context.Context, in *UpdatePublicHolidayRequest, opts ...grpc.CallOption) (*UpdatePublicHolidayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePublicHolidayResponse)
	err := c.cc.Invoke(ctx, PublicHolidayService_UpdatePublicHoliday_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicHolidayServiceClient) DeletePublicHoliday(ctx context.Context, in *DeletePublicHolidayRequest, opts ...grpc.CallOption) (*DeletePublicHolidayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePublicHolidayResponse)
	err := c.cc.Invoke(ctx, PublicHolidayService_DeletePublicHoliday_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicHolidayServiceServer is the server API for PublicHolidayService service.
// All implementations must embed UnimplementedPublicHolidayServiceServer
// for forward compatibility.
//
// PublicHoliday service definition.
type PublicHolidayServiceServer interface {
	// Creates a new public holiday.
	CreatePublicHoliday(context.Context, *CreatePublicHolidayRequest) (*PublicHolidayResponse, error)
	// Fetches a specific public holiday by ID.
	GetPublicHoliday(context.Context, *GetPublicHolidayRequest) (*PublicHolidayResponse, error)
	// Retrieves all public holidays for an organization, with an optional year filter.
	ListPublicHolidays(context.Context, *ListPublicHolidaysRequest) (*ListPublicHolidaysResponse, error)
	// Updates an existing public holiday.
	UpdatePublicHoliday(context.Context, *UpdatePublicHolidayRequest) (*UpdatePublicHolidayResponse, error)
	// Deletes a public holiday.
	DeletePublicHoliday(context.Context, *DeletePublicHolidayRequest) (*DeletePublicHolidayResponse, error)
	mustEmbedUnimplementedPublicHolidayServiceServer()
}

// UnimplementedPublicHolidayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPublicHolidayServiceServer struct{}

func (UnimplementedPublicHolidayServiceServer) CreatePublicHoliday(context.Context, *CreatePublicHolidayRequest) (*PublicHolidayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublicHoliday not implemented")
}
func (UnimplementedPublicHolidayServiceServer) GetPublicHoliday(context.Context, *GetPublicHolidayRequest) (*PublicHolidayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicHoliday not implemented")
}
func (UnimplementedPublicHolidayServiceServer) ListPublicHolidays(context.Context, *ListPublicHolidaysRequest) (*ListPublicHolidaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicHolidays not implemented")
}
func (UnimplementedPublicHolidayServiceServer) UpdatePublicHoliday(context.Context, *UpdatePublicHolidayRequest) (*UpdatePublicHolidayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublicHoliday not implemented")
}
func (UnimplementedPublicHolidayServiceServer) DeletePublicHoliday(context.Context, *DeletePublicHolidayRequest) (*DeletePublicHolidayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePublicHoliday not implemented")
}
func (UnimplementedPublicHolidayServiceServer) mustEmbedUnimplementedPublicHolidayServiceServer() {}
func (UnimplementedPublicHolidayServiceServer) testEmbeddedByValue()                              {}

// UnsafePublicHolidayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicHolidayServiceServer will
// result in compilation errors.
type UnsafePublicHolidayServiceServer interface {
	mustEmbedUnimplementedPublicHolidayServiceServer()
}

func RegisterPublicHolidayServiceServer(s grpc.ServiceRegistrar, srv PublicHolidayServiceServer) {
	// If the following call pancis, it indicates UnimplementedPublicHolidayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PublicHolidayService_ServiceDesc, srv)
}

func _PublicHolidayService_CreatePublicHoliday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePublicHolidayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicHolidayServiceServer).CreatePublicHoliday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicHolidayService_CreatePublicHoliday_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicHolidayServiceServer).CreatePublicHoliday(ctx, req.(*CreatePublicHolidayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicHolidayService_GetPublicHoliday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicHolidayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicHolidayServiceServer).GetPublicHoliday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicHolidayService_GetPublicHoliday_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicHolidayServiceServer).GetPublicHoliday(ctx, req.(*GetPublicHolidayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicHolidayService_ListPublicHolidays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicHolidaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicHolidayServiceServer).ListPublicHolidays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicHolidayService_ListPublicHolidays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicHolidayServiceServer).ListPublicHolidays(ctx, req.(*ListPublicHolidaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicHolidayService_UpdatePublicHoliday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePublicHolidayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicHolidayServiceServer).UpdatePublicHoliday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicHolidayService_UpdatePublicHoliday_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicHolidayServiceServer).UpdatePublicHoliday(ctx, req.(*UpdatePublicHolidayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicHolidayService_DeletePublicHoliday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePublicHolidayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicHolidayServiceServer).DeletePublicHoliday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicHolidayService_DeletePublicHoliday_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicHolidayServiceServer).DeletePublicHoliday(ctx, req.(*DeletePublicHolidayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PublicHolidayService_ServiceDesc is the grpc.ServiceDesc for PublicHolidayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicHolidayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hrms.PublicHolidayService",
	HandlerType: (*PublicHolidayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePublicHoliday",
			Handler:    _PublicHolidayService_CreatePublicHoliday_Handler,
		},
		{
			MethodName: "GetPublicHoliday",
			Handler:    _PublicHolidayService_GetPublicHoliday_Handler,
		},
		{
			MethodName: "ListPublicHolidays",
			Handler:    _PublicHolidayService_ListPublicHolidays_Handler,
		},
		{
			MethodName: "UpdatePublicHoliday",
			Handler:    _PublicHolidayService_UpdatePublicHoliday_Handler,
		},
		{
			MethodName: "DeletePublicHoliday",
			Handler:    _PublicHolidayService_DeletePublicHoliday_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/public_holiday.proto",
}
