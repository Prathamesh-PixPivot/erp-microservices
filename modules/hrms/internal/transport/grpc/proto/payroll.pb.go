// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: proto/payroll.proto

package hrms

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Payroll model
type Payroll struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	EmployeeId        uint64                 `protobuf:"varint,2,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	Salary            float64                `protobuf:"fixed64,3,opt,name=salary,proto3" json:"salary,omitempty"`
	Tax               float64                `protobuf:"fixed64,4,opt,name=tax,proto3" json:"tax,omitempty"`
	Allowances        float64                `protobuf:"fixed64,5,opt,name=allowances,proto3" json:"allowances,omitempty"`
	Deductions        float64                `protobuf:"fixed64,6,opt,name=deductions,proto3" json:"deductions,omitempty"`
	NetSalary         float64                `protobuf:"fixed64,7,opt,name=net_salary,json=netSalary,proto3" json:"net_salary,omitempty"`
	PaymentDate       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	Status            string                 `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	PayslipUrl        string                 `protobuf:"bytes,10,opt,name=payslip_url,json=payslipUrl,proto3" json:"payslip_url,omitempty"`
	BankName          string                 `protobuf:"bytes,11,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	BankAccountNumber string                 `protobuf:"bytes,12,opt,name=bank_account_number,json=bankAccountNumber,proto3" json:"bank_account_number,omitempty"`
	BranchCode        string                 `protobuf:"bytes,13,opt,name=branch_code,json=branchCode,proto3" json:"branch_code,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Payroll) Reset() {
	*x = Payroll{}
	mi := &file_proto_payroll_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Payroll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payroll) ProtoMessage() {}

func (x *Payroll) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payroll_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payroll.ProtoReflect.Descriptor instead.
func (*Payroll) Descriptor() ([]byte, []int) {
	return file_proto_payroll_proto_rawDescGZIP(), []int{0}
}

func (x *Payroll) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Payroll) GetEmployeeId() uint64 {
	if x != nil {
		return x.EmployeeId
	}
	return 0
}

func (x *Payroll) GetSalary() float64 {
	if x != nil {
		return x.Salary
	}
	return 0
}

func (x *Payroll) GetTax() float64 {
	if x != nil {
		return x.Tax
	}
	return 0
}

func (x *Payroll) GetAllowances() float64 {
	if x != nil {
		return x.Allowances
	}
	return 0
}

func (x *Payroll) GetDeductions() float64 {
	if x != nil {
		return x.Deductions
	}
	return 0
}

func (x *Payroll) GetNetSalary() float64 {
	if x != nil {
		return x.NetSalary
	}
	return 0
}

func (x *Payroll) GetPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *Payroll) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Payroll) GetPayslipUrl() string {
	if x != nil {
		return x.PayslipUrl
	}
	return ""
}

func (x *Payroll) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *Payroll) GetBankAccountNumber() string {
	if x != nil {
		return x.BankAccountNumber
	}
	return ""
}

func (x *Payroll) GetBranchCode() string {
	if x != nil {
		return x.BranchCode
	}
	return ""
}

func (x *Payroll) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Payroll) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Request for creating a payroll entry
type CreatePayrollRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	EmployeeId        uint64                 `protobuf:"varint,1,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	Salary            float64                `protobuf:"fixed64,2,opt,name=salary,proto3" json:"salary,omitempty"`
	Tax               float64                `protobuf:"fixed64,3,opt,name=tax,proto3" json:"tax,omitempty"`
	Allowances        float64                `protobuf:"fixed64,4,opt,name=allowances,proto3" json:"allowances,omitempty"`
	Deductions        float64                `protobuf:"fixed64,5,opt,name=deductions,proto3" json:"deductions,omitempty"`
	NetSalary         float64                `protobuf:"fixed64,6,opt,name=net_salary,json=netSalary,proto3" json:"net_salary,omitempty"`
	PaymentDate       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=payment_date,json=paymentDate,proto3" json:"payment_date,omitempty"`
	Status            string                 `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	PayslipUrl        string                 `protobuf:"bytes,9,opt,name=payslip_url,json=payslipUrl,proto3" json:"payslip_url,omitempty"`
	BankName          string                 `protobuf:"bytes,10,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	BankAccountNumber string                 `protobuf:"bytes,11,opt,name=bank_account_number,json=bankAccountNumber,proto3" json:"bank_account_number,omitempty"`
	BranchCode        string                 `protobuf:"bytes,12,opt,name=branch_code,json=branchCode,proto3" json:"branch_code,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreatePayrollRequest) Reset() {
	*x = CreatePayrollRequest{}
	mi := &file_proto_payroll_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePayrollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePayrollRequest) ProtoMessage() {}

func (x *CreatePayrollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payroll_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePayrollRequest.ProtoReflect.Descriptor instead.
func (*CreatePayrollRequest) Descriptor() ([]byte, []int) {
	return file_proto_payroll_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePayrollRequest) GetEmployeeId() uint64 {
	if x != nil {
		return x.EmployeeId
	}
	return 0
}

func (x *CreatePayrollRequest) GetSalary() float64 {
	if x != nil {
		return x.Salary
	}
	return 0
}

func (x *CreatePayrollRequest) GetTax() float64 {
	if x != nil {
		return x.Tax
	}
	return 0
}

func (x *CreatePayrollRequest) GetAllowances() float64 {
	if x != nil {
		return x.Allowances
	}
	return 0
}

func (x *CreatePayrollRequest) GetDeductions() float64 {
	if x != nil {
		return x.Deductions
	}
	return 0
}

func (x *CreatePayrollRequest) GetNetSalary() float64 {
	if x != nil {
		return x.NetSalary
	}
	return 0
}

func (x *CreatePayrollRequest) GetPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *CreatePayrollRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CreatePayrollRequest) GetPayslipUrl() string {
	if x != nil {
		return x.PayslipUrl
	}
	return ""
}

func (x *CreatePayrollRequest) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *CreatePayrollRequest) GetBankAccountNumber() string {
	if x != nil {
		return x.BankAccountNumber
	}
	return ""
}

func (x *CreatePayrollRequest) GetBranchCode() string {
	if x != nil {
		return x.BranchCode
	}
	return ""
}

// Response containing payroll details
type PayrollResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payroll       *Payroll               `protobuf:"bytes,1,opt,name=payroll,proto3" json:"payroll,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayrollResponse) Reset() {
	*x = PayrollResponse{}
	mi := &file_proto_payroll_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayrollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayrollResponse) ProtoMessage() {}

func (x *PayrollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payroll_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayrollResponse.ProtoReflect.Descriptor instead.
func (*PayrollResponse) Descriptor() ([]byte, []int) {
	return file_proto_payroll_proto_rawDescGZIP(), []int{2}
}

func (x *PayrollResponse) GetPayroll() *Payroll {
	if x != nil {
		return x.Payroll
	}
	return nil
}

// Request for fetching a payroll record by ID
type GetPayrollRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayrollId     uint64                 `protobuf:"varint,1,opt,name=payroll_id,json=payrollId,proto3" json:"payroll_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPayrollRequest) Reset() {
	*x = GetPayrollRequest{}
	mi := &file_proto_payroll_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPayrollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPayrollRequest) ProtoMessage() {}

func (x *GetPayrollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payroll_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPayrollRequest.ProtoReflect.Descriptor instead.
func (*GetPayrollRequest) Descriptor() ([]byte, []int) {
	return file_proto_payroll_proto_rawDescGZIP(), []int{3}
}

func (x *GetPayrollRequest) GetPayrollId() uint64 {
	if x != nil {
		return x.PayrollId
	}
	return 0
}

// Request for listing payroll records with optional filters
type ListPayrollsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EmployeeId    uint64                 `protobuf:"varint,1,opt,name=employee_id,json=employeeId,proto3" json:"employee_id,omitempty"`
	Month         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=month,proto3" json:"month,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32                  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPayrollsRequest) Reset() {
	*x = ListPayrollsRequest{}
	mi := &file_proto_payroll_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPayrollsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPayrollsRequest) ProtoMessage() {}

func (x *ListPayrollsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payroll_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPayrollsRequest.ProtoReflect.Descriptor instead.
func (*ListPayrollsRequest) Descriptor() ([]byte, []int) {
	return file_proto_payroll_proto_rawDescGZIP(), []int{4}
}

func (x *ListPayrollsRequest) GetEmployeeId() uint64 {
	if x != nil {
		return x.EmployeeId
	}
	return 0
}

func (x *ListPayrollsRequest) GetMonth() *timestamppb.Timestamp {
	if x != nil {
		return x.Month
	}
	return nil
}

func (x *ListPayrollsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListPayrollsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// Response containing a paginated list of payrolls
type ListPayrollsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Total         int32                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Payrolls      []*Payroll             `protobuf:"bytes,4,rep,name=payrolls,proto3" json:"payrolls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPayrollsResponse) Reset() {
	*x = ListPayrollsResponse{}
	mi := &file_proto_payroll_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPayrollsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPayrollsResponse) ProtoMessage() {}

func (x *ListPayrollsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payroll_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPayrollsResponse.ProtoReflect.Descriptor instead.
func (*ListPayrollsResponse) Descriptor() ([]byte, []int) {
	return file_proto_payroll_proto_rawDescGZIP(), []int{5}
}

func (x *ListPayrollsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListPayrollsResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListPayrollsResponse) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListPayrollsResponse) GetPayrolls() []*Payroll {
	if x != nil {
		return x.Payrolls
	}
	return nil
}

// Request for updating a payroll entry
type UpdatePayrollRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayrollId     uint64                 `protobuf:"varint,1,opt,name=payroll_id,json=payrollId,proto3" json:"payroll_id,omitempty"`
	Status        *string                `protobuf:"bytes,2,opt,name=status,proto3,oneof" json:"status,omitempty"`
	PayslipUrl    *string                `protobuf:"bytes,3,opt,name=payslip_url,json=payslipUrl,proto3,oneof" json:"payslip_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePayrollRequest) Reset() {
	*x = UpdatePayrollRequest{}
	mi := &file_proto_payroll_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePayrollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePayrollRequest) ProtoMessage() {}

func (x *UpdatePayrollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payroll_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePayrollRequest.ProtoReflect.Descriptor instead.
func (*UpdatePayrollRequest) Descriptor() ([]byte, []int) {
	return file_proto_payroll_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePayrollRequest) GetPayrollId() uint64 {
	if x != nil {
		return x.PayrollId
	}
	return 0
}

func (x *UpdatePayrollRequest) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *UpdatePayrollRequest) GetPayslipUrl() string {
	if x != nil && x.PayslipUrl != nil {
		return *x.PayslipUrl
	}
	return ""
}

// Request for deleting a payroll record
type DeletePayrollRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PayrollId     uint64                 `protobuf:"varint,1,opt,name=payroll_id,json=payrollId,proto3" json:"payroll_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePayrollRequest) Reset() {
	*x = DeletePayrollRequest{}
	mi := &file_proto_payroll_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePayrollRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePayrollRequest) ProtoMessage() {}

func (x *DeletePayrollRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_payroll_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePayrollRequest.ProtoReflect.Descriptor instead.
func (*DeletePayrollRequest) Descriptor() ([]byte, []int) {
	return file_proto_payroll_proto_rawDescGZIP(), []int{7}
}

func (x *DeletePayrollRequest) GetPayrollId() uint64 {
	if x != nil {
		return x.PayrollId
	}
	return 0
}

var File_proto_payroll_proto protoreflect.FileDescriptor

var file_proto_payroll_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x68, 0x72, 0x6d, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x04, 0x0a, 0x07, 0x50, 0x61,
	0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x61, 0x78,
	0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x12,
	0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x73, 0x6c, 0x69,
	0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79,
	0x73, 0x6c, 0x69, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa6, 0x03, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x74, 0x61, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x3d,
	0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x73, 0x6c, 0x69, 0x70,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x73,
	0x6c, 0x69, 0x70, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x72, 0x6f,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x72, 0x6d, 0x73, 0x2e,
	0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c,
	0x22, 0x32, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x79, 0x72, 0x6f,
	0x6c, 0x6c, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79,
	0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x85, 0x01,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61,
	0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68,
	0x72, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x08, 0x70, 0x61, 0x79,
	0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61,
	0x79, 0x73, 0x6c, 0x69, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x73, 0x6c, 0x69, 0x70, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x61, 0x79, 0x73, 0x6c, 0x69, 0x70, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x35, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c,
	0x49, 0x64, 0x32, 0xe3, 0x02, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x1a, 0x2e, 0x68, 0x72, 0x6d, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x68, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x17, 0x2e, 0x68, 0x72, 0x6d, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x68, 0x72, 0x6d, 0x73, 0x2e, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x19, 0x2e, 0x68, 0x72, 0x6d, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x72, 0x6d, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61,
	0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x12,
	0x1a, 0x2e, 0x68, 0x72, 0x6d, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x79,
	0x72, 0x6f, 0x6c, 0x6c, 0x12, 0x1a, 0x2e, 0x68, 0x72, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x61, 0x79, 0x72, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x11, 0x5a, 0x0f, 0x68, 0x72, 0x6d, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x68, 0x72, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_proto_payroll_proto_rawDescOnce sync.Once
	file_proto_payroll_proto_rawDescData []byte
)

func file_proto_payroll_proto_rawDescGZIP() []byte {
	file_proto_payroll_proto_rawDescOnce.Do(func() {
		file_proto_payroll_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_payroll_proto_rawDesc), len(file_proto_payroll_proto_rawDesc)))
	})
	return file_proto_payroll_proto_rawDescData
}

var file_proto_payroll_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_payroll_proto_goTypes = []any{
	(*Payroll)(nil),               // 0: hrms.Payroll
	(*CreatePayrollRequest)(nil),  // 1: hrms.CreatePayrollRequest
	(*PayrollResponse)(nil),       // 2: hrms.PayrollResponse
	(*GetPayrollRequest)(nil),     // 3: hrms.GetPayrollRequest
	(*ListPayrollsRequest)(nil),   // 4: hrms.ListPayrollsRequest
	(*ListPayrollsResponse)(nil),  // 5: hrms.ListPayrollsResponse
	(*UpdatePayrollRequest)(nil),  // 6: hrms.UpdatePayrollRequest
	(*DeletePayrollRequest)(nil),  // 7: hrms.DeletePayrollRequest
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),         // 9: google.protobuf.Empty
}
var file_proto_payroll_proto_depIdxs = []int32{
	8,  // 0: hrms.Payroll.payment_date:type_name -> google.protobuf.Timestamp
	8,  // 1: hrms.Payroll.created_at:type_name -> google.protobuf.Timestamp
	8,  // 2: hrms.Payroll.updated_at:type_name -> google.protobuf.Timestamp
	8,  // 3: hrms.CreatePayrollRequest.payment_date:type_name -> google.protobuf.Timestamp
	0,  // 4: hrms.PayrollResponse.payroll:type_name -> hrms.Payroll
	8,  // 5: hrms.ListPayrollsRequest.month:type_name -> google.protobuf.Timestamp
	0,  // 6: hrms.ListPayrollsResponse.payrolls:type_name -> hrms.Payroll
	1,  // 7: hrms.PayrollService.CreatePayroll:input_type -> hrms.CreatePayrollRequest
	3,  // 8: hrms.PayrollService.GetPayroll:input_type -> hrms.GetPayrollRequest
	4,  // 9: hrms.PayrollService.ListPayrolls:input_type -> hrms.ListPayrollsRequest
	6,  // 10: hrms.PayrollService.UpdatePayroll:input_type -> hrms.UpdatePayrollRequest
	7,  // 11: hrms.PayrollService.DeletePayroll:input_type -> hrms.DeletePayrollRequest
	2,  // 12: hrms.PayrollService.CreatePayroll:output_type -> hrms.PayrollResponse
	2,  // 13: hrms.PayrollService.GetPayroll:output_type -> hrms.PayrollResponse
	5,  // 14: hrms.PayrollService.ListPayrolls:output_type -> hrms.ListPayrollsResponse
	9,  // 15: hrms.PayrollService.UpdatePayroll:output_type -> google.protobuf.Empty
	9,  // 16: hrms.PayrollService.DeletePayroll:output_type -> google.protobuf.Empty
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_proto_payroll_proto_init() }
func file_proto_payroll_proto_init() {
	if File_proto_payroll_proto != nil {
		return
	}
	file_proto_payroll_proto_msgTypes[6].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_payroll_proto_rawDesc), len(file_proto_payroll_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_payroll_proto_goTypes,
		DependencyIndexes: file_proto_payroll_proto_depIdxs,
		MessageInfos:      file_proto_payroll_proto_msgTypes,
	}.Build()
	File_proto_payroll_proto = out.File
	file_proto_payroll_proto_goTypes = nil
	file_proto_payroll_proto_depIdxs = nil
}
