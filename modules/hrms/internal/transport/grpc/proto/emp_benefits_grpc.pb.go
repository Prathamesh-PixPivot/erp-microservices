// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/emp_benefits.proto

package hrms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmployeeBenefitService_CreateEmployeeBenefits_FullMethodName = "/hrms.EmployeeBenefitService/CreateEmployeeBenefits"
	EmployeeBenefitService_GetEmployeeBenefits_FullMethodName    = "/hrms.EmployeeBenefitService/GetEmployeeBenefits"
	EmployeeBenefitService_UpdateEmployeeBenefits_FullMethodName = "/hrms.EmployeeBenefitService/UpdateEmployeeBenefits"
	EmployeeBenefitService_DeleteEmployeeBenefits_FullMethodName = "/hrms.EmployeeBenefitService/DeleteEmployeeBenefits"
	EmployeeBenefitService_ListEmployeeBenefits_FullMethodName   = "/hrms.EmployeeBenefitService/ListEmployeeBenefits"
)

// EmployeeBenefitServiceClient is the client API for EmployeeBenefitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeBenefitServiceClient interface {
	CreateEmployeeBenefits(ctx context.Context, in *CreateEmployeeBenefitsRequest, opts ...grpc.CallOption) (*EmployeeBenefitsDTO, error)
	GetEmployeeBenefits(ctx context.Context, in *GetEmployeeBenefitsRequest, opts ...grpc.CallOption) (*EmployeeBenefitsDTO, error)
	UpdateEmployeeBenefits(ctx context.Context, in *UpdateEmployeeBenefitsRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	DeleteEmployeeBenefits(ctx context.Context, in *DeleteEmployeeBenefitsRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	ListEmployeeBenefits(ctx context.Context, in *ListEmployeeBenefitsRequest, opts ...grpc.CallOption) (*ListEmployeeBenefitsResponse, error)
}

type employeeBenefitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeBenefitServiceClient(cc grpc.ClientConnInterface) EmployeeBenefitServiceClient {
	return &employeeBenefitServiceClient{cc}
}

func (c *employeeBenefitServiceClient) CreateEmployeeBenefits(ctx context.Context, in *CreateEmployeeBenefitsRequest, opts ...grpc.CallOption) (*EmployeeBenefitsDTO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeeBenefitsDTO)
	err := c.cc.Invoke(ctx, EmployeeBenefitService_CreateEmployeeBenefits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeBenefitServiceClient) GetEmployeeBenefits(ctx context.Context, in *GetEmployeeBenefitsRequest, opts ...grpc.CallOption) (*EmployeeBenefitsDTO, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeeBenefitsDTO)
	err := c.cc.Invoke(ctx, EmployeeBenefitService_GetEmployeeBenefits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeBenefitServiceClient) UpdateEmployeeBenefits(ctx context.Context, in *UpdateEmployeeBenefitsRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, EmployeeBenefitService_UpdateEmployeeBenefits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeBenefitServiceClient) DeleteEmployeeBenefits(ctx context.Context, in *DeleteEmployeeBenefitsRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, EmployeeBenefitService_DeleteEmployeeBenefits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeBenefitServiceClient) ListEmployeeBenefits(ctx context.Context, in *ListEmployeeBenefitsRequest, opts ...grpc.CallOption) (*ListEmployeeBenefitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmployeeBenefitsResponse)
	err := c.cc.Invoke(ctx, EmployeeBenefitService_ListEmployeeBenefits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeBenefitServiceServer is the server API for EmployeeBenefitService service.
// All implementations must embed UnimplementedEmployeeBenefitServiceServer
// for forward compatibility.
type EmployeeBenefitServiceServer interface {
	CreateEmployeeBenefits(context.Context, *CreateEmployeeBenefitsRequest) (*EmployeeBenefitsDTO, error)
	GetEmployeeBenefits(context.Context, *GetEmployeeBenefitsRequest) (*EmployeeBenefitsDTO, error)
	UpdateEmployeeBenefits(context.Context, *UpdateEmployeeBenefitsRequest) (*EmptyResponse, error)
	DeleteEmployeeBenefits(context.Context, *DeleteEmployeeBenefitsRequest) (*EmptyResponse, error)
	ListEmployeeBenefits(context.Context, *ListEmployeeBenefitsRequest) (*ListEmployeeBenefitsResponse, error)
	mustEmbedUnimplementedEmployeeBenefitServiceServer()
}

// UnimplementedEmployeeBenefitServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmployeeBenefitServiceServer struct{}

func (UnimplementedEmployeeBenefitServiceServer) CreateEmployeeBenefits(context.Context, *CreateEmployeeBenefitsRequest) (*EmployeeBenefitsDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployeeBenefits not implemented")
}
func (UnimplementedEmployeeBenefitServiceServer) GetEmployeeBenefits(context.Context, *GetEmployeeBenefitsRequest) (*EmployeeBenefitsDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeBenefits not implemented")
}
func (UnimplementedEmployeeBenefitServiceServer) UpdateEmployeeBenefits(context.Context, *UpdateEmployeeBenefitsRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployeeBenefits not implemented")
}
func (UnimplementedEmployeeBenefitServiceServer) DeleteEmployeeBenefits(context.Context, *DeleteEmployeeBenefitsRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployeeBenefits not implemented")
}
func (UnimplementedEmployeeBenefitServiceServer) ListEmployeeBenefits(context.Context, *ListEmployeeBenefitsRequest) (*ListEmployeeBenefitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmployeeBenefits not implemented")
}
func (UnimplementedEmployeeBenefitServiceServer) mustEmbedUnimplementedEmployeeBenefitServiceServer() {
}
func (UnimplementedEmployeeBenefitServiceServer) testEmbeddedByValue() {}

// UnsafeEmployeeBenefitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeBenefitServiceServer will
// result in compilation errors.
type UnsafeEmployeeBenefitServiceServer interface {
	mustEmbedUnimplementedEmployeeBenefitServiceServer()
}

func RegisterEmployeeBenefitServiceServer(s grpc.ServiceRegistrar, srv EmployeeBenefitServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmployeeBenefitServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmployeeBenefitService_ServiceDesc, srv)
}

func _EmployeeBenefitService_CreateEmployeeBenefits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmployeeBenefitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeBenefitServiceServer).CreateEmployeeBenefits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeBenefitService_CreateEmployeeBenefits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeBenefitServiceServer).CreateEmployeeBenefits(ctx, req.(*CreateEmployeeBenefitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeBenefitService_GetEmployeeBenefits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeBenefitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeBenefitServiceServer).GetEmployeeBenefits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeBenefitService_GetEmployeeBenefits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeBenefitServiceServer).GetEmployeeBenefits(ctx, req.(*GetEmployeeBenefitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeBenefitService_UpdateEmployeeBenefits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmployeeBenefitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeBenefitServiceServer).UpdateEmployeeBenefits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeBenefitService_UpdateEmployeeBenefits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeBenefitServiceServer).UpdateEmployeeBenefits(ctx, req.(*UpdateEmployeeBenefitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeBenefitService_DeleteEmployeeBenefits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmployeeBenefitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeBenefitServiceServer).DeleteEmployeeBenefits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeBenefitService_DeleteEmployeeBenefits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeBenefitServiceServer).DeleteEmployeeBenefits(ctx, req.(*DeleteEmployeeBenefitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeBenefitService_ListEmployeeBenefits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmployeeBenefitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeBenefitServiceServer).ListEmployeeBenefits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeeBenefitService_ListEmployeeBenefits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeBenefitServiceServer).ListEmployeeBenefits(ctx, req.(*ListEmployeeBenefitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeBenefitService_ServiceDesc is the grpc.ServiceDesc for EmployeeBenefitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeBenefitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hrms.EmployeeBenefitService",
	HandlerType: (*EmployeeBenefitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmployeeBenefits",
			Handler:    _EmployeeBenefitService_CreateEmployeeBenefits_Handler,
		},
		{
			MethodName: "GetEmployeeBenefits",
			Handler:    _EmployeeBenefitService_GetEmployeeBenefits_Handler,
		},
		{
			MethodName: "UpdateEmployeeBenefits",
			Handler:    _EmployeeBenefitService_UpdateEmployeeBenefits_Handler,
		},
		{
			MethodName: "DeleteEmployeeBenefits",
			Handler:    _EmployeeBenefitService_DeleteEmployeeBenefits_Handler,
		},
		{
			MethodName: "ListEmployeeBenefits",
			Handler:    _EmployeeBenefitService_ListEmployeeBenefits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/emp_benefits.proto",
}
