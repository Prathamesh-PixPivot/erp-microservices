// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/emp_perk.proto

package hrms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EmployeePerkService_CreateEmployeePerk_FullMethodName = "/hrms.EmployeePerkService/CreateEmployeePerk"
	EmployeePerkService_GetEmployeePerks_FullMethodName   = "/hrms.EmployeePerkService/GetEmployeePerks"
	EmployeePerkService_UpdateEmployeePerk_FullMethodName = "/hrms.EmployeePerkService/UpdateEmployeePerk"
	EmployeePerkService_DeleteEmployeePerk_FullMethodName = "/hrms.EmployeePerkService/DeleteEmployeePerk"
)

// EmployeePerkServiceClient is the client API for EmployeePerkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC Service for Employee Perks
type EmployeePerkServiceClient interface {
	CreateEmployeePerk(ctx context.Context, in *CreateEmployeePerkRequest, opts ...grpc.CallOption) (*EmployeePerkResponse, error)
	GetEmployeePerks(ctx context.Context, in *GetEmployeePerksRequest, opts ...grpc.CallOption) (*ListEmployeePerksResponse, error)
	UpdateEmployeePerk(ctx context.Context, in *UpdateEmployeePerkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteEmployeePerk(ctx context.Context, in *DeleteEmployeePerkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type employeePerkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeePerkServiceClient(cc grpc.ClientConnInterface) EmployeePerkServiceClient {
	return &employeePerkServiceClient{cc}
}

func (c *employeePerkServiceClient) CreateEmployeePerk(ctx context.Context, in *CreateEmployeePerkRequest, opts ...grpc.CallOption) (*EmployeePerkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmployeePerkResponse)
	err := c.cc.Invoke(ctx, EmployeePerkService_CreateEmployeePerk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeePerkServiceClient) GetEmployeePerks(ctx context.Context, in *GetEmployeePerksRequest, opts ...grpc.CallOption) (*ListEmployeePerksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmployeePerksResponse)
	err := c.cc.Invoke(ctx, EmployeePerkService_GetEmployeePerks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeePerkServiceClient) UpdateEmployeePerk(ctx context.Context, in *UpdateEmployeePerkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EmployeePerkService_UpdateEmployeePerk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeePerkServiceClient) DeleteEmployeePerk(ctx context.Context, in *DeleteEmployeePerkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EmployeePerkService_DeleteEmployeePerk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeePerkServiceServer is the server API for EmployeePerkService service.
// All implementations must embed UnimplementedEmployeePerkServiceServer
// for forward compatibility.
//
// gRPC Service for Employee Perks
type EmployeePerkServiceServer interface {
	CreateEmployeePerk(context.Context, *CreateEmployeePerkRequest) (*EmployeePerkResponse, error)
	GetEmployeePerks(context.Context, *GetEmployeePerksRequest) (*ListEmployeePerksResponse, error)
	UpdateEmployeePerk(context.Context, *UpdateEmployeePerkRequest) (*emptypb.Empty, error)
	DeleteEmployeePerk(context.Context, *DeleteEmployeePerkRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedEmployeePerkServiceServer()
}

// UnimplementedEmployeePerkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEmployeePerkServiceServer struct{}

func (UnimplementedEmployeePerkServiceServer) CreateEmployeePerk(context.Context, *CreateEmployeePerkRequest) (*EmployeePerkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployeePerk not implemented")
}
func (UnimplementedEmployeePerkServiceServer) GetEmployeePerks(context.Context, *GetEmployeePerksRequest) (*ListEmployeePerksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeePerks not implemented")
}
func (UnimplementedEmployeePerkServiceServer) UpdateEmployeePerk(context.Context, *UpdateEmployeePerkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployeePerk not implemented")
}
func (UnimplementedEmployeePerkServiceServer) DeleteEmployeePerk(context.Context, *DeleteEmployeePerkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployeePerk not implemented")
}
func (UnimplementedEmployeePerkServiceServer) mustEmbedUnimplementedEmployeePerkServiceServer() {}
func (UnimplementedEmployeePerkServiceServer) testEmbeddedByValue()                             {}

// UnsafeEmployeePerkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeePerkServiceServer will
// result in compilation errors.
type UnsafeEmployeePerkServiceServer interface {
	mustEmbedUnimplementedEmployeePerkServiceServer()
}

func RegisterEmployeePerkServiceServer(s grpc.ServiceRegistrar, srv EmployeePerkServiceServer) {
	// If the following call pancis, it indicates UnimplementedEmployeePerkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EmployeePerkService_ServiceDesc, srv)
}

func _EmployeePerkService_CreateEmployeePerk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmployeePerkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeePerkServiceServer).CreateEmployeePerk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeePerkService_CreateEmployeePerk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeePerkServiceServer).CreateEmployeePerk(ctx, req.(*CreateEmployeePerkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeePerkService_GetEmployeePerks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeePerksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeePerkServiceServer).GetEmployeePerks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeePerkService_GetEmployeePerks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeePerkServiceServer).GetEmployeePerks(ctx, req.(*GetEmployeePerksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeePerkService_UpdateEmployeePerk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmployeePerkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeePerkServiceServer).UpdateEmployeePerk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeePerkService_UpdateEmployeePerk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeePerkServiceServer).UpdateEmployeePerk(ctx, req.(*UpdateEmployeePerkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeePerkService_DeleteEmployeePerk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmployeePerkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeePerkServiceServer).DeleteEmployeePerk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmployeePerkService_DeleteEmployeePerk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeePerkServiceServer).DeleteEmployeePerk(ctx, req.(*DeleteEmployeePerkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeePerkService_ServiceDesc is the grpc.ServiceDesc for EmployeePerkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeePerkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hrms.EmployeePerkService",
	HandlerType: (*EmployeePerkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmployeePerk",
			Handler:    _EmployeePerkService_CreateEmployeePerk_Handler,
		},
		{
			MethodName: "GetEmployeePerks",
			Handler:    _EmployeePerkService_GetEmployeePerks_Handler,
		},
		{
			MethodName: "UpdateEmployeePerk",
			Handler:    _EmployeePerkService_UpdateEmployeePerk_Handler,
		},
		{
			MethodName: "DeleteEmployeePerk",
			Handler:    _EmployeePerkService_DeleteEmployeePerk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/emp_perk.proto",
}
