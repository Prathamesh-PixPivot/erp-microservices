// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: internal/api/protobufs/gstr1a.proto

package protobufs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GSTR1AService_SaveGSTR1A_FullMethodName      = "/GSTR1AService/SaveGSTR1A"
	GSTR1AService_SubmitGSTR1A_FullMethodName    = "/GSTR1AService/SubmitGSTR1A"
	GSTR1AService_FileGSTR1A_FullMethodName      = "/GSTR1AService/FileGSTR1A"
	GSTR1AService_GetGSTR1AStatus_FullMethodName = "/GSTR1AService/GetGSTR1AStatus"
)

// GSTR1AServiceClient is the client API for GSTR1AService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GSTR1AServiceClient interface {
	SaveGSTR1A(ctx context.Context, in *GSTR1ARequest, opts ...grpc.CallOption) (*GSTR1AResponse, error)
	SubmitGSTR1A(ctx context.Context, in *GSTR1ASubmitRequest, opts ...grpc.CallOption) (*GSTR1ASubmitResponse, error)
	FileGSTR1A(ctx context.Context, in *GSTR1AFileRequest, opts ...grpc.CallOption) (*GSTR1AFileResponse, error)
	GetGSTR1AStatus(ctx context.Context, in *GSTR1AStatusRequest, opts ...grpc.CallOption) (*GSTR1AStatusResponse, error)
}

type gSTR1AServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGSTR1AServiceClient(cc grpc.ClientConnInterface) GSTR1AServiceClient {
	return &gSTR1AServiceClient{cc}
}

func (c *gSTR1AServiceClient) SaveGSTR1A(ctx context.Context, in *GSTR1ARequest, opts ...grpc.CallOption) (*GSTR1AResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GSTR1AResponse)
	err := c.cc.Invoke(ctx, GSTR1AService_SaveGSTR1A_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSTR1AServiceClient) SubmitGSTR1A(ctx context.Context, in *GSTR1ASubmitRequest, opts ...grpc.CallOption) (*GSTR1ASubmitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GSTR1ASubmitResponse)
	err := c.cc.Invoke(ctx, GSTR1AService_SubmitGSTR1A_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSTR1AServiceClient) FileGSTR1A(ctx context.Context, in *GSTR1AFileRequest, opts ...grpc.CallOption) (*GSTR1AFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GSTR1AFileResponse)
	err := c.cc.Invoke(ctx, GSTR1AService_FileGSTR1A_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSTR1AServiceClient) GetGSTR1AStatus(ctx context.Context, in *GSTR1AStatusRequest, opts ...grpc.CallOption) (*GSTR1AStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GSTR1AStatusResponse)
	err := c.cc.Invoke(ctx, GSTR1AService_GetGSTR1AStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GSTR1AServiceServer is the server API for GSTR1AService service.
// All implementations must embed UnimplementedGSTR1AServiceServer
// for forward compatibility.
type GSTR1AServiceServer interface {
	SaveGSTR1A(context.Context, *GSTR1ARequest) (*GSTR1AResponse, error)
	SubmitGSTR1A(context.Context, *GSTR1ASubmitRequest) (*GSTR1ASubmitResponse, error)
	FileGSTR1A(context.Context, *GSTR1AFileRequest) (*GSTR1AFileResponse, error)
	GetGSTR1AStatus(context.Context, *GSTR1AStatusRequest) (*GSTR1AStatusResponse, error)
	mustEmbedUnimplementedGSTR1AServiceServer()
}

// UnimplementedGSTR1AServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGSTR1AServiceServer struct{}

func (UnimplementedGSTR1AServiceServer) SaveGSTR1A(context.Context, *GSTR1ARequest) (*GSTR1AResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGSTR1A not implemented")
}
func (UnimplementedGSTR1AServiceServer) SubmitGSTR1A(context.Context, *GSTR1ASubmitRequest) (*GSTR1ASubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitGSTR1A not implemented")
}
func (UnimplementedGSTR1AServiceServer) FileGSTR1A(context.Context, *GSTR1AFileRequest) (*GSTR1AFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileGSTR1A not implemented")
}
func (UnimplementedGSTR1AServiceServer) GetGSTR1AStatus(context.Context, *GSTR1AStatusRequest) (*GSTR1AStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGSTR1AStatus not implemented")
}
func (UnimplementedGSTR1AServiceServer) mustEmbedUnimplementedGSTR1AServiceServer() {}
func (UnimplementedGSTR1AServiceServer) testEmbeddedByValue()                       {}

// UnsafeGSTR1AServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GSTR1AServiceServer will
// result in compilation errors.
type UnsafeGSTR1AServiceServer interface {
	mustEmbedUnimplementedGSTR1AServiceServer()
}

func RegisterGSTR1AServiceServer(s grpc.ServiceRegistrar, srv GSTR1AServiceServer) {
	// If the following call pancis, it indicates UnimplementedGSTR1AServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GSTR1AService_ServiceDesc, srv)
}

func _GSTR1AService_SaveGSTR1A_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GSTR1ARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSTR1AServiceServer).SaveGSTR1A(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSTR1AService_SaveGSTR1A_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSTR1AServiceServer).SaveGSTR1A(ctx, req.(*GSTR1ARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSTR1AService_SubmitGSTR1A_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GSTR1ASubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSTR1AServiceServer).SubmitGSTR1A(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSTR1AService_SubmitGSTR1A_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSTR1AServiceServer).SubmitGSTR1A(ctx, req.(*GSTR1ASubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSTR1AService_FileGSTR1A_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GSTR1AFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSTR1AServiceServer).FileGSTR1A(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSTR1AService_FileGSTR1A_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSTR1AServiceServer).FileGSTR1A(ctx, req.(*GSTR1AFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSTR1AService_GetGSTR1AStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GSTR1AStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSTR1AServiceServer).GetGSTR1AStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSTR1AService_GetGSTR1AStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSTR1AServiceServer).GetGSTR1AStatus(ctx, req.(*GSTR1AStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GSTR1AService_ServiceDesc is the grpc.ServiceDesc for GSTR1AService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GSTR1AService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GSTR1AService",
	HandlerType: (*GSTR1AServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveGSTR1A",
			Handler:    _GSTR1AService_SaveGSTR1A_Handler,
		},
		{
			MethodName: "SubmitGSTR1A",
			Handler:    _GSTR1AService_SubmitGSTR1A_Handler,
		},
		{
			MethodName: "FileGSTR1A",
			Handler:    _GSTR1AService_FileGSTR1A_Handler,
		},
		{
			MethodName: "GetGSTR1AStatus",
			Handler:    _GSTR1AService_GetGSTR1AStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/api/protobufs/gstr1a.proto",
}
