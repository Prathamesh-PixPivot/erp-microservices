// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: internal/api/protobufs/gstr9c.proto

package protobufs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GSTR9CService_SaveGSTR9C_FullMethodName      = "/GSTR9CService/SaveGSTR9C"
	GSTR9CService_SubmitGSTR9C_FullMethodName    = "/GSTR9CService/SubmitGSTR9C"
	GSTR9CService_FileGSTR9C_FullMethodName      = "/GSTR9CService/FileGSTR9C"
	GSTR9CService_GetGSTR9CStatus_FullMethodName = "/GSTR9CService/GetGSTR9CStatus"
)

// GSTR9CServiceClient is the client API for GSTR9CService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GSTR9CServiceClient interface {
	SaveGSTR9C(ctx context.Context, in *GSTR9CRequest, opts ...grpc.CallOption) (*GSTR9CResponse, error)
	SubmitGSTR9C(ctx context.Context, in *GSTR9CSubmitRequest, opts ...grpc.CallOption) (*GSTR9CSubmitResponse, error)
	FileGSTR9C(ctx context.Context, in *GSTR9CFileRequest, opts ...grpc.CallOption) (*GSTR9CFileResponse, error)
	GetGSTR9CStatus(ctx context.Context, in *GSTR9CStatusRequest, opts ...grpc.CallOption) (*GSTR9CStatusResponse, error)
}

type gSTR9CServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGSTR9CServiceClient(cc grpc.ClientConnInterface) GSTR9CServiceClient {
	return &gSTR9CServiceClient{cc}
}

func (c *gSTR9CServiceClient) SaveGSTR9C(ctx context.Context, in *GSTR9CRequest, opts ...grpc.CallOption) (*GSTR9CResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GSTR9CResponse)
	err := c.cc.Invoke(ctx, GSTR9CService_SaveGSTR9C_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSTR9CServiceClient) SubmitGSTR9C(ctx context.Context, in *GSTR9CSubmitRequest, opts ...grpc.CallOption) (*GSTR9CSubmitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GSTR9CSubmitResponse)
	err := c.cc.Invoke(ctx, GSTR9CService_SubmitGSTR9C_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSTR9CServiceClient) FileGSTR9C(ctx context.Context, in *GSTR9CFileRequest, opts ...grpc.CallOption) (*GSTR9CFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GSTR9CFileResponse)
	err := c.cc.Invoke(ctx, GSTR9CService_FileGSTR9C_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSTR9CServiceClient) GetGSTR9CStatus(ctx context.Context, in *GSTR9CStatusRequest, opts ...grpc.CallOption) (*GSTR9CStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GSTR9CStatusResponse)
	err := c.cc.Invoke(ctx, GSTR9CService_GetGSTR9CStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GSTR9CServiceServer is the server API for GSTR9CService service.
// All implementations must embed UnimplementedGSTR9CServiceServer
// for forward compatibility.
type GSTR9CServiceServer interface {
	SaveGSTR9C(context.Context, *GSTR9CRequest) (*GSTR9CResponse, error)
	SubmitGSTR9C(context.Context, *GSTR9CSubmitRequest) (*GSTR9CSubmitResponse, error)
	FileGSTR9C(context.Context, *GSTR9CFileRequest) (*GSTR9CFileResponse, error)
	GetGSTR9CStatus(context.Context, *GSTR9CStatusRequest) (*GSTR9CStatusResponse, error)
	mustEmbedUnimplementedGSTR9CServiceServer()
}

// UnimplementedGSTR9CServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGSTR9CServiceServer struct{}

func (UnimplementedGSTR9CServiceServer) SaveGSTR9C(context.Context, *GSTR9CRequest) (*GSTR9CResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGSTR9C not implemented")
}
func (UnimplementedGSTR9CServiceServer) SubmitGSTR9C(context.Context, *GSTR9CSubmitRequest) (*GSTR9CSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitGSTR9C not implemented")
}
func (UnimplementedGSTR9CServiceServer) FileGSTR9C(context.Context, *GSTR9CFileRequest) (*GSTR9CFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileGSTR9C not implemented")
}
func (UnimplementedGSTR9CServiceServer) GetGSTR9CStatus(context.Context, *GSTR9CStatusRequest) (*GSTR9CStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGSTR9CStatus not implemented")
}
func (UnimplementedGSTR9CServiceServer) mustEmbedUnimplementedGSTR9CServiceServer() {}
func (UnimplementedGSTR9CServiceServer) testEmbeddedByValue()                       {}

// UnsafeGSTR9CServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GSTR9CServiceServer will
// result in compilation errors.
type UnsafeGSTR9CServiceServer interface {
	mustEmbedUnimplementedGSTR9CServiceServer()
}

func RegisterGSTR9CServiceServer(s grpc.ServiceRegistrar, srv GSTR9CServiceServer) {
	// If the following call pancis, it indicates UnimplementedGSTR9CServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GSTR9CService_ServiceDesc, srv)
}

func _GSTR9CService_SaveGSTR9C_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GSTR9CRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSTR9CServiceServer).SaveGSTR9C(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSTR9CService_SaveGSTR9C_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSTR9CServiceServer).SaveGSTR9C(ctx, req.(*GSTR9CRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSTR9CService_SubmitGSTR9C_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GSTR9CSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSTR9CServiceServer).SubmitGSTR9C(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSTR9CService_SubmitGSTR9C_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSTR9CServiceServer).SubmitGSTR9C(ctx, req.(*GSTR9CSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSTR9CService_FileGSTR9C_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GSTR9CFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSTR9CServiceServer).FileGSTR9C(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSTR9CService_FileGSTR9C_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSTR9CServiceServer).FileGSTR9C(ctx, req.(*GSTR9CFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSTR9CService_GetGSTR9CStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GSTR9CStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSTR9CServiceServer).GetGSTR9CStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GSTR9CService_GetGSTR9CStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSTR9CServiceServer).GetGSTR9CStatus(ctx, req.(*GSTR9CStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GSTR9CService_ServiceDesc is the grpc.ServiceDesc for GSTR9CService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GSTR9CService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GSTR9CService",
	HandlerType: (*GSTR9CServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveGSTR9C",
			Handler:    _GSTR9CService_SaveGSTR9C_Handler,
		},
		{
			MethodName: "SubmitGSTR9C",
			Handler:    _GSTR9CService_SubmitGSTR9C_Handler,
		},
		{
			MethodName: "FileGSTR9C",
			Handler:    _GSTR9CService_FileGSTR9C_Handler,
		},
		{
			MethodName: "GetGSTR9CStatus",
			Handler:    _GSTR9CService_GetGSTR9CStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/api/protobufs/gstr9c.proto",
}
