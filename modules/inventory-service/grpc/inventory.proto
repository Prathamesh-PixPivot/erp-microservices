syntax = "proto3";

import "google/protobuf/timestamp.proto";

package inventory;

option go_package = "/inventory_pb";

// --------------- Inventory Management Service ---------------
service InventoryService {
    rpc CreateInventoryItem (CreateInventoryItemRequest) returns (CreateInventoryItemResponse);
    rpc GetInventoryItem (GetInventoryItemRequest) returns (GetInventoryItemResponse);
    rpc UpdateInventoryItem (UpdateInventoryItemRequest) returns (UpdateInventoryItemResponse);
    rpc DeleteInventoryItem (DeleteInventoryItemRequest) returns (DeleteInventoryItemResponse);
    rpc ListInventoryItems (ListInventoryItemsRequest) returns (ListInventoryItemsResponse);
}

// --------------- Stock & Warehouse Management Service ---------------
service StockManagementService {
    rpc TrackInventory (TrackInventoryRequest) returns (TrackInventoryResponse);
    rpc SetReorderPoint (SetReorderPointRequest) returns (SetReorderPointResponse);
    rpc ManageWarehouses (ManageWarehousesRequest) returns (ManageWarehousesResponse);
    rpc StockAdjustment (StockAdjustmentRequest) returns (StockAdjustmentResponse);
    rpc StockTransfer (StockTransferRequest) returns (StockTransferResponse);
}

// --------------- Enterprise-Grade Features ---------------
service InventoryCostingService {
    rpc SetInventoryCostingMethod(SetCostingMethodRequest) returns (SetCostingMethodResponse);
}

service CycleCountingService {
    rpc PerformCycleCount(CycleCountRequest) returns (CycleCountResponse);
}

service StockRecallService {
    rpc ManageStockRecalls(StockRecallRequest) returns (StockRecallResponse);
}

service ShipmentTrackingService {
    rpc TrackShipment(ShipmentTrackingRequest) returns (ShipmentTrackingResponse);
}

// --------------- Order Fulfillment Service ---------------
service OrderFulfillmentService {
    rpc ProcessOrder (ProcessOrderRequest) returns (ProcessOrderResponse);
    rpc GeneratePickingList (GeneratePickingListRequest) returns (GeneratePickingListResponse);
    rpc UpdateInventory (UpdateInventoryRequest) returns (UpdateInventoryResponse);
}

// --------------- Vendor Management Integration ---------------
service VendorIntegrationService {
    rpc PlaceVendorOrder (PlaceVendorOrderRequest) returns (PlaceVendorOrderResponse);
    rpc AutoReorderCheck (AutoReorderRequest) returns (AutoReorderResponse);
    rpc TrackVendorPerformance (VendorPerformanceRequest) returns (VendorPerformanceResponse);
}

// --------------- Finance Service Integration ---------------
service FinanceIntegrationService {
    rpc NotifyFinanceForOrder (NotifyFinanceRequest) returns (NotifyFinanceResponse);
}

// ---------------- Inventory Messages ----------------
message InventoryItem {
    string product_id = 1;
    string product_name = 2;
    string product_description = 3;
    string sku = 4;
    repeated string vendor_ids = 5;
    string category = 6;
    float price = 7;
    string currency = 8;
    int32 available_quantity = 9;
    int32 reorder_point = 10;
    string barcode = 11;
    repeated WarehouseStock warehouse_stocks = 12;
    string batch_number = 13;
    google.protobuf.Timestamp expiry_date = 14;
    string unit_of_measurement = 15;  // "pcs", "kg", "liters"
    repeated string serial_numbers = 16;  // Serialized inventory tracking
    google.protobuf.Timestamp created_at = 17;
    google.protobuf.Timestamp updated_at = 18;
}

// Warehouse stock tracking
message WarehouseStock {
    string warehouse_id = 1;
    string location_id = 2; // Zone or aisle location within the warehouse
    int32 stock_level = 3;
    int32 reserved_quantity = 4; // For pending orders
}

// ---------------- Costing Methods ----------------
message SetCostingMethodRequest {
    string costing_method = 1; // "FIFO", "LIFO", "Weighted Average"
}

message SetCostingMethodResponse {
    bool success = 1;
}

// ---------------- Cycle Counting & Stock Audit ----------------
message CycleCountRequest {
    string warehouse_id = 1;
}

message CycleCountResponse {
    bool success = 1;
    string report_link = 2;
}

// ---------------- Stock Recall & Expiry Management ----------------
message StockRecallRequest {
    string product_id = 1;
    string reason = 2;
}

message StockRecallResponse {
    bool success = 1;
}

// ---------------- Shipment Tracking ----------------
message ShipmentTrackingRequest {
    string order_id = 1;
}

message ShipmentTrackingResponse {
    string tracking_number = 1;
    string carrier_name = 2;
    string status = 3;
}

// ---------------- Vendor Performance ----------------
message VendorPerformanceRequest {
    string vendor_id = 1;
}

message VendorPerformanceResponse {
    float on_time_delivery_rate = 1;
    float defect_rate = 2;
}

// ---------------- General Response Messages ----------------
message DeleteResponse {
    bool success = 1;
}
