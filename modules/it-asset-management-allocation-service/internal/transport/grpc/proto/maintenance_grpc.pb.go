// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0--rc2
// source: maintenance.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MaintenanceService_ScheduleMaintenance_FullMethodName   = "/maintenance.MaintenanceService/ScheduleMaintenance"
	MaintenanceService_GetMaintenanceRecords_FullMethodName = "/maintenance.MaintenanceService/GetMaintenanceRecords"
)

// MaintenanceServiceClient is the client API for MaintenanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaintenanceServiceClient interface {
	ScheduleMaintenance(ctx context.Context, in *ScheduleMaintenanceRequest, opts ...grpc.CallOption) (*MaintenanceResponse, error)
	GetMaintenanceRecords(ctx context.Context, in *GetMaintenanceRecordsRequest, opts ...grpc.CallOption) (*GetMaintenanceRecordsResponse, error)
}

type maintenanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaintenanceServiceClient(cc grpc.ClientConnInterface) MaintenanceServiceClient {
	return &maintenanceServiceClient{cc}
}

func (c *maintenanceServiceClient) ScheduleMaintenance(ctx context.Context, in *ScheduleMaintenanceRequest, opts ...grpc.CallOption) (*MaintenanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MaintenanceResponse)
	err := c.cc.Invoke(ctx, MaintenanceService_ScheduleMaintenance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maintenanceServiceClient) GetMaintenanceRecords(ctx context.Context, in *GetMaintenanceRecordsRequest, opts ...grpc.CallOption) (*GetMaintenanceRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMaintenanceRecordsResponse)
	err := c.cc.Invoke(ctx, MaintenanceService_GetMaintenanceRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaintenanceServiceServer is the server API for MaintenanceService service.
// All implementations must embed UnimplementedMaintenanceServiceServer
// for forward compatibility.
type MaintenanceServiceServer interface {
	ScheduleMaintenance(context.Context, *ScheduleMaintenanceRequest) (*MaintenanceResponse, error)
	GetMaintenanceRecords(context.Context, *GetMaintenanceRecordsRequest) (*GetMaintenanceRecordsResponse, error)
	mustEmbedUnimplementedMaintenanceServiceServer()
}

// UnimplementedMaintenanceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMaintenanceServiceServer struct{}

func (UnimplementedMaintenanceServiceServer) ScheduleMaintenance(context.Context, *ScheduleMaintenanceRequest) (*MaintenanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleMaintenance not implemented")
}
func (UnimplementedMaintenanceServiceServer) GetMaintenanceRecords(context.Context, *GetMaintenanceRecordsRequest) (*GetMaintenanceRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaintenanceRecords not implemented")
}
func (UnimplementedMaintenanceServiceServer) mustEmbedUnimplementedMaintenanceServiceServer() {}
func (UnimplementedMaintenanceServiceServer) testEmbeddedByValue()                            {}

// UnsafeMaintenanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaintenanceServiceServer will
// result in compilation errors.
type UnsafeMaintenanceServiceServer interface {
	mustEmbedUnimplementedMaintenanceServiceServer()
}

func RegisterMaintenanceServiceServer(s grpc.ServiceRegistrar, srv MaintenanceServiceServer) {
	// If the following call pancis, it indicates UnimplementedMaintenanceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MaintenanceService_ServiceDesc, srv)
}

func _MaintenanceService_ScheduleMaintenance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleMaintenanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).ScheduleMaintenance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceService_ScheduleMaintenance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).ScheduleMaintenance(ctx, req.(*ScheduleMaintenanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaintenanceService_GetMaintenanceRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaintenanceRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaintenanceServiceServer).GetMaintenanceRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaintenanceService_GetMaintenanceRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaintenanceServiceServer).GetMaintenanceRecords(ctx, req.(*GetMaintenanceRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaintenanceService_ServiceDesc is the grpc.ServiceDesc for MaintenanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaintenanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "maintenance.MaintenanceService",
	HandlerType: (*MaintenanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleMaintenance",
			Handler:    _MaintenanceService_ScheduleMaintenance_Handler,
		},
		{
			MethodName: "GetMaintenanceRecords",
			Handler:    _MaintenanceService_GetMaintenanceRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "maintenance.proto",
}
