// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0--rc2
// source: allocation.proto

package proto

import (
	"amaa/internal/transport/grpc/proto/common"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AllocationService_AllocateAsset_FullMethodName   = "/allocation.AllocationService/AllocateAsset"
	AllocationService_ReallocateAsset_FullMethodName = "/allocation.AllocationService/ReallocateAsset"
	AllocationService_DeallocateAsset_FullMethodName = "/allocation.AllocationService/DeallocateAsset"
)

// AllocationServiceClient is the client API for AllocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AllocationServiceClient interface {
	AllocateAsset(ctx context.Context, in *AllocateAssetRequest, opts ...grpc.CallOption) (*AllocationResponse, error)
	ReallocateAsset(ctx context.Context, in *ReallocateAssetRequest, opts ...grpc.CallOption) (*common.GenericResponse, error)
	DeallocateAsset(ctx context.Context, in *DeallocateAssetRequest, opts ...grpc.CallOption) (*common.GenericResponse, error)
}

type allocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAllocationServiceClient(cc grpc.ClientConnInterface) AllocationServiceClient {
	return &allocationServiceClient{cc}
}

func (c *allocationServiceClient) AllocateAsset(ctx context.Context, in *AllocateAssetRequest, opts ...grpc.CallOption) (*AllocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllocationResponse)
	err := c.cc.Invoke(ctx, AllocationService_AllocateAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allocationServiceClient) ReallocateAsset(ctx context.Context, in *ReallocateAssetRequest, opts ...grpc.CallOption) (*common.GenericResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.GenericResponse)
	err := c.cc.Invoke(ctx, AllocationService_ReallocateAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allocationServiceClient) DeallocateAsset(ctx context.Context, in *DeallocateAssetRequest, opts ...grpc.CallOption) (*common.GenericResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.GenericResponse)
	err := c.cc.Invoke(ctx, AllocationService_DeallocateAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllocationServiceServer is the server API for AllocationService service.
// All implementations must embed UnimplementedAllocationServiceServer
// for forward compatibility.
type AllocationServiceServer interface {
	AllocateAsset(context.Context, *AllocateAssetRequest) (*AllocationResponse, error)
	ReallocateAsset(context.Context, *ReallocateAssetRequest) (*common.GenericResponse, error)
	DeallocateAsset(context.Context, *DeallocateAssetRequest) (*common.GenericResponse, error)
	mustEmbedUnimplementedAllocationServiceServer()
}

// UnimplementedAllocationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAllocationServiceServer struct{}

func (UnimplementedAllocationServiceServer) AllocateAsset(context.Context, *AllocateAssetRequest) (*AllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateAsset not implemented")
}
func (UnimplementedAllocationServiceServer) ReallocateAsset(context.Context, *ReallocateAssetRequest) (*common.GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReallocateAsset not implemented")
}
func (UnimplementedAllocationServiceServer) DeallocateAsset(context.Context, *DeallocateAssetRequest) (*common.GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeallocateAsset not implemented")
}
func (UnimplementedAllocationServiceServer) mustEmbedUnimplementedAllocationServiceServer() {}
func (UnimplementedAllocationServiceServer) testEmbeddedByValue()                           {}

// UnsafeAllocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AllocationServiceServer will
// result in compilation errors.
type UnsafeAllocationServiceServer interface {
	mustEmbedUnimplementedAllocationServiceServer()
}

func RegisterAllocationServiceServer(s grpc.ServiceRegistrar, srv AllocationServiceServer) {
	// If the following call pancis, it indicates UnimplementedAllocationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AllocationService_ServiceDesc, srv)
}

func _AllocationService_AllocateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocationServiceServer).AllocateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AllocationService_AllocateAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocationServiceServer).AllocateAsset(ctx, req.(*AllocateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllocationService_ReallocateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReallocateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocationServiceServer).ReallocateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AllocationService_ReallocateAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocationServiceServer).ReallocateAsset(ctx, req.(*ReallocateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllocationService_DeallocateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeallocateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocationServiceServer).DeallocateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AllocationService_DeallocateAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocationServiceServer).DeallocateAsset(ctx, req.(*DeallocateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AllocationService_ServiceDesc is the grpc.ServiceDesc for AllocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AllocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "allocation.AllocationService",
	HandlerType: (*AllocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllocateAsset",
			Handler:    _AllocationService_AllocateAsset_Handler,
		},
		{
			MethodName: "ReallocateAsset",
			Handler:    _AllocationService_ReallocateAsset_Handler,
		},
		{
			MethodName: "DeallocateAsset",
			Handler:    _AllocationService_DeallocateAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "allocation.proto",
}
