// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: vms.proto

package vms_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VendorService_CreateVendor_FullMethodName  = "/vms.VendorService/CreateVendor"
	VendorService_GetVendorByID_FullMethodName = "/vms.VendorService/GetVendorByID"
	VendorService_UpdateVendor_FullMethodName  = "/vms.VendorService/UpdateVendor"
	VendorService_DeleteVendor_FullMethodName  = "/vms.VendorService/DeleteVendor"
	VendorService_SearchVendors_FullMethodName = "/vms.VendorService/SearchVendors"
)

// VendorServiceClient is the client API for VendorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Vendor related services
type VendorServiceClient interface {
	CreateVendor(ctx context.Context, in *CreateVendorRequest, opts ...grpc.CallOption) (*VendorResponse, error)
	GetVendorByID(ctx context.Context, in *GetVendorByIDRequest, opts ...grpc.CallOption) (*VendorResponse, error)
	UpdateVendor(ctx context.Context, in *UpdateVendorRequest, opts ...grpc.CallOption) (*VendorResponse, error)
	DeleteVendor(ctx context.Context, in *DeleteVendorRequest, opts ...grpc.CallOption) (*DeleteVendorResponse, error)
	SearchVendors(ctx context.Context, in *SearchVendorsRequest, opts ...grpc.CallOption) (*SearchVendorsResponse, error)
}

type vendorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVendorServiceClient(cc grpc.ClientConnInterface) VendorServiceClient {
	return &vendorServiceClient{cc}
}

func (c *vendorServiceClient) CreateVendor(ctx context.Context, in *CreateVendorRequest, opts ...grpc.CallOption) (*VendorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorResponse)
	err := c.cc.Invoke(ctx, VendorService_CreateVendor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorServiceClient) GetVendorByID(ctx context.Context, in *GetVendorByIDRequest, opts ...grpc.CallOption) (*VendorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorResponse)
	err := c.cc.Invoke(ctx, VendorService_GetVendorByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorServiceClient) UpdateVendor(ctx context.Context, in *UpdateVendorRequest, opts ...grpc.CallOption) (*VendorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VendorResponse)
	err := c.cc.Invoke(ctx, VendorService_UpdateVendor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorServiceClient) DeleteVendor(ctx context.Context, in *DeleteVendorRequest, opts ...grpc.CallOption) (*DeleteVendorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVendorResponse)
	err := c.cc.Invoke(ctx, VendorService_DeleteVendor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vendorServiceClient) SearchVendors(ctx context.Context, in *SearchVendorsRequest, opts ...grpc.CallOption) (*SearchVendorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchVendorsResponse)
	err := c.cc.Invoke(ctx, VendorService_SearchVendors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VendorServiceServer is the server API for VendorService service.
// All implementations must embed UnimplementedVendorServiceServer
// for forward compatibility.
//
// Vendor related services
type VendorServiceServer interface {
	CreateVendor(context.Context, *CreateVendorRequest) (*VendorResponse, error)
	GetVendorByID(context.Context, *GetVendorByIDRequest) (*VendorResponse, error)
	UpdateVendor(context.Context, *UpdateVendorRequest) (*VendorResponse, error)
	DeleteVendor(context.Context, *DeleteVendorRequest) (*DeleteVendorResponse, error)
	SearchVendors(context.Context, *SearchVendorsRequest) (*SearchVendorsResponse, error)
	mustEmbedUnimplementedVendorServiceServer()
}

// UnimplementedVendorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVendorServiceServer struct{}

func (UnimplementedVendorServiceServer) CreateVendor(context.Context, *CreateVendorRequest) (*VendorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVendor not implemented")
}
func (UnimplementedVendorServiceServer) GetVendorByID(context.Context, *GetVendorByIDRequest) (*VendorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendorByID not implemented")
}
func (UnimplementedVendorServiceServer) UpdateVendor(context.Context, *UpdateVendorRequest) (*VendorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVendor not implemented")
}
func (UnimplementedVendorServiceServer) DeleteVendor(context.Context, *DeleteVendorRequest) (*DeleteVendorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVendor not implemented")
}
func (UnimplementedVendorServiceServer) SearchVendors(context.Context, *SearchVendorsRequest) (*SearchVendorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchVendors not implemented")
}
func (UnimplementedVendorServiceServer) mustEmbedUnimplementedVendorServiceServer() {}
func (UnimplementedVendorServiceServer) testEmbeddedByValue()                       {}

// UnsafeVendorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VendorServiceServer will
// result in compilation errors.
type UnsafeVendorServiceServer interface {
	mustEmbedUnimplementedVendorServiceServer()
}

func RegisterVendorServiceServer(s grpc.ServiceRegistrar, srv VendorServiceServer) {
	// If the following call pancis, it indicates UnimplementedVendorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VendorService_ServiceDesc, srv)
}

func _VendorService_CreateVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVendorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorServiceServer).CreateVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorService_CreateVendor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorServiceServer).CreateVendor(ctx, req.(*CreateVendorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorService_GetVendorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorServiceServer).GetVendorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorService_GetVendorByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorServiceServer).GetVendorByID(ctx, req.(*GetVendorByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorService_UpdateVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVendorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorServiceServer).UpdateVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorService_UpdateVendor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorServiceServer).UpdateVendor(ctx, req.(*UpdateVendorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorService_DeleteVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVendorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorServiceServer).DeleteVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorService_DeleteVendor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorServiceServer).DeleteVendor(ctx, req.(*DeleteVendorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VendorService_SearchVendors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVendorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VendorServiceServer).SearchVendors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VendorService_SearchVendors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VendorServiceServer).SearchVendors(ctx, req.(*SearchVendorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VendorService_ServiceDesc is the grpc.ServiceDesc for VendorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VendorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vms.VendorService",
	HandlerType: (*VendorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVendor",
			Handler:    _VendorService_CreateVendor_Handler,
		},
		{
			MethodName: "GetVendorByID",
			Handler:    _VendorService_GetVendorByID_Handler,
		},
		{
			MethodName: "UpdateVendor",
			Handler:    _VendorService_UpdateVendor_Handler,
		},
		{
			MethodName: "DeleteVendor",
			Handler:    _VendorService_DeleteVendor_Handler,
		},
		{
			MethodName: "SearchVendors",
			Handler:    _VendorService_SearchVendors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vms.proto",
}

const (
	PurchaseOrderService_CreatePurchaseOrder_FullMethodName  = "/vms.PurchaseOrderService/CreatePurchaseOrder"
	PurchaseOrderService_GetPurchaseOrderByID_FullMethodName = "/vms.PurchaseOrderService/GetPurchaseOrderByID"
	PurchaseOrderService_UpdatePurchaseOrder_FullMethodName  = "/vms.PurchaseOrderService/UpdatePurchaseOrder"
	PurchaseOrderService_DeletePurchaseOrder_FullMethodName  = "/vms.PurchaseOrderService/DeletePurchaseOrder"
	PurchaseOrderService_TrackOrderStatus_FullMethodName     = "/vms.PurchaseOrderService/TrackOrderStatus"
	PurchaseOrderService_ReceiveGoods_FullMethodName         = "/vms.PurchaseOrderService/ReceiveGoods"
)

// PurchaseOrderServiceClient is the client API for PurchaseOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Purchase Order related services
type PurchaseOrderServiceClient interface {
	CreatePurchaseOrder(ctx context.Context, in *CreatePurchaseOrderRequest, opts ...grpc.CallOption) (*PurchaseOrderResponse, error)
	GetPurchaseOrderByID(ctx context.Context, in *GetPurchaseOrderByIDRequest, opts ...grpc.CallOption) (*PurchaseOrderResponse, error)
	UpdatePurchaseOrder(ctx context.Context, in *UpdatePurchaseOrderRequest, opts ...grpc.CallOption) (*PurchaseOrderResponse, error)
	DeletePurchaseOrder(ctx context.Context, in *DeletePurchaseOrderRequest, opts ...grpc.CallOption) (*DeletePurchaseOrderResponse, error)
	TrackOrderStatus(ctx context.Context, in *TrackOrderStatusRequest, opts ...grpc.CallOption) (*PurchaseOrderResponse, error)
	ReceiveGoods(ctx context.Context, in *ReceiveGoodsRequest, opts ...grpc.CallOption) (*ReceiveGoodsResponse, error)
}

type purchaseOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPurchaseOrderServiceClient(cc grpc.ClientConnInterface) PurchaseOrderServiceClient {
	return &purchaseOrderServiceClient{cc}
}

func (c *purchaseOrderServiceClient) CreatePurchaseOrder(ctx context.Context, in *CreatePurchaseOrderRequest, opts ...grpc.CallOption) (*PurchaseOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrderResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderService_CreatePurchaseOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOrderServiceClient) GetPurchaseOrderByID(ctx context.Context, in *GetPurchaseOrderByIDRequest, opts ...grpc.CallOption) (*PurchaseOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrderResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderService_GetPurchaseOrderByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOrderServiceClient) UpdatePurchaseOrder(ctx context.Context, in *UpdatePurchaseOrderRequest, opts ...grpc.CallOption) (*PurchaseOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrderResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderService_UpdatePurchaseOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOrderServiceClient) DeletePurchaseOrder(ctx context.Context, in *DeletePurchaseOrderRequest, opts ...grpc.CallOption) (*DeletePurchaseOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePurchaseOrderResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderService_DeletePurchaseOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOrderServiceClient) TrackOrderStatus(ctx context.Context, in *TrackOrderStatusRequest, opts ...grpc.CallOption) (*PurchaseOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseOrderResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderService_TrackOrderStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseOrderServiceClient) ReceiveGoods(ctx context.Context, in *ReceiveGoodsRequest, opts ...grpc.CallOption) (*ReceiveGoodsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReceiveGoodsResponse)
	err := c.cc.Invoke(ctx, PurchaseOrderService_ReceiveGoods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurchaseOrderServiceServer is the server API for PurchaseOrderService service.
// All implementations must embed UnimplementedPurchaseOrderServiceServer
// for forward compatibility.
//
// Purchase Order related services
type PurchaseOrderServiceServer interface {
	CreatePurchaseOrder(context.Context, *CreatePurchaseOrderRequest) (*PurchaseOrderResponse, error)
	GetPurchaseOrderByID(context.Context, *GetPurchaseOrderByIDRequest) (*PurchaseOrderResponse, error)
	UpdatePurchaseOrder(context.Context, *UpdatePurchaseOrderRequest) (*PurchaseOrderResponse, error)
	DeletePurchaseOrder(context.Context, *DeletePurchaseOrderRequest) (*DeletePurchaseOrderResponse, error)
	TrackOrderStatus(context.Context, *TrackOrderStatusRequest) (*PurchaseOrderResponse, error)
	ReceiveGoods(context.Context, *ReceiveGoodsRequest) (*ReceiveGoodsResponse, error)
	mustEmbedUnimplementedPurchaseOrderServiceServer()
}

// UnimplementedPurchaseOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPurchaseOrderServiceServer struct{}

func (UnimplementedPurchaseOrderServiceServer) CreatePurchaseOrder(context.Context, *CreatePurchaseOrderRequest) (*PurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePurchaseOrder not implemented")
}
func (UnimplementedPurchaseOrderServiceServer) GetPurchaseOrderByID(context.Context, *GetPurchaseOrderByIDRequest) (*PurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchaseOrderByID not implemented")
}
func (UnimplementedPurchaseOrderServiceServer) UpdatePurchaseOrder(context.Context, *UpdatePurchaseOrderRequest) (*PurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePurchaseOrder not implemented")
}
func (UnimplementedPurchaseOrderServiceServer) DeletePurchaseOrder(context.Context, *DeletePurchaseOrderRequest) (*DeletePurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePurchaseOrder not implemented")
}
func (UnimplementedPurchaseOrderServiceServer) TrackOrderStatus(context.Context, *TrackOrderStatusRequest) (*PurchaseOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackOrderStatus not implemented")
}
func (UnimplementedPurchaseOrderServiceServer) ReceiveGoods(context.Context, *ReceiveGoodsRequest) (*ReceiveGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveGoods not implemented")
}
func (UnimplementedPurchaseOrderServiceServer) mustEmbedUnimplementedPurchaseOrderServiceServer() {}
func (UnimplementedPurchaseOrderServiceServer) testEmbeddedByValue()                              {}

// UnsafePurchaseOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PurchaseOrderServiceServer will
// result in compilation errors.
type UnsafePurchaseOrderServiceServer interface {
	mustEmbedUnimplementedPurchaseOrderServiceServer()
}

func RegisterPurchaseOrderServiceServer(s grpc.ServiceRegistrar, srv PurchaseOrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedPurchaseOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PurchaseOrderService_ServiceDesc, srv)
}

func _PurchaseOrderService_CreatePurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderServiceServer).CreatePurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderService_CreatePurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderServiceServer).CreatePurchaseOrder(ctx, req.(*CreatePurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseOrderService_GetPurchaseOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseOrderByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderServiceServer).GetPurchaseOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderService_GetPurchaseOrderByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderServiceServer).GetPurchaseOrderByID(ctx, req.(*GetPurchaseOrderByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseOrderService_UpdatePurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderServiceServer).UpdatePurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderService_UpdatePurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderServiceServer).UpdatePurchaseOrder(ctx, req.(*UpdatePurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseOrderService_DeletePurchaseOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePurchaseOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderServiceServer).DeletePurchaseOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderService_DeletePurchaseOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderServiceServer).DeletePurchaseOrder(ctx, req.(*DeletePurchaseOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseOrderService_TrackOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderServiceServer).TrackOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderService_TrackOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderServiceServer).TrackOrderStatus(ctx, req.(*TrackOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseOrderService_ReceiveGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseOrderServiceServer).ReceiveGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseOrderService_ReceiveGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseOrderServiceServer).ReceiveGoods(ctx, req.(*ReceiveGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PurchaseOrderService_ServiceDesc is the grpc.ServiceDesc for PurchaseOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PurchaseOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vms.PurchaseOrderService",
	HandlerType: (*PurchaseOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePurchaseOrder",
			Handler:    _PurchaseOrderService_CreatePurchaseOrder_Handler,
		},
		{
			MethodName: "GetPurchaseOrderByID",
			Handler:    _PurchaseOrderService_GetPurchaseOrderByID_Handler,
		},
		{
			MethodName: "UpdatePurchaseOrder",
			Handler:    _PurchaseOrderService_UpdatePurchaseOrder_Handler,
		},
		{
			MethodName: "DeletePurchaseOrder",
			Handler:    _PurchaseOrderService_DeletePurchaseOrder_Handler,
		},
		{
			MethodName: "TrackOrderStatus",
			Handler:    _PurchaseOrderService_TrackOrderStatus_Handler,
		},
		{
			MethodName: "ReceiveGoods",
			Handler:    _PurchaseOrderService_ReceiveGoods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vms.proto",
}

const (
	PerformanceService_RecordPerformance_FullMethodName  = "/vms.PerformanceService/RecordPerformance"
	PerformanceService_GetPerformanceByID_FullMethodName = "/vms.PerformanceService/GetPerformanceByID"
	PerformanceService_UpdatePerformance_FullMethodName  = "/vms.PerformanceService/UpdatePerformance"
	PerformanceService_DeletePerformance_FullMethodName  = "/vms.PerformanceService/DeletePerformance"
)

// PerformanceServiceClient is the client API for PerformanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Performance management related services
type PerformanceServiceClient interface {
	RecordPerformance(ctx context.Context, in *RecordPerformanceRequest, opts ...grpc.CallOption) (*PerformanceResponse, error)
	GetPerformanceByID(ctx context.Context, in *GetPerformanceByIDRequest, opts ...grpc.CallOption) (*PerformanceResponse, error)
	UpdatePerformance(ctx context.Context, in *UpdatePerformanceRequest, opts ...grpc.CallOption) (*PerformanceResponse, error)
	DeletePerformance(ctx context.Context, in *DeletePerformanceRequest, opts ...grpc.CallOption) (*DeletePerformanceResponse, error)
}

type performanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPerformanceServiceClient(cc grpc.ClientConnInterface) PerformanceServiceClient {
	return &performanceServiceClient{cc}
}

func (c *performanceServiceClient) RecordPerformance(ctx context.Context, in *RecordPerformanceRequest, opts ...grpc.CallOption) (*PerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PerformanceResponse)
	err := c.cc.Invoke(ctx, PerformanceService_RecordPerformance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceServiceClient) GetPerformanceByID(ctx context.Context, in *GetPerformanceByIDRequest, opts ...grpc.CallOption) (*PerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PerformanceResponse)
	err := c.cc.Invoke(ctx, PerformanceService_GetPerformanceByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceServiceClient) UpdatePerformance(ctx context.Context, in *UpdatePerformanceRequest, opts ...grpc.CallOption) (*PerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PerformanceResponse)
	err := c.cc.Invoke(ctx, PerformanceService_UpdatePerformance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *performanceServiceClient) DeletePerformance(ctx context.Context, in *DeletePerformanceRequest, opts ...grpc.CallOption) (*DeletePerformanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePerformanceResponse)
	err := c.cc.Invoke(ctx, PerformanceService_DeletePerformance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PerformanceServiceServer is the server API for PerformanceService service.
// All implementations must embed UnimplementedPerformanceServiceServer
// for forward compatibility.
//
// Performance management related services
type PerformanceServiceServer interface {
	RecordPerformance(context.Context, *RecordPerformanceRequest) (*PerformanceResponse, error)
	GetPerformanceByID(context.Context, *GetPerformanceByIDRequest) (*PerformanceResponse, error)
	UpdatePerformance(context.Context, *UpdatePerformanceRequest) (*PerformanceResponse, error)
	DeletePerformance(context.Context, *DeletePerformanceRequest) (*DeletePerformanceResponse, error)
	mustEmbedUnimplementedPerformanceServiceServer()
}

// UnimplementedPerformanceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPerformanceServiceServer struct{}

func (UnimplementedPerformanceServiceServer) RecordPerformance(context.Context, *RecordPerformanceRequest) (*PerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordPerformance not implemented")
}
func (UnimplementedPerformanceServiceServer) GetPerformanceByID(context.Context, *GetPerformanceByIDRequest) (*PerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPerformanceByID not implemented")
}
func (UnimplementedPerformanceServiceServer) UpdatePerformance(context.Context, *UpdatePerformanceRequest) (*PerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePerformance not implemented")
}
func (UnimplementedPerformanceServiceServer) DeletePerformance(context.Context, *DeletePerformanceRequest) (*DeletePerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePerformance not implemented")
}
func (UnimplementedPerformanceServiceServer) mustEmbedUnimplementedPerformanceServiceServer() {}
func (UnimplementedPerformanceServiceServer) testEmbeddedByValue()                            {}

// UnsafePerformanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PerformanceServiceServer will
// result in compilation errors.
type UnsafePerformanceServiceServer interface {
	mustEmbedUnimplementedPerformanceServiceServer()
}

func RegisterPerformanceServiceServer(s grpc.ServiceRegistrar, srv PerformanceServiceServer) {
	// If the following call pancis, it indicates UnimplementedPerformanceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PerformanceService_ServiceDesc, srv)
}

func _PerformanceService_RecordPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceServiceServer).RecordPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceService_RecordPerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceServiceServer).RecordPerformance(ctx, req.(*RecordPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceService_GetPerformanceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPerformanceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceServiceServer).GetPerformanceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceService_GetPerformanceByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceServiceServer).GetPerformanceByID(ctx, req.(*GetPerformanceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceService_UpdatePerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceServiceServer).UpdatePerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceService_UpdatePerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceServiceServer).UpdatePerformance(ctx, req.(*UpdatePerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PerformanceService_DeletePerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PerformanceServiceServer).DeletePerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PerformanceService_DeletePerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PerformanceServiceServer).DeletePerformance(ctx, req.(*DeletePerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PerformanceService_ServiceDesc is the grpc.ServiceDesc for PerformanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PerformanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vms.PerformanceService",
	HandlerType: (*PerformanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordPerformance",
			Handler:    _PerformanceService_RecordPerformance_Handler,
		},
		{
			MethodName: "GetPerformanceByID",
			Handler:    _PerformanceService_GetPerformanceByID_Handler,
		},
		{
			MethodName: "UpdatePerformance",
			Handler:    _PerformanceService_UpdatePerformance_Handler,
		},
		{
			MethodName: "DeletePerformance",
			Handler:    _PerformanceService_DeletePerformance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vms.proto",
}

const (
	PaymentService_ProcessInvoice_FullMethodName      = "/vms.PaymentService/ProcessInvoice"
	PaymentService_UpdatePaymentStatus_FullMethodName = "/vms.PaymentService/UpdatePaymentStatus"
	PaymentService_GetPaymentByID_FullMethodName      = "/vms.PaymentService/GetPaymentByID"
	PaymentService_DeletePayment_FullMethodName       = "/vms.PaymentService/DeletePayment"
)

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Payment related services
type PaymentServiceClient interface {
	ProcessInvoice(ctx context.Context, in *ProcessInvoiceRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
	UpdatePaymentStatus(ctx context.Context, in *UpdatePaymentStatusRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
	GetPaymentByID(ctx context.Context, in *GetPaymentByIDRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
	DeletePayment(ctx context.Context, in *DeletePaymentRequest, opts ...grpc.CallOption) (*DeletePaymentResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) ProcessInvoice(ctx context.Context, in *ProcessInvoiceRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, PaymentService_ProcessInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) UpdatePaymentStatus(ctx context.Context, in *UpdatePaymentStatusRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, PaymentService_UpdatePaymentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentByID(ctx context.Context, in *GetPaymentByIDRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, PaymentService_GetPaymentByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) DeletePayment(ctx context.Context, in *DeletePaymentRequest, opts ...grpc.CallOption) (*DeletePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePaymentResponse)
	err := c.cc.Invoke(ctx, PaymentService_DeletePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations must embed UnimplementedPaymentServiceServer
// for forward compatibility.
//
// Payment related services
type PaymentServiceServer interface {
	ProcessInvoice(context.Context, *ProcessInvoiceRequest) (*PaymentResponse, error)
	UpdatePaymentStatus(context.Context, *UpdatePaymentStatusRequest) (*PaymentResponse, error)
	GetPaymentByID(context.Context, *GetPaymentByIDRequest) (*PaymentResponse, error)
	DeletePayment(context.Context, *DeletePaymentRequest) (*DeletePaymentResponse, error)
	mustEmbedUnimplementedPaymentServiceServer()
}

// UnimplementedPaymentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentServiceServer struct{}

func (UnimplementedPaymentServiceServer) ProcessInvoice(context.Context, *ProcessInvoiceRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessInvoice not implemented")
}
func (UnimplementedPaymentServiceServer) UpdatePaymentStatus(context.Context, *UpdatePaymentStatusRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentStatus not implemented")
}
func (UnimplementedPaymentServiceServer) GetPaymentByID(context.Context, *GetPaymentByIDRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentByID not implemented")
}
func (UnimplementedPaymentServiceServer) DeletePayment(context.Context, *DeletePaymentRequest) (*DeletePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePayment not implemented")
}
func (UnimplementedPaymentServiceServer) mustEmbedUnimplementedPaymentServiceServer() {}
func (UnimplementedPaymentServiceServer) testEmbeddedByValue()                        {}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentService_ServiceDesc, srv)
}

func _PaymentService_ProcessInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ProcessInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_ProcessInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ProcessInvoice(ctx, req.(*ProcessInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_UpdatePaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).UpdatePaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_UpdatePaymentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).UpdatePaymentStatus(ctx, req.(*UpdatePaymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_GetPaymentByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentByID(ctx, req.(*GetPaymentByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_DeletePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).DeletePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentService_DeletePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).DeletePayment(ctx, req.(*DeletePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentService_ServiceDesc is the grpc.ServiceDesc for PaymentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vms.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessInvoice",
			Handler:    _PaymentService_ProcessInvoice_Handler,
		},
		{
			MethodName: "UpdatePaymentStatus",
			Handler:    _PaymentService_UpdatePaymentStatus_Handler,
		},
		{
			MethodName: "GetPaymentByID",
			Handler:    _PaymentService_GetPaymentByID_Handler,
		},
		{
			MethodName: "DeletePayment",
			Handler:    _PaymentService_DeletePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vms.proto",
}
